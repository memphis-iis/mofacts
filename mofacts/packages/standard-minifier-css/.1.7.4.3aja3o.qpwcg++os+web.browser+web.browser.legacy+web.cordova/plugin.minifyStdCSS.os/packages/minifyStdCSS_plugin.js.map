{"version":3,"sources":["meteor://ðŸ’»app/packages/minifyStdCSS/plugin/minify-css.js"],"names":["sourcemap","module","link","default","v","createHash","LRU","Plugin","registerMinifier","extensions","archMatching","minifier","CssToolsMinifier","processFilesForBundle","files","options","mode","minifyMode","length","merged","mergeCss","addStylesheet","data","code","sourceMap","path","minifiedFiles","CssTools","minifyCss","forEach","minified","mergeCache","max","hashFiles","Profile","hash","f","update","getSourceHash","digest","disableSourceMappingURLs","css","replace","hashOfFiles","get","originals","cssAsts","map","file","filename","getPathInBundle","ast","parseOptions","source","position","getContentsAsString","parseCss","e","reason","error","message","line","column","type","stylesheet","rules","warnCb","msg","console","log","mergedCssAst","mergeCssAsts","stringifiedCss","stringifyCss","inputSourcemaps","set","sourcesContent","sources","newMap","time","SourceMapGenerator","concatConsumer","SourceMapConsumer","consumers","Object","create","Promise","all","entries","name","getSourceMap","err","sourceToConsumerMap","eachMapping","mapping","consumer","original","originalLine","originalColumn","newOriginal","originalPositionFor","addMapping","generated","generatedLine","generatedColumn","content","sourceContentFor","setSourceContent","destroy","values","toString"],"mappings":"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","file":"/packages/minifyStdCSS_plugin.js","sourcesContent":["import sourcemap from \"source-map\";\nimport { createHash } from \"crypto\";\nimport LRU from \"lru-cache\";\n\nPlugin.registerMinifier({\n  extensions: [\"css\"],\n  archMatching: \"web\"\n}, function () {\n  const minifier = new CssToolsMinifier();\n  return minifier;\n});\n\nclass CssToolsMinifier {\n\n  async processFilesForBundle (files, options) {\n    const mode = options.minifyMode;\n  \n    if (! files.length) return;\n  \n    const merged = await mergeCss(files);\n\n    if (mode === 'development') {\n      files[0].addStylesheet({\n    \tdata: merged.code,\n      \tsourceMap: merged.sourceMap,\n      \tpath: 'merged-stylesheets.css'\n      });\n      return;\n    }\n  \n    const minifiedFiles = CssTools.minifyCss(merged.code);\n  \n    if (files.length) {\n      minifiedFiles.forEach(function (minified) {\n        files[0].addStylesheet({\n          data: minified\n        });\n      });\n    }\n  }\n\n}\n\n\nconst mergeCache = new LRU({\n  max: 100\n});\n\nconst hashFiles = Profile(\"hashFiles\", function (files) {\n  const hash = createHash(\"sha1\");\n  files.forEach(f => {\n    hash.update(f.getSourceHash()).update(\"\\0\");\n  });\n  return hash.digest(\"hex\");\n});\n\nfunction disableSourceMappingURLs(css) {\n  return css.replace(/# sourceMappingURL=/g,\n                     \"# sourceMappingURL_DISABLED=\");\n}\n\n// Lints CSS files and merges them into one file, fixing up source maps and\n// pulling any @import directives up to the top since the CSS spec does not\n// allow them to appear in the middle of a file.\nconst mergeCss = Profile(\"mergeCss\", async function (css) {\n  const hashOfFiles = hashFiles(css);\n  let merged = mergeCache.get(hashOfFiles);\n  if (merged) {\n    return merged;\n  }\n\n  // Filenames passed to AST manipulator mapped to their original files\n  const originals = {};\n\n  const cssAsts = css.map(function (file) {\n    const filename = file.getPathInBundle();\n    originals[filename] = file;\n    let ast;\n    try {\n      const parseOptions = { source: filename, position: true };\n      const css = disableSourceMappingURLs(file.getContentsAsString());\n      ast = CssTools.parseCss(css, parseOptions);\n      ast.filename = filename;\n    } catch (e) {\n      if (e.reason) {\n        file.error({\n          message: e.reason,\n          line: e.line,\n          column: e.column\n        });\n      } else {\n        // Just in case it's not the normal error the library makes.\n        file.error({message: e.message});\n      }\n\n      return { type: \"stylesheet\", stylesheet: { rules: [] }, filename };\n    }\n\n    return ast;\n  });\n\n  const warnCb = (filename, msg) => {\n    // XXX make this a buildmessage.warning call rather than a random log.\n    //     this API would be like buildmessage.error, but wouldn't cause\n    //     the build to fail.\n    console.log(`${filename}: warn: ${msg}`);\n  };\n\n  const mergedCssAst = CssTools.mergeCssAsts(cssAsts, warnCb);\n\n  // Overwrite the CSS files list with the new concatenated file\n  const stringifiedCss = CssTools.stringifyCss(mergedCssAst, {\n    sourcemap: true,\n    // don't try to read the referenced sourcemaps from the input\n    inputSourcemaps: false\n  });\n\n  if (! stringifiedCss.code) {\n    mergeCache.set(hashOfFiles, merged = { code: '' });\n    return merged;\n  }\n\n  // Add the contents of the input files to the source map of the new file\n  stringifiedCss.map.sourcesContent =\n    stringifiedCss.map.sources.map(function (filename) {\n      const file = originals[filename] || null;\n      return file && file.getContentsAsString();\n    });\n\n  // Compose the concatenated file's source map with source maps from the\n  // previous build step if necessary.\n  const newMap = await Profile.time(\"composing source maps\", async function () {\n    const newMap = new sourcemap.SourceMapGenerator();\n    const concatConsumer = await new sourcemap.SourceMapConsumer(stringifiedCss.map);\n    // Create a dictionary of source map consumers for fast access\n    const consumers = Object.create(null);\n\n    await Promise.all(Object.entries(originals).map(async ([name, file]) => {\n      const sourceMap = file.getSourceMap();\n\n      if (sourceMap) {\n        try {\n          consumers[name] = await new sourcemap.SourceMapConsumer(sourceMap);\n        } catch (err) {\n          // If we can't apply the source map, silently drop it.\n          //\n          // XXX This is here because there are some less files that\n          // produce source maps that throw when consumed. We should\n          // figure out exactly why and fix it, but this will do for now.\n        }\n      }\n    }));\n\n    // Maps each original source file name to the SourceMapConsumer that\n    // can provide its content.\n    const sourceToConsumerMap = Object.create(null);\n\n    // Find mappings from the concatenated file back to the original files\n    concatConsumer.eachMapping((mapping) => {\n      let { source } = mapping;\n      const consumer = consumers[source];\n\n      let original = {\n        line: mapping.originalLine,\n        column: mapping.originalColumn\n      };\n\n      // If there is a source map for the original file, e.g., if it has been\n      // compiled from Less to CSS, find the source location in the original's\n      // original file. Otherwise, use the mapping of the concatenated file's\n      // source map.\n      if (consumer) {\n        const newOriginal = consumer.originalPositionFor(original);\n\n        // Finding the original position should always be possible (otherwise,\n        // one of the source maps would have incorrect mappings). However, in\n        // case there is something wrong, use the intermediate mapping.\n        if (newOriginal.source !== null) {\n          original = newOriginal;\n          source = original.source;\n\n          if (source) {\n            // Since the new consumer provided a different\n            // original.source, we should ask it for the original source\n            // content instead of asking the concatConsumer.\n            sourceToConsumerMap[source] = consumer;\n          }\n        }\n      }\n\n      if (source && ! sourceToConsumerMap[source]) {\n        // If we didn't set sourceToConsumerMap[source] = consumer above,\n        // use the concatConsumer to determine the original content.\n        sourceToConsumerMap[source] = concatConsumer;\n      }\n\n      // Add a new mapping to the final source map\n      newMap.addMapping({\n        generated: {\n          line: mapping.generatedLine,\n          column: mapping.generatedColumn\n        },\n        original,\n        source,\n      });\n    });\n\n    // The consumer.sourceContentFor and newMap.setSourceContent methods\n    // are relatively fast, but not entirely trivial, so it's better to\n    // call them only once per source, rather than calling them every time\n    // we call newMap.addMapping in the loop above.\n    Object.entries(sourceToConsumerMap).forEach(([source, consumer]) => {\n      const content = consumer.sourceContentFor(source);\n      newMap.setSourceContent(source, content);\n    });\n\n    concatConsumer.destroy();\n    Object.values(consumers).forEach(consumer => consumer.destroy());\n\n    return newMap;\n  });\n\n  mergeCache.set(hashOfFiles, merged = {\n    code: stringifiedCss.code,\n    sourceMap: newMap.toString()\n  });\n\n  return merged;\n});\n"]}