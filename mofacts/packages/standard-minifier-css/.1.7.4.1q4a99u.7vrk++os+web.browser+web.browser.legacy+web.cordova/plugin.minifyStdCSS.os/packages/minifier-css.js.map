{"version":3,"sources":["meteor://ðŸ’»app/packages/minifier-css/minifier.js"],"names":["module1","export","CssTools","path","link","default","v","url","Future","postcss","cssnano","parseCss","cssText","options","source","from","parse","stringifyCss","cssAst","sourcemap","map","inline","annotation","sourcesContent","transformResult","toResult","code","css","toJSON","minifyCss","f","safe","process","then","result","return","catch","error","throw","minifiedCss","wait","mergeCssAsts","cssAsts","warnCb","rulesPredicate","rules","exclude","Array","isArray","node","nodeMatchesRule","includes","name","type","newAst","root","forEach","ast","nodes","charsetRules","filter","some","rule","test","params","filename","importCount","i","length","rewriteCssUrls","imports","splice","push","mergedCssPath","rewriteRules","Profile","funcName","hasOwn","Object","prototype","hasOwnProperty","call","appDir","cwd","sourceFile","input","file","sourceFileFromAppRoot","replace","basePath","pathJoin","pathDirname","match","value","cssUrlRegex","parts","exec","oldCssUrl","quote","resource","protocol","href","startsWith","absolutePath","isRelative","hash","relativeToMergedCss","pathRelative","newCssUrl","charAt","toOSPath","p","platform","toStandardPath","a","b","join","dirname","p1","p2","relative"],"mappings":"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","file":"/packages/minifier-css.js","sourcesContent":["import path from 'path';\nimport url from 'url';\nimport Future from 'fibers/future';\nimport postcss from 'postcss';\nimport cssnano from 'cssnano';\n\nconst CssTools = {\n  /**\n   * Parse the incoming CSS string; return a CSS AST.\n   *\n   * @param {string} cssText The CSS string to be parsed.\n   * @param {Object} options Options to pass to the PostCSS parser.\n   * @return {postcss#Root} PostCSS Root AST.\n   */\n  parseCss(cssText, options = {}) {\n    // This function previously used the `css-parse` npm package, which\n    // set the name of the css file being parsed using  { source: 'filename' }.\n    // If included, we'll convert this to the `postcss` equivalent, to maintain\n    // backwards compatibility.\n    if (options.source) {\n      options.from = options.source;\n      delete options.source;\n    }\n    return postcss.parse(cssText, options);\n  },\n\n  /**\n   * Using the incoming CSS AST, create and return a new object with the\n   * generated CSS string, and optional sourcemap details.\n   *\n   * @param {postcss#Root} cssAst PostCSS Root AST.\n   * @param {Object} options Options to pass to the PostCSS parser.\n   * @return {Object} Format: { code: 'css string', map: 'sourcemap deatils' }.\n   */\n  stringifyCss(cssAst, options = {}) {\n    // This function previously used the `css-stringify` npm package, which\n    // controlled sourcemap generation by passing in { sourcemap: true }.\n    // If included, we'll convert this to the `postcss` equivalent, to maintain\n    // backwards compatibility.\n    if (options.sourcemap) {\n      options.map = {\n        inline: false,\n        annotation: false,\n        sourcesContent: false,\n      };\n      delete options.sourcemap;\n    }\n    // explicitly set from to undefined to prevent postcss warnings\n    if (!options.from){\n      options.from = void 0;\n    }\n\n    transformResult = cssAst.toResult(options);\n\n    return {\n      code: transformResult.css,\n      map: transformResult.map ? transformResult.map.toJSON() : null,\n    };\n  },\n\n  /**\n   * Minify the passed in CSS string.\n   *\n   * @param {string} cssText CSS string to minify.\n   * @return {String[]} Array containing the minified CSS.\n   */\n  minifyCss(cssText) {\n    const f = new Future;\n    postcss([\n      cssnano({ safe: true }),\n    ]).process(cssText, {\n      from: void 0,\n    }).then(result => {\n      f.return(result.css);\n    }).catch(error => {\n      f.throw(error);\n    });\n    const minifiedCss = f.wait();\n\n    // Since this function has always returned an array, we'll wrap the\n    // minified css string in an array before returning, even though we're\n    // only ever returning one minified css string in that array (maintaining\n    // backwards compatibility).\n    return [minifiedCss];\n  },\n\n  /**\n   * Merge multiple CSS AST's into one.\n   *\n   * @param {postcss#Root[]} cssAsts Array of PostCSS Root objects.\n   * @callback warnCb Callback used to handle warning messages.\n   * @return {postcss#Root} PostCSS Root object.\n   */\n  mergeCssAsts(cssAsts, warnCb) {\n    const rulesPredicate = (rules, exclude = false) => {\n      if (! Array.isArray(rules)) {\n        rules = [rules];\n      }\n      return node => {\n        // PostCSS AtRule nodes have `type: 'atrule'` and a descriptive name,\n        // e.g. 'import' or 'charset', while Comment nodes have type only.\n        const nodeMatchesRule = rules.includes(node.name || node.type);\n\n        return exclude ? !nodeMatchesRule : nodeMatchesRule;\n      }\n    };\n\n    // Simple concatenation of CSS files would break @import rules\n    // located in the beginning of a file. Before concatenation, pull\n    // @import rules to the beginning of a new syntax tree so they always\n    // precede other rules.\n    const newAst = postcss.root();\n\n    cssAsts.forEach((ast) => {\n      if (ast.nodes) {\n        // Pick only the imports from the beginning of file ignoring @charset\n        // rules as every file is assumed to be in UTF-8.\n        const charsetRules = ast.nodes.filter(rulesPredicate('charset'));\n\n        if (charsetRules.some((rule) => {\n          // According to MDN, only 'UTF-8' and \"UTF-8\" are the correct\n          // encoding directives representing UTF-8.\n          return ! /^(['\"])UTF-8\\1$/.test(rule.params);\n        })) {\n          warnCb(\n            ast.filename,\n            '@charset rules in this file will be ignored as UTF-8 is the ' +\n            'only encoding supported'\n          );\n        }\n\n        ast.nodes = ast.nodes.filter(rulesPredicate('charset', true));\n        let importCount = 0;\n        for (let i = 0; i < ast.nodes.length; i++) {\n          if (! rulesPredicate(['import', 'comment'])(ast.nodes[i])) {\n            importCount = i;\n            break;\n          }\n        }\n\n        CssTools.rewriteCssUrls(ast);\n\n        const imports = ast.nodes.splice(0, importCount);\n        newAst.nodes.push(...imports);\n\n        // If there are imports left in the middle of a file, warn users as it\n        // might be a potential bug (imports are only valid at the beginning of\n        // a file).\n        if (ast.nodes.some(rulesPredicate('import'))) {\n          warnCb(\n            ast.filename,\n            'There are some @import rules in the middle of a file. This ' +\n            'might be a bug, as imports are only valid at the beginning of ' +\n            'a file.'\n          );\n        }\n      }\n    });\n\n    // Now we can put the rest of CSS rules into new AST.\n    cssAsts.forEach((ast) => {\n      if (ast.nodes) {\n        newAst.nodes.push(...ast.nodes);\n      }\n    });\n\n    return newAst;\n  },\n\n  /**\n   * We are looking for all relative urls defined with the `url()` functional\n   * notation and rewriting them to the equivalent absolute url using the\n   * `source` path provided by postcss. For performance reasons this function\n   * acts by side effect by modifying the given AST without doing a deep copy.\n   *\n   * @param {postcss#Root} ast PostCSS Root object.\n   * @return Modifies the ast param in place.\n   */\n  rewriteCssUrls(ast) {\n    const mergedCssPath = '/';\n    rewriteRules(ast.nodes, mergedCssPath);\n  }\n};\n\nif (typeof Profile !== 'undefined') {\n  [\n    'parseCss',\n    'stringifyCss',\n    'minifyCss',\n    'mergeCssAsts',\n    'rewriteCssUrls',\n  ].forEach(funcName => {\n    CssTools[funcName] = Profile(`CssTools.${funcName}`, CssTools[funcName]);\n  });\n}\n\nexport { CssTools };\n\nconst hasOwn = Object.prototype.hasOwnProperty;\n\nconst rewriteRules = (rules, mergedCssPath) => {\n  rules.forEach((rule) => {\n    // Recurse if there are sub-rules. An example:\n    //     @media (...) {\n    //         .rule { url(...); }\n    //     }\n    if (hasOwn.call(rule, 'nodes')) {\n      rewriteRules(rule.nodes, mergedCssPath);\n    }\n\n    const appDir = process.cwd();\n    const sourceFile = rule.source.input.file;\n    const sourceFileFromAppRoot =\n      sourceFile ? sourceFile.replace(appDir, '') : '';\n    let basePath = pathJoin('/', pathDirname(sourceFileFromAppRoot));\n\n    // Set the correct basePath based on how the linked asset will be served.\n    // XXX This is wrong. We are coupling the information about how files will\n    // be served by the web server to the information how they were stored\n    // originally on the filesystem in the project structure. Ideally, there\n    // should be some module that tells us precisely how each asset will be\n    // served but for now we are just assuming that everything that comes from\n    // a folder starting with \"/packages/\" is served on the same path as\n    // it was on the filesystem and everything else is served on root \"/\".\n    if (! basePath.match(/^\\/?packages\\//i)) {\n      basePath = \"/\";\n    }\n\n    let value = rule.value;\n\n    // Match css values containing some functional calls to `url(URI)` where\n    // URI is optionally quoted.\n    // Note that a css value can contains other elements, for instance:\n    //   background: top center url(\"background.png\") black;\n    // or even multiple url(), for instance for multiple backgrounds.\n    var cssUrlRegex = /url\\s*\\(\\s*(['\"]?)(.+?)\\1\\s*\\)/gi;\n    let parts;\n    while (parts = cssUrlRegex.exec(value)) {\n      const oldCssUrl = parts[0];\n      const quote = parts[1];\n      const resource = url.parse(parts[2]);\n\n      // We don't rewrite URLs starting with a protocol definition such as\n      // http, https, or data, or those with network-path references\n      // i.e. //img.domain.com/cat.gif\n      if (resource.protocol !== null ||\n          resource.href.startsWith('//') ||\n          resource.href.startsWith('#')) {\n        continue;\n      }\n\n      // Rewrite relative paths (that refers to the internal application tree)\n      // to absolute paths (addressable from the public build).\n      let absolutePath = isRelative(resource.path)\n        ? pathJoin(basePath, resource.path)\n        : resource.path;\n\n      if (resource.hash) {\n        absolutePath += resource.hash;\n      }\n\n      // We used to finish the rewriting process at the absolute path step\n      // above. But it didn't work in case the Meteor application was deployed\n      // under a sub-path (eg `ROOT_URL=http://localhost:3000/myapp meteor`)\n      // in which case the resources linked in the merged CSS file would miss\n      // the `myapp/` prefix. Since this path prefix is only known at launch\n      // time (rather than build time) we can't use absolute paths to link\n      // resources in the generated CSS.\n      //\n      // Instead we transform absolute paths to make them relative to the\n      // merged CSS, leaving to the browser the responsibility to calculate\n      // the final resource links (by adding the application deployment\n      // prefix, here `myapp/`, if applicable).\n      const relativeToMergedCss = pathRelative(mergedCssPath, absolutePath);\n      const newCssUrl = `url(${quote}${relativeToMergedCss}${quote})`;\n      value = value.replace(oldCssUrl, newCssUrl);\n    }\n\n    rule.value = value;\n  });\n};\n\nconst isRelative = path => path && path.charAt(0) !== '/';\n\n// These are duplicates of functions in tools/files.js, because we don't have\n// a good way of exporting them into packages.\n// XXX deduplicate files.js into a package at some point so that we can use it\n// in core\nconst toOSPath =\n  p => process.platform === 'win32' ? p.replace(/\\//g, '\\\\') : p;\nconst toStandardPath =\n  p => process.platform === 'win32' ? p.replace(/\\\\/g, '/') : p;\nconst pathJoin =\n  (a, b) => toStandardPath(path.join(toOSPath(a), toOSPath(b)));\nconst pathDirname =\n  p => toStandardPath(path.dirname(toOSPath(p)));\nconst pathRelative =\n  (p1, p2) => toStandardPath(path.relative(toOSPath(p1), toOSPath(p2)));\n"]}