{"version":3,"sources":["/tools/isobuild/build-plugin.js"],"names":["module","export","SourceProcessorSet","InputFile","utils","link","default","v","archinfo","require","buildmessage","files","_","nextId","exports","SourceProcessor","options","self","isopack","extensions","slice","filenames","archMatching","isTemplate","factoryFunction","methodName","id","displayName","userPlugin","Object","assign","prototype","instantiatePlugin","assertInCapture","Error","enterJob","markBoundary","call","pluginCacheDir","setDiskCacheDirectory","convertToOSPath","e","exception","relevantForArch","arch","matches","constructor","myPackageDisplayName","hardcodeJs","singlePackage","allowConflicts","_myPackageDisplayName","_singlePackage","_hardcodeJs","_allowConflicts","_byExtension","_byFilename","allSourceProcessors","_legacyHandlers","_conflictError","package1","package2","conflict","error","addSourceProcessor","sp","assertInJob","_addSourceProcessorHelper","push","things","byThing","errorPrefix","forEach","thing","hasOwnProperty","addLegacyHandler","extension","handler","packageDisplayName","merge","otherSet","sourceProcessor","each","info","getByExtension","getByFilename","filename","classifyFilename","SourceClassification","sourceProcessors","parts","split","i","length","join","usesDefaultSourceProcessor","legacy","legacyHandler","legacyIsTemplate","isEmpty","appReadDirectoryOptions","include","names","addedJs","addExtension","ext","RegExp","quotemeta","some","keys","exclude","type","knownTypes","indexOf","filteredSourceProcessors","filter","undefined","isNonLegacySource","getContentsAsBuffer","getPackageName","getPathInPackage","getSourceHash","getArch","getContentsAsString","toString","getBasename","pathBasename","getDirname","pathDirname","getFileOptions","path","packageName","_reportError","message","file","sourcePath","line","column","func"],"mappings":"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","sourcesContent":["var archinfo = require('../utils/archinfo');\nvar buildmessage = require('../utils/buildmessage.js');\nvar files = require('../fs/files');\nvar _ = require('underscore');\nimport utils from '../utils/utils.js';\n\nlet nextId = 1;\n\nexports.SourceProcessor = function (options) {\n  var self = this;\n  self.isopack = options.isopack;\n  self.extensions = (options.extensions || []).slice();\n  self.filenames = (options.filenames || []).slice();\n  self.archMatching = options.archMatching;\n  self.isTemplate = !! options.isTemplate;\n  self.factoryFunction = options.factoryFunction;\n  self.methodName = options.methodName;\n  self.id = `${ options.isopack.displayName() }#${ nextId++ }`;\n  self.userPlugin = null;\n};\nObject.assign(exports.SourceProcessor.prototype, {\n  // Call the user's factory function to get the actual build plugin object.\n  // Note that we're supposed to have one userPlugin per project, so this\n  // assumes that each Isopack object is specific to a project.  We don't run\n  // this immediately on evaluating Plugin.registerCompiler; we instead wait\n  // until the whole plugin file has been evaluated (so that it can use things\n  // defined later in the file).\n  instantiatePlugin: function () {\n    var self = this;\n    buildmessage.assertInCapture();\n    if (self.userPlugin) {\n      throw Error(\"Called instantiatePlugin twice?\");\n    }\n    buildmessage.enterJob(\n      `running ${self.methodName} callback in package ` +\n        self.isopack.displayName(),\n      () => {\n        try {\n          self.userPlugin = buildmessage.markBoundary(self.factoryFunction)\n            .call(null);\n          // If we have a disk cache directory and the plugin wants it, use it.\n          if (self.isopack.pluginCacheDir &&\n              self.userPlugin.setDiskCacheDirectory) {\n            buildmessage.markBoundary(function () {\n              self.userPlugin.setDiskCacheDirectory(\n                files.convertToOSPath(self.isopack.pluginCacheDir)\n              );\n            })();\n          }\n        } catch (e) {\n          buildmessage.exception(e);\n        }\n      }\n    );\n  },\n  relevantForArch: function (arch) {\n    var self = this;\n    return ! self.archMatching || archinfo.matches(arch, self.archMatching);\n  }\n});\n\n// Represents a set of SourceProcessors available in a given package. They may\n// not have conflicting extensions or filenames.\nexport class SourceProcessorSet {\n  constructor(myPackageDisplayName, {\n    hardcodeJs,\n    singlePackage,\n    allowConflicts,\n  } = {}) {\n    // For error messages only.\n    this._myPackageDisplayName = myPackageDisplayName;\n    // If this represents the SourceProcessors *registered* by a single package\n    // (vs those *available* to a package), use different error messages.\n    this._singlePackage = singlePackage;\n    // If this is being used for *compilers*, we hardcode *.js. If it is being\n    // used for linters, we don't.\n    this._hardcodeJs = !! hardcodeJs;\n    // Multiple linters may be registered on the same extension or filename, but\n    // not compilers.\n    this._allowConflicts = !! allowConflicts;\n\n    // Map from extension -> [SourceProcessor]\n    this._byExtension = {};\n    // Map from basename -> [SourceProcessor]\n    this._byFilename = {};\n    // This is just an duplicate-free list of all SourceProcessors in\n    // byExtension or byFilename.\n    this.allSourceProcessors = [];\n    // extension -> { handler, packageDisplayName, isTemplate, archMatching }\n    this._legacyHandlers = {};\n  }\n\n  _conflictError(package1, package2, conflict) {\n    if (this._singlePackage) {\n      buildmessage.error(\n        `plugins in package ${ this._myPackageDisplayName } define multiple ` +\n          `handlers for ${ conflict }`);\n    } else {\n      buildmessage.error(\n        `conflict: two packages included in ${ this._myPackageDisplayName } ` +\n          `(${ package1 } and ${ package2 }) are both trying to handle ` +\n          conflict);\n    }\n  }\n\n  addSourceProcessor(sp) {\n    buildmessage.assertInJob();\n    this._addSourceProcessorHelper(sp, sp.extensions, this._byExtension, '*.');\n    this._addSourceProcessorHelper(sp, sp.filenames, this._byFilename, '');\n    // If everything conflicted, then the SourceProcessors will be in\n    // allSourceProcessors but not any of the data structures, but in that case\n    // the caller should be checking for errors anyway.\n    this.allSourceProcessors.push(sp);\n  }\n  _addSourceProcessorHelper(sp, things, byThing, errorPrefix) {\n    buildmessage.assertInJob();\n\n    things.forEach((thing) => {\n      if (byThing.hasOwnProperty(thing)) {\n        if (this._allowConflicts) {\n          byThing[thing].push(sp);\n        } else {\n          this._conflictError(sp.isopack.displayName(),\n                              byThing[thing][0].isopack.displayName(),\n                              errorPrefix + thing);\n          // recover by ignoring this one\n        }\n      } else {\n        byThing[thing] = [sp];\n      }\n    });\n  }\n\n  addLegacyHandler({ extension, handler, packageDisplayName, isTemplate,\n                     archMatching }) {\n    if (this._allowConflicts) {\n      throw Error(\"linters have no legacy handlers\");\n    }\n\n    if (this._byExtension.hasOwnProperty(extension)) {\n      this._conflictError(packageDisplayName,\n                          this._byExtension[extension].isopack.displayName(),\n                          '*.' + extension);\n      // recover by ignoring\n      return;\n    }\n    if (this._legacyHandlers.hasOwnProperty(extension)) {\n      this._conflictError(packageDisplayName,\n                          this._legacyHandlers[extension].packageDisplayName,\n                          '*.' + extension);\n      // recover by ignoring\n      return;\n    }\n    this._legacyHandlers[extension] =\n      {handler, packageDisplayName, isTemplate, archMatching};\n  }\n\n  // Adds all the source processors (and legacy handlers) from the other set to\n  // this one. Logs buildmessage errors on conflict.  Ignores packageDisplayName\n  // and singlePackage.  If arch is set, skips SourceProcessors that\n  // don't match it.\n  merge(otherSet, options = {}) {\n    const { arch } = options;\n    buildmessage.assertInJob();\n    otherSet.allSourceProcessors.forEach((sourceProcessor) => {\n      if (! arch || sourceProcessor.relevantForArch(arch)) {\n        this.addSourceProcessor(sourceProcessor);\n      }\n    });\n    _.each(otherSet._legacyHandlers, (info, extension) => {\n      const { handler, packageDisplayName, isTemplate, archMatching } = info;\n      this.addLegacyHandler(\n        {extension, handler, packageDisplayName, isTemplate, archMatching});\n    });\n  }\n\n  // Note: Only returns SourceProcessors, not legacy handlers.\n  getByExtension(extension) {\n    if (this._allowConflicts) {\n      throw Error(\"Can't call getByExtension for linters\");\n    }\n\n    if (this._byExtension.hasOwnProperty(extension)) {\n      return this._byExtension[extension][0];\n    }\n    return null;\n  }\n\n  // Note: Only returns SourceProcessors, not legacy handlers.\n  getByFilename(filename) {\n    if (this._allowConflicts) {\n      throw Error(\"Can't call getByFilename for linters\");\n    }\n\n    if (this._byFilename.hasOwnProperty(filename)) {\n      return this._byFilename[filename][0];\n    }\n    return null;\n  }\n\n  // filename, arch -> SourceClassification\n  classifyFilename(filename, arch) {\n    // First check to see if a plugin registered for this exact filename.\n    if (this._byFilename.hasOwnProperty(filename)) {\n      return new SourceClassification('filename', {\n        arch,\n        sourceProcessors: this._byFilename[filename].slice()\n      });\n    }\n\n    if (filename === \".meteorignore\") {\n      return new SourceClassification(\"meteor-ignore\");\n    }\n\n    // Now check to see if a plugin registered for an extension. We prefer\n    // longer extensions.\n    const parts = filename.split('.');\n    // don't use iteration functions, so we can return (and start at #1)\n    for (let i = 1; i < parts.length; i++) {\n      const extension = parts.slice(i).join('.');\n\n      if (this._byExtension.hasOwnProperty(extension)) {\n        return new SourceClassification('extension', {\n          arch,\n          extension,\n          sourceProcessors: this._byExtension[extension]\n        });\n      }\n\n      if (this._hardcodeJs && extension === 'js') {\n        // If there is no special sourceProcessor for handling a .js file,\n        // we can still classify it as extension/js, only without any\n        // source processors. #HardcodeJs\n        return new SourceClassification('extension', {\n          extension,\n          usesDefaultSourceProcessor: true\n        });\n      }\n\n      if (this._legacyHandlers.hasOwnProperty(extension)) {\n        const legacy = this._legacyHandlers[extension];\n        if (legacy.archMatching &&\n            ! archinfo.matches(arch, legacy.archMatching)) {\n          return new SourceClassification('wrong-arch');\n        }\n        return new SourceClassification('legacy-handler', {\n          extension,\n          legacyHandler: legacy.handler,\n          legacyIsTemplate: legacy.isTemplate\n        });\n      }\n    }\n\n    // Nothing matches; it must be a static asset (or a non-linted file).\n    return new SourceClassification('unmatched');\n  }\n\n  isEmpty() {\n    return _.isEmpty(this._byFilename) && _.isEmpty(this._byExtension) &&\n      _.isEmpty(this._legacyHandlers);\n  }\n\n  // Returns an options object suitable for passing to\n  // `watch.readAndWatchDirectory` to find source files processed by this\n  // SourceProcessorSet.\n  appReadDirectoryOptions(arch) {\n    const include = [];\n    const names = [];\n    let addedJs = false;\n\n    function addExtension(ext) {\n      include.push(new RegExp('\\\\.' + utils.quotemeta(ext) + '$'));\n      if (ext === 'js') {\n        addedJs = true;\n      }\n    }\n\n    _.each(this._byExtension, (sourceProcessors, ext) => {\n      if (sourceProcessors.some(sp => sp.relevantForArch(arch))) {\n        addExtension(ext);\n      }\n    });\n    Object.keys(this._legacyHandlers).forEach(addExtension);\n\n    if (this._hardcodeJs && ! addedJs) {\n      // If there is no sourceProcessor for handling .js files, we still\n      // want to make sure they get picked up when we're reading the\n      // contents of app directories. #HardcodeJs\n      addExtension('js');\n    }\n\n    _.each(this._byFilename, (sourceProcessors, filename) => {\n      if (sourceProcessors.some(sp => sp.relevantForArch(arch))) {\n        names.push(filename);\n      }\n    });\n    return {include, names, exclude: []};\n  }\n}\n\nclass SourceClassification {\n  constructor(type, {\n    legacyHandler,\n    extension,\n    sourceProcessors,\n    usesDefaultSourceProcessor,\n    legacyIsTemplate,\n    arch,\n  } = {}) {\n    const knownTypes = [\n      'extension',\n      'filename',\n      'legacy-handler',\n      'wrong-arch',\n      'unmatched',\n      'meteor-ignore',\n    ];\n    if (knownTypes.indexOf(type) === -1) {\n      throw Error(`Unknown SourceClassification type ${ type }`);\n    }\n    // This is the only thing we can write to `this` before checking for\n    // wrong-arch.\n    this.type = type;\n\n    if (type === 'extension' || type === 'filename') {\n      if (sourceProcessors) {\n        if (! arch) {\n          throw Error(\"need to filter based on arch!\");\n        }\n\n        // If there's a SourceProcessor (or legacy handler) registered for this\n        // file but not for this arch, we want to ignore it instead of\n        // processing it or treating it as a static asset. (Note that prior to\n        // the batch-plugins project, files added in a package with\n        // `api.addFiles('foo.bar')` where *.bar is a web-specific legacy\n        // handler (eg) would end up adding 'foo.bar' as a static asset on\n        // non-web programs, which was unintended. This didn't happen in apps\n        // because initFromAppDir's getFiles never added them.)\n        const filteredSourceProcessors = sourceProcessors.filter(\n          (sourceProcessor) => sourceProcessor.relevantForArch(arch)\n        );\n        if (! filteredSourceProcessors.length) {\n          // Wrong architecture! Rewrite this.type and return.  (Note that we\n          // haven't written anything else to `this` so far.)\n          this.type = 'wrong-arch';\n          return;\n        }\n\n        this.sourceProcessors = filteredSourceProcessors;\n      } else if (!(type === 'extension' && extension === 'js')) {\n        // 'extension' and 'filename' classifications need to have at least one\n        // SourceProcessor, unless it's the #HardcodeJs special case.\n        throw Error(`missing sourceProcessors for ${ type }!`);\n      }\n    }\n\n    if (type === 'legacy-handler') {\n      if (! legacyHandler) {\n        throw Error('SourceClassification needs legacyHandler!');\n      }\n      if (legacyIsTemplate === undefined) {\n        throw Error('SourceClassification needs legacyIsTemplate!');\n      }\n      this.legacyHandler = legacyHandler;\n      this.legacyIsTemplate = legacyIsTemplate;\n    }\n\n    if (type === 'extension' || type === 'legacy-handler') {\n      if (! extension) {\n        throw Error('extension SourceClassification needs extension!');\n      }\n      this.extension = extension;\n    }\n\n    if (usesDefaultSourceProcessor) {\n      if (this.extension !== 'js' &&\n          this.extension !== 'css') {\n        // We only currently hard-code support for processing .js files\n        // when no source processor is registered (#HardcodeJs). Default\n        // support could conceivably be extended to .css files too, but\n        // anything else is almost certainly a mistake.\n        throw Error('non-JS/CSS file relying on default source processor?');\n      }\n      this.usesDefaultSourceProcessor = true;\n    } else {\n      this.usesDefaultSourceProcessor = false;\n    }\n  }\n\n  isNonLegacySource() {\n    return this.type === 'extension' || this.type === 'filename';\n  }\n}\n\n\n\n// This is the base class of the object presented to the user's plugin code.\nexport class InputFile {\n  /**\n   * @summary Returns the full contents of the file as a buffer.\n   * @memberof InputFile\n   * @returns {Buffer}\n   */\n  getContentsAsBuffer() {\n    throw new Error(\"Not Implemented\");\n  }\n\n  /**\n   * @summary Returns the name of the package or `null` if the file is not in a\n   * package.\n   * @memberof InputFile\n   * @returns {String}\n   */\n  getPackageName() {\n    throw new Error(\"Not Implemented\");\n  }\n\n  /**\n   * @summary Returns the relative path of file to the package or app root\n   * directory. The returned path always uses forward slashes.\n   * @memberof InputFile\n   * @returns {String}\n   */\n  getPathInPackage() {\n    throw new Error(\"Not Implemented\");\n  }\n\n  /**\n   * @summary Returns a hash string for the file that can be used to implement\n   * caching.\n   * @memberof InputFile\n   * @returns {String}\n   */\n  getSourceHash() {\n    throw new Error(\"Not Implemented\");\n  }\n\n  /**\n   * @summary Returns the architecture that is targeted while processing this\n   * file.\n   * @memberof InputFile\n   * @returns {String}\n   */\n  getArch() {\n    throw new Error(\"Not Implemented\");\n  }\n\n  /**\n   * @summary Returns the full contents of the file as a string.\n   * @memberof InputFile\n   * @returns {String}\n   */\n  getContentsAsString() {\n    var self = this;\n    return self.getContentsAsBuffer().toString('utf8');\n  }\n\n  /**\n   * @summary Returns the filename of the file.\n   * @memberof InputFile\n   * @returns {String}\n   */\n  getBasename() {\n    var self = this;\n    return files.pathBasename(self.getPathInPackage());\n  }\n\n  /**\n   * @summary Returns the directory path relative to the package or app root.\n   * The returned path always uses forward slashes.\n   * @memberof InputFile\n   * @returns {String}\n   */\n  getDirname() {\n    var self = this;\n    return files.pathDirname(self.getPathInPackage());\n  }\n\n  /**\n   * @summary Returns an object of file options such as those passed as the\n   *          third argument to api.addFiles.\n   * @memberof InputFile\n   * @returns {Object}\n   */\n  getFileOptions() {\n    throw new Error(\"Not Implemented\");\n  }\n\n  /**\n   * @summary Call this method to raise a compilation or linting error for the\n   * file.\n   * @param {Object} options\n   * @param {String} options.message The error message to display.\n   * @param {String} [options.sourcePath] The path to display in the error message.\n   * @param {Integer} options.line The line number to display in the error message.\n   * @param {String} options.func The function name to display in the error message.\n   * @memberof InputFile\n   */\n  error(options) {\n    var self = this;\n    var path = self.getPathInPackage();\n    var packageName = self.getPackageName();\n    if (packageName) {\n      path = \"packages/\" + packageName + \"/\" + path;\n    }\n\n    self._reportError(options.message || (\"error building \" + path), {\n      file: options.sourcePath || path,\n      line: options.line ? options.line : undefined,\n      column: options.column ? options.column : undefined,\n      func: options.func ? options.func : undefined\n    });\n  }\n\n  // Default implementation. May be overridden by subclasses.\n  _reportError(message, info) {\n    buildmessage.error(message, info);\n  }\n}\n"],"file":"tools/isobuild/build-plugin.js.map"}