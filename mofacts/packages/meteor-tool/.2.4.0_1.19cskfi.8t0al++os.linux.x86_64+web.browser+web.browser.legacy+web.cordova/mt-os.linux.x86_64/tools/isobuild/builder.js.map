{"version":3,"sources":["/tools/isobuild/builder.js"],"names":["_objectSpread","module1","link","default","v","export","Builder","assert","WatchSet","readAndWatchFile","sha1","files","symlinkWithOverwrite","realpath","NpmDiscards","Profile","optimisticReadFile","optimisticReaddir","optimisticStatOrNull","optimisticLStatOrNull","optimisticHashOrNull","ENABLE_IN_PLACE_BUILDER_REPLACEMENT","process","platform","env","METEOR_DISABLE_BUILDER_IN_PLACE","constructor","outputPath","previousBuilder","forceInPlaceBuild","usedAsFile","previousUsedAsFile","writtenHashes","createdSymlinks","previousWrittenHashes","previousCreatedSymlinks","nonce","Math","floor","random","buildPath","pathJoin","pathDirname","pathBasename","resetBuildPath","Error","exists","rm_recursive","mkdir_p","watchSet","_ensureDirectory","relPath","parts","pathNormalize","split","pathSep","length","pop","partsSoFar","forEach","part","push","partial","join","needToMkdir","unlink","e","code","_sanitize","isDirectory","partsOut","i","shouldBeFile","mustBeUnique","match","replace","ext","suffix","candidate","usePreviousWrite","hash","sanitize","_normalizeFilePath","slice","write","data","file","executable","symlink","getData","Buffer","pathResolve","absPath","mode","atomicallyRewriteFile","writeFile","copyTranspiledModules","relativePaths","sourceRootDir","targetRootDir","needToTranspile","inCheckout","jsPath","jsToTs","path","babel","require","commonBabelOptions","getDefaultOptions","nodeMajorVersion","parseInt","versions","node","typescript","sourceMaps","toolsDir","getCurrentToolsDir","babelCacheDirectory","ok","pathIsAbsolute","fullPath","inputFileContents","readFile","transpiled","compile","filename","sourceFileName","cacheDirectory","sourceMapUrlComment","from","sourceMapTarget","map","JSON","stringify","writeJson","reserve","directory","soFar","shouldBeDirectory","generateFilename","writeToGeneratedFilename","writeOptions","generated","copyNodeModulesDirectory","options","strictEqual","to","_ensureAllNonPackageDirectories","_copyDirectory","absFromDir","relToDir","dirStat","absFromPackageJson","stat","isFile","item","copyDirectory","ignore","specificFiles","npmDiscards","filter","specificPaths","f","rootDir","walk","absFrom","relTo","absTo","thisAbsFrom","thisRelTo","cachedExternalPath","getExternalPath","real","isExternal","pathRelative","startsWith","fileStatus","isSymbolicLink","externalPath","itemForMatch","some","pattern","shouldDiscard","linkSource","readlink","linkTarget","symlinkIfPossible","content","enter","subBuilder","relPathWithSep","methods","method","args","ret","substr","passThroughMethods","complete","removed","paths","Object","keys","hasOwnProperty","anotherPath","renameDirAlmostAtomically","abort","getWatchSet","endsWith","rname","rpath","rename","source","target","slowBuilderMethods","prototype"],"mappings":"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","sourcesContent":["import assert from \"assert\";\nimport {WatchSet, readAndWatchFile, sha1} from '../fs/watch';\nimport files, {\n  symlinkWithOverwrite, realpath,\n} from '../fs/files';\nimport NpmDiscards from './npm-discards';\nimport {Profile} from '../tool-env/profile';\nimport {\n  optimisticReadFile,\n  optimisticReaddir,\n  optimisticStatOrNull,\n  optimisticLStatOrNull,\n  optimisticHashOrNull,\n} from \"../fs/optimistic\";\n\n// Builder is in charge of writing \"bundles\" to disk, which are\n// directory trees such as site archives, programs, and packages.  In\n// addition to writing data to files, it can copy or link in existing\n// files and directories (keeping track of them in a WatchSet in order\n// to trigger rebuilds appropriately).\n//\n// By default, Builder constructs the entire output directory from\n// scratch under a temporary name, and then moves it into place.\n// For efficient rebuilds, Builder can be given a `previousBuilder`,\n// in which case it will write files into the existing output directory\n// instead.\n//\n// On Windows (or when METEOR_DISABLE_BUILDER_IN_PLACE is set), Builder\n// always creates a new output directory under a temporary name rather than\n// using the old directory.  The reason is that we don't want rebuilding to\n// interfere with the running app, and we rely on the fact that on OS X and\n// Linux, if the process has opened a file for reading, it retains the file\n// by its inode, not path, so it is safe to write a new file to the same path\n// (or delete the file).\n//\n// Separate from that, Builder has a strategy of writing files under a temporary\n// name and then renaming them.  This is to achieve an \"atomic\" write, meaning\n// the server doesn't see a partially-written file that appears truncated.\n//\n// On Windows we copy files instead of symlinking them (see comments inline).\n\n\n// Whether to support writing files into the same directory as a previous\n// Builder on rebuild (rather than creating a new build directory and\n// moving it into place).\nconst ENABLE_IN_PLACE_BUILDER_REPLACEMENT =\n  (process.platform !== 'win32') &&\n  ! process.env.METEOR_DISABLE_BUILDER_IN_PLACE;\n\n\n// Options:\n//  - outputPath: Required. Path to the directory that will hold the\n//    bundle when building is complete. It should not exist (unless\n//    previousBuilder is passed). Its parents will be created if necessary.\n// - previousBuilder: Optional. An in-memory instance of Builder left\n// from the previous iteration. It is assumed that the previous builder\n// has completed its job successfully and its files are stored on the\n// file system in the exact layout as described in its usedAsFile data\n// structure; and the hashes of the contents correspond to the\n// writtenHashes data strcture.\nexport default class Builder {\n  constructor({\n    outputPath,\n    previousBuilder,\n    // Even though in-place builds are disabled by default on some\n    // platforms (Windows), they can be forcibly reenabled with this\n    // option, in cases where it's safe and/or necessary to avoid\n    // clobbering existing files.\n    forceInPlaceBuild = false,\n  }) {\n    this.outputPath = outputPath;\n\n    // Paths already written to. Map from canonicalized relPath (no\n    // trailing slash) to true for a file, or false for a directory.\n    this.usedAsFile = { '': false, '.': false };\n    this.previousUsedAsFile = {};\n\n    this.writtenHashes = {};\n    this.createdSymlinks = {};\n    this.previousWrittenHashes = {};\n    this.previousCreatedSymlinks = {};\n\n    // foo/bar => foo/.build1234.bar\n    // Should we include a random number? The advantage is that multiple\n    // builds can run in parallel. The disadvantage is that stale build\n    // files hang around forever. For now, go with the former.\n    const nonce = Math.floor(Math.random() * 999999);\n    this.buildPath = files.pathJoin(files.pathDirname(this.outputPath),\n                                    '.build' + nonce + \".\" +\n                                    files.pathBasename(this.outputPath));\n\n    let resetBuildPath = true;\n\n    // If we have a previous builder and we are allowed to re-use it,\n    // let's keep all the older files on the file-system and replace\n    // only outdated ones + write the new files in the same path\n    if (previousBuilder &&\n        (forceInPlaceBuild || ENABLE_IN_PLACE_BUILDER_REPLACEMENT)) {\n      if (previousBuilder.outputPath !== outputPath) {\n        throw new Error(\n          `previousBuilder option can only be set to a builder with the same output path.\nPrevious builder: ${previousBuilder.outputPath}, this builder: ${outputPath}`\n        );\n      }\n\n      if (files.exists(previousBuilder.outputPath)) {\n        // write files in-place in the output directory of the previous builder\n        this.buildPath = previousBuilder.outputPath;\n\n        this.previousWrittenHashes = previousBuilder.writtenHashes;\n        this.previousUsedAsFile = previousBuilder.usedAsFile;\n        this.previousCreatedSymlinks = previousBuilder.createdSymlinks;\n\n        resetBuildPath = false;\n      } else {\n        resetBuildPath = true;\n      }\n    }\n\n    // Build the output from scratch\n    if (resetBuildPath) {\n      files.rm_recursive(this.buildPath);\n      files.mkdir_p(this.buildPath, 0o755);\n    }\n\n    this.watchSet = new WatchSet();\n\n    // XXX cleaner error handling. don't make the humans read an\n    // exception (and, make suitable for use in automated systems)\n  }\n\n  // Like mkdir_p, but records in self.usedAsFile that we have created\n  // the directories, and takes a path relative to the bundle\n  // root. Throws an exception on failure.\n  _ensureDirectory(relPath) {\n    const parts = files.pathNormalize(relPath).split(files.pathSep);\n    if (parts.length > 1 && parts[parts.length - 1] === '') {\n      // remove trailing slash\n      parts.pop();\n    }\n\n    const partsSoFar = [];\n    parts.forEach(part => {\n      partsSoFar.push(part);\n      const partial = partsSoFar.join(files.pathSep);\n      if (! (partial in this.usedAsFile)) {\n        let needToMkdir = true;\n        if (partial in this.previousUsedAsFile) {\n          if (this.previousUsedAsFile[partial]) {\n            // was previously used as file, delete it, create a directory\n            try {\n              files.unlink(partial);\n            } catch (e) {\n              // If files.unlink(partial) failed because the file does not\n              // exist, then we can just pretend the unlink succeeded.\n              if (e.code !== \"ENOENT\") {\n                throw e;\n              }\n            }\n          } else {\n            // is already a directory\n            needToMkdir = false;\n          }\n        }\n\n        if (needToMkdir) {\n          // It's new -- create it\n          files.mkdir_p(files.pathJoin(this.buildPath, partial), 0o755);\n        }\n        this.usedAsFile[partial] = false;\n      } else if (this.usedAsFile[partial]) {\n        // Already exists and is a file. Oops.\n        throw new Error(`tried to make ${relPath} a directory but ${partial} is already a file`);\n      } else {\n        // Already exists and is a directory\n      }\n    });\n  }\n\n  // isDirectory defaults to false\n  _sanitize(relPath, isDirectory) {\n    const parts = relPath.split(files.pathSep);\n    const partsOut = [];\n    for (let i = 0; i < parts.length; i++) {\n      let part = parts[i];\n      const shouldBeFile = (i === parts.length - 1) && ! isDirectory;\n      const mustBeUnique = (i === parts.length - 1);\n\n      // Basic sanitization\n      if (part.match(/^\\.+$/)) {\n        throw new Error(`Path contains forbidden segment '${part}'`);\n      }\n\n      part = part.replace(/[^a-zA-Z0-9._\\:\\-@#]/g, '_');\n\n      // If at last component, pull extension (if any) off of part\n      let ext = '';\n      if (shouldBeFile) {\n        const split = part.split('.');\n        if (split.length > 1) {\n          ext = \".\" + split.pop();\n        }\n        part = split.join('.');\n      }\n\n      // Make sure it's sufficiently unique\n      let suffix = '';\n      while (true) {\n        const candidate = files.pathJoin(partsOut.join(files.pathSep), part + suffix + ext);\n        if (candidate.length) {\n          // If we've never heard of this, then it's unique enough.\n          if (!(candidate in this.usedAsFile)) {\n            break;\n          }\n          // If we want this bit to be a directory, and we don't need it to be\n          // unique (ie, it isn't the very last bit), and it's currently a\n          // directory, then that's OK.\n          if (!(mustBeUnique || this.usedAsFile[candidate])) {\n            break;\n          }\n          // OK, either we want it to be unique and it already exists; or it is\n          // currently a file (and we want it to be either a different file or a\n          // directory).  Try a new suffix.\n        }\n\n        suffix++; // first increment will do '' -> 1\n      }\n\n      partsOut.push(part + suffix + ext);\n    }\n\n    return partsOut.join(files.pathSep);\n  }\n\n  // Checks if a file with the same path and hash was written by\n  // the previous builder. If it was, it adds it to the cache and makes\n  // sure the parent directories exist and are part of the cache.\n  //\n  // Returns true if the file was already written\n  usePreviousWrite(relPath, hash, sanitize) {\n    relPath = this._normalizeFilePath(relPath, sanitize);\n\n    if (this.previousWrittenHashes[relPath] === hash) {\n      this._ensureDirectory(files.pathDirname(relPath));\n      this.writtenHashes[relPath] = hash;\n      this.usedAsFile[relPath] = true;\n      return true;\n    }\n\n    return false;\n  }\n\n  _normalizeFilePath(relPath, sanitize) {\n    // Ensure no trailing slash\n    if (relPath.slice(-1) === files.pathSep) {\n      relPath = relPath.slice(0, -1);\n    }\n\n    // In sanitize mode, ensure path does not contain segments like\n    // '..', does not contain forbidden characters, and is unique.\n    if (sanitize) {\n      relPath = this._sanitize(relPath);\n    }\n\n    return relPath;\n  }\n\n  // Write either a buffer or the contents of a file to `relPath` (a\n  // path to a file relative to the bundle root), creating it (and any\n  // enclosing directories) if it doesn't exist yet. Exactly one of\n  // `data` and or `file` must be passed.\n  //\n  // Options:\n  // - data: a Buffer to write to relPath. Overrides `file`.\n  // - file: a filename to write to relPath, as a string.\n  // - sanitize: if true, then all components of the path are stripped\n  //   of any potentially troubling characters, an exception is thrown\n  //   if any path segments consist entirely of dots (eg, '..'), and\n  //   if there is a file in the bundle with the same relPath, then\n  //   the path is changed by adding a numeric suffix.\n  // - hash: a sha1 string used to determine if the contents of the\n  //   new file written is not cached.\n  // - executable: if true, mark the file as executable.\n  // - symlink: if set to a string, create a symlink to its value\n  //\n  // Returns the final canonicalize relPath that was written to.\n  //\n  // If `file` is used then it will be added to the builder's WatchSet.\n  write(relPath, {data, file, hash, sanitize, executable, symlink}) {\n    relPath = this._normalizeFilePath(relPath, sanitize);\n\n    let getData = null;\n    if (data) {\n      if (! (data instanceof Buffer)) {\n        throw new Error(\"data must be a Buffer\");\n      }\n      if (file) {\n        throw new Error(\"May only pass one of data and file, not both\");\n      }\n      getData = () => data;\n    } else if (file) {\n      // postpone reading the file into memory\n      getData = () => readAndWatchFile(this.watchSet, files.pathResolve(file));\n    } else if (! symlink) {\n      throw new Error('Builder can not write without either data or a file path or a symlink path: ' + relPath);\n    }\n\n    this._ensureDirectory(files.pathDirname(relPath));\n    const absPath = files.pathJoin(this.buildPath, relPath);\n\n    if (symlink) {\n      symlinkWithOverwrite(symlink, absPath);\n    } else {\n      hash = hash || sha1(getData());\n\n      // Write is called multiple times for assets when they have multiple urls for the same file\n      if (this.previousWrittenHashes[relPath] !== hash && this.writtenHashes[relPath] !== hash) {\n\n        // Builder is used to create build products, which should be read-only;\n        // users shouldn't be manually editing automatically generated files and\n        // expecting the results to \"stick\".\n        const mode = executable ? 0o555 : 0o444\n\n        if (this.buildPath === this.outputPath || this.writtenHashes[relPath]) {\n          // atomicallyRewriteFile handles overwriting files that have already been created\n          atomicallyRewriteFile(absPath, getData(), {\n              mode\n          });\n        } else {\n          // Since builder is not updating in place, and\n          // this build is only used if every file is successfully written,\n          // it is not important to write atomically.\n          files.writeFile(absPath, getData(), {\n            mode\n          })\n      }\n      }\n\n      this.writtenHashes[relPath] = hash;\n    }\n    this.usedAsFile[relPath] = true;\n\n    return relPath;\n  }\n\n  copyTranspiledModules(relativePaths, {\n    sourceRootDir,\n    targetRootDir = this.outputPath,\n    needToTranspile = files.inCheckout(),\n  }) {\n    if (!needToTranspile) {\n      // If these files have already been transpiled, copy the transpiled files\n      // (both .js and .js.map) directly to the builder output directory, without\n      // recompiling them.\n      relativePaths.forEach(relPath => {\n        const jsPath = jsToTs(relPath);\n        [jsPath, jsPath + \".map\"].forEach(path => {\n          this.write(path, {\n            file: files.pathJoin(sourceRootDir, path),\n          });\n        });\n      });\n      return;\n    }\n\n    const babel = require(\"@meteorjs/babel\");\n    const commonBabelOptions = babel.getDefaultOptions({\n      nodeMajorVersion: parseInt(process.versions.node),\n      typescript: true\n    });\n    commonBabelOptions.sourceMaps = true;\n\n    const toolsDir = files.getCurrentToolsDir();\n    const babelCacheDirectory =\n      files.pathJoin(files.pathDirname(toolsDir), \".babel-cache\");\n\n    relativePaths.forEach(relPath => {\n      assert.ok(!files.pathIsAbsolute(relPath), relPath);\n      const fullPath = files.pathJoin(sourceRootDir, relPath);\n      let inputFileContents = files.readFile(fullPath, \"utf-8\");\n\n      // If certain behavior should be disabled in the transpiled code, the\n\n\n\n      var transpiled = babel.compile(inputFileContents, {\n        ...commonBabelOptions,\n        filename: relPath,\n        sourceFileName: \"/\" + relPath,\n      }, {\n        cacheDirectory: babelCacheDirectory,\n      });\n\n      // The published implementation of the meteor-tool package should\n      // contain only .js files, like any compiled TypeScript project.\n      // This design has the unfortunate consequence of forbidding\n      // explicit .ts file extensions in imported module identifier\n      // strings, but that's just how it goes with TypeScript.\n      let outputPath = jsToTs(relPath);\n\n      const sourceMapUrlComment =\n        \"//# sourceMappingURL=\" + files.pathBasename(outputPath + \".map\");\n\n      this.write(outputPath, {\n        data: Buffer.from(transpiled.code + \"\\n\" + sourceMapUrlComment, 'utf8')\n      });\n\n      // The babelOptions.sourceMapTarget option was deprecated in Babel\n      // 7.0.0-beta.41: https://github.com/babel/babel/pull/7500\n      const sourceMapTarget = outputPath + \".map\";\n      transpiled.map.file = sourceMapTarget;\n\n      this.write(sourceMapTarget, {\n        data: Buffer.from(JSON.stringify(transpiled.map), 'utf8')\n      });\n    });\n  }\n\n  // Serialize `data` as JSON and write it to `relPath` (a path to a\n  // file relative to the bundle root), creating parent directories as\n  // necessary. Throw an exception if the file already exists.\n  writeJson(relPath, data) {\n    // Ensure no trailing slash\n    if (relPath.slice(-1) === files.pathSep) {\n      relPath = relPath.slice(0, -1);\n    }\n\n    this._ensureDirectory(files.pathDirname(relPath));\n    const absPath = files.pathJoin(this.buildPath, relPath);\n\n    atomicallyRewriteFile(\n      absPath,\n      Buffer.from(JSON.stringify(data, null, 2), 'utf8'),\n      {mode: 0o444});\n\n    this.usedAsFile[relPath] = true;\n  }\n\n  // Add relPath to the list of \"already taken\" paths in the\n  // bundle. This will cause write, when in sanitize mode, to never\n  // pick this filename (and will prevent files that from being\n  // written that would conflict with paths that we are expecting to\n  // be directories). Calling this twice on the same relPath will\n  // given an exception.\n  //\n  // Returns the *current* (temporary!) path to where the file or directory\n  // lives. This is so you could use non-builder code to write into a reserved\n  // directory.\n  //\n  // options:\n  // - directory: set to true to reserve this relPath to be a\n  //   directory rather than a file.\n  reserve(relPath, {directory} = {}) {\n    // Ensure no trailing slash\n    if (relPath.slice(-1) === files.pathSep) {\n      relPath = relPath.slice(0, -1);\n    }\n\n    const parts = relPath.split(files.pathSep);\n    const partsSoFar = [];\n    for (let i = 0; i < parts.length; i ++) {\n      const part = parts[i];\n      partsSoFar.push(part);\n      const soFar = partsSoFar.join(files.pathSep);\n      if (this.usedAsFile[soFar]) {\n        throw new Error(\"Path reservation conflict: \" + relPath);\n      }\n\n      const shouldBeDirectory = (i < parts.length - 1) || directory;\n      if (shouldBeDirectory) {\n        if (! (soFar in this.usedAsFile)) {\n          let needToMkdir = true;\n          if (soFar in this.previousUsedAsFile) {\n            if (this.previousUsedAsFile[soFar]) {\n              files.unlink(soFar);\n            } else {\n              needToMkdir = false;\n            }\n          }\n          if (needToMkdir) {\n            files.mkdir_p(files.pathJoin(this.buildPath, soFar), 0o755);\n          }\n          this.usedAsFile[soFar] = false;\n        }\n      } else {\n        this.usedAsFile[soFar] = true;\n      }\n    }\n\n    // Return the path we reserved.\n    return files.pathJoin(this.buildPath, relPath);\n  }\n\n  // Generate and reserve a unique name for a file based on `relPath`,\n  // and return it. If `relPath` is available (there is no file with\n  // that name currently existing or reserved, it doesn't contain\n  // forbidden characters, a prefix of it is not already in use as a\n  // file rather than a directory) then the return value will be\n  // `relPath`. Otherwise relPath will be modified to get the return\n  // value, say by adding a numeric suffix to some path components\n  // (preserving the file extension however) and deleting forbidden\n  // characters. Throws an exception if relPath contains any segments\n  // that are all dots (eg, '..').\n  //\n  // options:\n  //\n  // - directory: generate (and reserve) a name for a directory,\n  //   rather than a file.\n  generateFilename(relPath, {directory} = {}) {\n    relPath = this._sanitize(relPath, directory);\n    this.reserve(relPath, { directory });\n    return relPath;\n  }\n\n  // Convenience wrapper around generateFilename and write.\n  //\n  // (Note that in the object returned by builder.enter, this method\n  // is patched through directly rather than rewriting its inputs and\n  // outputs. This is only valid because it does nothing with its inputs\n  // and outputs other than send pass them to other methods.)\n  writeToGeneratedFilename(relPath, writeOptions) {\n    const generated = this.generateFilename(relPath);\n    this.write(generated, writeOptions);\n    return generated;\n  }\n\n  // A version of copyDirectory that works better for copying node_modules\n  // directories when symlinks are involved.\n  copyNodeModulesDirectory(options) {\n    // Although the options.from directory should probably be a\n    // node_modules directory, the only essential precondition here is\n    // that the destination directory is a node_modules directory.\n    // assert.strictEqual(files.pathBasename(options.from), \"node_modules\");\n    assert.strictEqual(files.pathBasename(options.to), \"node_modules\");\n\n    if (options.symlink) {\n      // If we're going to use symlinks to speed up this copy, then we\n      // need to make sure we've reserved all directories that are not\n      // package directories, such as the node_modules directory itself,\n      // as well as node_modules/meteor and the parent directories of any\n      // scoped npm packages.\n      this._ensureAllNonPackageDirectories(\n        realpath(options.from),\n        options.to\n      );\n    }\n\n    // Call this._copyDirectory rather than this.copyDirectory so that the\n    // subBuilder hacks from Builder#enter won't apply a second time.\n    return this._copyDirectory(options);\n  }\n\n  _ensureAllNonPackageDirectories(absFromDir, relToDir) {\n    const dirStat = optimisticStatOrNull(absFromDir);\n    if (! (dirStat && dirStat.isDirectory())) {\n      return;\n    }\n\n    const absFromPackageJson =\n      files.pathJoin(absFromDir, \"package.json\");\n\n    const stat = optimisticStatOrNull(absFromPackageJson);\n    if (stat && stat.isFile()) {\n      // If the directory has a package.json file, it's a package\n      // directory, and we should not call this._ensureDirectory, so that\n      // the package directory can later be symlinked in copyDirectory.\n      return;\n    }\n\n    this._ensureDirectory(relToDir);\n\n    optimisticReaddir(absFromDir).forEach(item => {\n      this._ensureAllNonPackageDirectories(\n        files.pathJoin(absFromDir, item),\n        files.pathJoin(relToDir, item)\n      );\n    });\n  }\n\n  // Recursively copy a directory and all of its contents into the\n  // bundle. But if the symlink option was passed to the Builder\n  // constructor, then make a symlink instead, if possible.\n  //\n  // Unlike with files.cp_r, if a symlink is found, it is copied as a symlink.\n  //\n  // This does NOT add anything to the WatchSet.\n  //\n  // Options:\n  // - from: source path on local disk to copy from\n  // - to: relative path to a directory in the bundle that will\n  //   receive the files\n  // - ignore: array of regexps of filenames (that is, basenames) to\n  //   ignore (they may still be visible in the output bundle if\n  //   symlinks are being used).  Like with WatchSets, they match against\n  //   entries that end with a slash if it's a directory.\n  // - specificFiles: just copy these paths (specified as relative to 'to').\n  // - symlink: true if the directory should be symlinked instead of copying\n  copyDirectory(options) {\n    // TODO(benjamn) Remove this wrapper when Builder#enter is no longer\n    // implemented using ridiculous hacks.\n    return this._copyDirectory(options);\n  }\n\n  _copyDirectory({\n    from, to,\n    ignore,\n    specificFiles,\n    symlink,\n    npmDiscards,\n    // Optional predicate to filter files and directories.\n    filter,\n  }) {\n    if (to.slice(-1) === files.pathSep) {\n      to = to.slice(0, -1);\n    }\n\n    if (symlink) {\n      if (specificFiles) {\n        throw new Error(\"can't copy only specific paths with a single symlink\");\n      }\n\n      if (this.usedAsFile[to]) {\n        throw new Error(\"tried to copy a directory onto \" + to +\n                        \" but it is is already a file\");\n      }\n    }\n\n    ignore = ignore || [];\n    let specificPaths = null;\n    if (specificFiles) {\n      specificPaths = {};\n      specificFiles.forEach(f => {\n        while (f !== '.') {\n          specificPaths[files.pathJoin(to, f)] = true;\n          f = files.pathDirname(f);\n        }\n      });\n    }\n\n    const rootDir = realpath(from);\n\n    const walk = (absFrom, relTo) => {\n      if (symlink && ! (relTo in this.usedAsFile)) {\n        this._ensureDirectory(files.pathDirname(relTo));\n        const absTo = files.pathResolve(this.buildPath, relTo);\n        if (this.previousCreatedSymlinks[absFrom] !== relTo) {\n          symlinkWithOverwrite(absFrom, absTo);\n        }\n        this.usedAsFile[relTo] = false;\n        this.createdSymlinks[absFrom] = relTo;\n        return;\n      }\n\n      this._ensureDirectory(relTo);\n\n      optimisticReaddir(absFrom).forEach(item => {\n        let thisAbsFrom = files.pathResolve(absFrom, item);\n        const thisRelTo = files.pathJoin(relTo, item);\n\n        if (specificPaths && !(thisRelTo in specificPaths)) {\n          return;\n        }\n\n        // Returns files.realpath(thisAbsFrom), if it is external to\n        // rootDir, using caching because this function might be called\n        // more than once.\n        let cachedExternalPath;\n        const getExternalPath = () => {\n          if (typeof cachedExternalPath !== \"undefined\") {\n            return cachedExternalPath;\n          }\n\n          try {\n            var real = realpath(thisAbsFrom);\n          } catch (e) {\n            if (e.code !== \"ENOENT\" &&\n                e.code !== \"ELOOP\") {\n              throw e;\n            }\n            return cachedExternalPath = false;\n          }\n\n          const isExternal =\n            files.pathRelative(rootDir, real).startsWith(\"..\");\n\n          // Now cachedExternalPath is either a string or false.\n          return cachedExternalPath = isExternal && real;\n        };\n\n        let fileStatus = optimisticLStatOrNull(thisAbsFrom);\n\n        if (! symlink &&\n            fileStatus &&\n            fileStatus.isSymbolicLink()) {\n          // If copyDirectory is not allowed to create symbolic links to\n          // external files, and this file is a symbolic link that points\n          // to an external file, update fileStatus so that we copy this\n          // file as a normal file rather than as a symbolic link.\n          const externalPath = getExternalPath();\n          if (externalPath) {\n            // Update fileStatus to match the actual file rather than the\n            // symbolic link, thus forcing the file to be copied below.\n            fileStatus = optimisticLStatOrNull(externalPath);\n          }\n        }\n\n        if (! fileStatus) {\n          // If the file did not exist, skip it.\n          return;\n        }\n\n        let itemForMatch = item;\n        const isDirectory = fileStatus.isDirectory();\n        if (isDirectory) {\n          itemForMatch += '/';\n        }\n\n        // skip excluded files\n        if (ignore.some(pattern => itemForMatch.match(pattern))) {\n          return;\n        }\n\n        if (typeof filter === \"function\" &&\n            ! filter(thisAbsFrom, isDirectory)) {\n          return;\n        }\n\n        if (npmDiscards instanceof NpmDiscards &&\n            npmDiscards.shouldDiscard(thisAbsFrom, isDirectory)) {\n          return;\n        }\n\n        if (isDirectory) {\n          walk(thisAbsFrom, thisRelTo);\n          return;\n        }\n\n        if (fileStatus.isSymbolicLink()) {\n          // Symbolic links pointing to relative external paths are less\n          // portable than absolute links, so getExternalPath() is\n          // preferred if it returns a path.\n          const linkSource = getExternalPath() ||\n            files.readlink(thisAbsFrom);\n\n          const linkTarget =\n            files.pathResolve(this.buildPath, thisRelTo);\n\n          if (symlinkIfPossible(linkSource, linkTarget)) {\n            // A symlink counts as a file, as far as \"can you put\n            // something under it\" goes.\n            this.usedAsFile[thisRelTo] = true;\n            return;\n          }\n        }\n\n        // Fall back to copying the file, but make sure it's really a file\n        // first, just in case it was a symbolic link to a directory that\n        // could not be created above.\n        fileStatus = optimisticStatOrNull(thisAbsFrom);\n        if (fileStatus && fileStatus.isFile()) {\n          const hash = optimisticHashOrNull(thisAbsFrom);\n\n          if (this.previousWrittenHashes[thisRelTo] !== hash) {\n            const content = optimisticReadFile(thisAbsFrom);\n\n            files.writeFile(\n              files.pathResolve(this.buildPath, thisRelTo),\n              // The reason we call files.writeFile here instead of\n              // files.copyFile is so that we can read the file using\n              // optimisticReadFile instead of files.createReadStream.\n              content,\n              // Logic borrowed from files.copyFile: \"Create the file as\n              // readable and writable by everyone, and executable by everyone\n              // if the original file is executably by owner. (This mode will be\n              // modified by umask.) We don't copy the mode *directly* because\n              // this function is used by 'meteor create' which is copying from\n              // the read-only tools tree into a writable app.\"\n              { mode: (fileStatus.mode & 0o100) ? 0o777 : 0o666 },\n            );\n          }\n\n          this.writtenHashes[thisRelTo] = hash;\n          this.usedAsFile[thisRelTo] = true;\n        }\n      });\n    };\n\n    walk(rootDir, to);\n  }\n\n  // Returns a new Builder-compatible object that works just like a\n  // Builder, but interprets all paths relative to 'relPath', a path\n  // relative to the bundle root which should not start with a '/'.\n  //\n  // The sub-builder returned does not have all Builder methods (for\n  // example, complete() wouldn't make sense) and you should not rely\n  // on it being instanceof Builder.\n  //\n  // TODO(benjamn) This nonsense should be ripped out by any means\n  // necessary... whenever someone has the time.\n  enter(relPath) {\n    const subBuilder = {};\n    const relPathWithSep = relPath + files.pathSep;\n    const methods = [\n      \"write\",\n      \"writeJson\",\n      \"reserve\",\n      \"generateFilename\",\n      \"copyDirectory\",\n      \"copyNodeModulesDirectory\",\n      \"enter\",\n    ];\n\n    methods.forEach(method => {\n      subBuilder[method] = (...args) => {\n        if (method === \"copyDirectory\" ||\n            method === \"copyNodeModulesDirectory\") {\n          // The copy methods take their relative paths via options.to.\n          args[0].to = files.pathJoin(relPath, args[0].to);\n        } else {\n          // Other methods have relPath as the first argument.\n          args[0] = files.pathJoin(relPath, args[0]);\n        }\n\n        let ret = this[method](...args);\n\n        if (method === \"generateFilename\") {\n          // fix up the returned path to be relative to the\n          // sub-bundle, not the parent bundle\n          if (ret.substr(0, 1) === '/') {\n            ret = ret.substr(1);\n          }\n          if (ret.substr(0, relPathWithSep.length) !== relPathWithSep) {\n            throw new Error(\"generateFilename returned path outside of \" +\n                            \"sub-bundle?\");\n          }\n          ret = ret.substr(relPathWithSep.length);\n        }\n\n        return ret;\n      };\n    });\n\n    // Methods that don't have to fix up arguments or return values, because\n    // they are implemented purely in terms of other methods which do.\n    const passThroughMethods = [\n      \"writeToGeneratedFilename\",\n      \"copyTranspiledModules\",\n    ];\n    passThroughMethods.forEach(method => {\n      subBuilder[method] = this[method];\n    });\n\n    return subBuilder;\n  }\n\n  // Move the completed bundle into its final location (outputPath)\n  complete() {\n    if (this.previousUsedAsFile) {\n      // delete files and folders left-over from previous runs and not\n      // re-used in this run\n      const removed = {};\n      const paths = Object.keys(this.previousUsedAsFile);\n      paths.forEach((path) => {\n        // if the same path was re-used, leave it\n        if (this.usedAsFile.hasOwnProperty(path)) { return; }\n\n        // otherwise, remove it as it is no longer needed\n\n        // skip if already deleted\n        if (removed.hasOwnProperty(path)) { return; }\n\n        const absPath = files.pathJoin(this.buildPath, path);\n        if (this.previousUsedAsFile[path]) {\n          // file\n          files.unlink(absPath);\n          removed[path] = true;\n        } else {\n          // directory\n          files.rm_recursive(absPath);\n\n          // mark all sub-paths as removed, too\n          paths.forEach((anotherPath) => {\n            if (anotherPath.startsWith(path + '/')) {\n              removed[anotherPath] = true;\n            }\n          });\n        }\n      });\n    }\n\n    // XXX Alternatively, we could just keep buildPath around, and make\n    // outputPath be a symlink pointing to it. This doesn't work for the NPM use\n    // case of renameDirAlmostAtomically since that one is constructing files to\n    // be checked in to version control, but here we could get away with it.\n    if (this.buildPath !== this.outputPath) {\n      files.renameDirAlmostAtomically(this.buildPath, this.outputPath);\n    }\n  }\n\n  // Delete the partially-completed bundle. Do not disturb outputPath.\n  abort() {\n    files.rm_recursive(this.buildPath);\n  }\n\n  // Returns a WatchSet representing all files that were read from disk by the\n  // builder.\n  getWatchSet() {\n    return this.watchSet;\n  }\n}\n\nfunction jsToTs(path) {\n  if (path.endsWith(\".ts\")) {\n    const parts = path.split(\".\");\n    assert.strictEqual(parts.pop(), \"ts\");\n    parts.push(\"js\");\n    path = parts.join(\".\");\n  }\n  return path;\n}\n\nfunction atomicallyRewriteFile(path, data, options) {\n  // create a different file with a random name and then rename over atomically\n  const rname = '.builder-tmp-file.' + Math.floor(Math.random() * 999999);\n  const rpath = files.pathJoin(files.pathDirname(path), rname);\n  files.writeFile(rpath, data, options);\n  try {\n    files.rename(rpath, path);\n  } catch (e) {\n    if (e.code === 'EISDIR') {\n      // replacing a directory with a file; this is rare (so it can\n      // be a slow path) but can legitimately happen if e.g. a developer\n      // puts a file where there used to be a directory in their app.\n      files.rm_recursive(path);\n      files.rename(rpath, path);\n    } else {\n      throw e;\n    }\n  }\n}\n\nfunction symlinkIfPossible(source, target) {\n  try {\n    symlinkWithOverwrite(source, target);\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\n// Wrap slow methods into Profiler calls\nconst slowBuilderMethods = [\n  \"_ensureDirectory\",\n  \"write\",\n  \"enter\",\n  \"copyDirectory\",\n  \"copyNodeModulesDirectory\",\n  \"enter\",\n  \"complete\",\n];\n\nslowBuilderMethods.forEach(method => {\n  Builder.prototype[method] =\n    Profile(`Builder#${method}`, Builder.prototype[method]);\n});\n"],"file":"tools/isobuild/builder.js.map"}