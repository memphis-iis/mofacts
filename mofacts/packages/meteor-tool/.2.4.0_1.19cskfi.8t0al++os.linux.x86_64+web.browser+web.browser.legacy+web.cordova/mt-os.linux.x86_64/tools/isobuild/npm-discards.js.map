{"version":3,"sources":["tools/isobuild/npm-discards.ts"],"names":[],"mappings":"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","sourcesContent":["import * as files from \"../fs/files\";\n\nconst hasOwn = Object.prototype.hasOwnProperty;\n\n// This class encapsulates a structured specification of files and\n// directories that should be stripped from the node_modules directories\n// of Meteor packages during `meteor build`, as requested by calling\n// `Npm.discard` in package.js files.\nclass NpmDiscards {\n  private discards: Discards;\n\n  constructor() {\n    this.discards = {};\n  }\n\n  // Update the current specification of discarded files with additional\n  // patterns that should be discarded.\n  merge(discards: DiscardsInput): void {\n    merge(this.discards, discards);\n  }\n\n  shouldDiscard(candidatePath: string, isDirectory?: boolean): boolean {\n    if (isDirectory === void 0) {\n      isDirectory = files.lstat(candidatePath)?.isDirectory();\n    }\n\n    for (let currentPath = candidatePath, parentPath;\n         (parentPath = files.pathDirname(currentPath)) !== currentPath;\n         currentPath = parentPath) {\n      if (files.pathBasename(parentPath) === \"node_modules\") {\n        const packageName = files.pathBasename(currentPath);\n\n        if (hasOwn.call(this.discards, packageName)) {\n          let relPath = files.pathRelative(currentPath, candidatePath);\n\n          if (isDirectory) {\n            relPath = files.pathJoin(relPath, files.pathSep);\n          }\n\n          return this.discards[packageName].some(pattern =>\n            matches(pattern, relPath)\n          );\n        }\n\n        // Stop at the first ancestor node_modules directory we find.\n        break;\n      }\n    }\n\n    return false;\n  }\n}\n\nfunction merge(into: Discards, from: DiscardsInput): void {\n  Object.keys(from).forEach((packageName: string) => {\n    const fromValue = from[packageName];\n    const intoValue = hasOwn.call(into, packageName) && into[packageName];\n\n    if (typeof fromValue === \"string\" || fromValue instanceof RegExp) {\n      if (intoValue) {\n        intoValue.push(fromValue);\n      } else {\n        into[packageName] = [fromValue];\n      }\n\n    } else if (Array.isArray(fromValue)) {\n      if (intoValue) {\n        intoValue.push.apply(intoValue, fromValue);\n      } else {\n        // Make a defensive copy of any arrays passed to `Npm.strip`.\n        into[packageName] = Array.from(fromValue);\n      }\n    }\n  });\n}\n\n// TODO Improve this. For example we don't currently support wildcard\n// string patterns (just use a RegExp if you need that flexibility).\nfunction matches(pattern: DiscardPattern, relPath: string): boolean {\n  if (pattern instanceof RegExp) {\n    return pattern.test(relPath);\n  }\n\n  if (pattern.charAt(0) === files.pathSep) {\n    return relPath.indexOf(pattern.slice(1)) === 0;\n  }\n\n  return relPath.includes(pattern);\n}\n\nexport default NpmDiscards;\n"],"sourceRoot":"","file":"tools/isobuild/npm-discards.js.map"}