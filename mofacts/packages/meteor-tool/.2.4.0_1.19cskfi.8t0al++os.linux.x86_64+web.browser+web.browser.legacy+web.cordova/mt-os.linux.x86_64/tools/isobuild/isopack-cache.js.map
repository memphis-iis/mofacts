{"version":3,"sources":["/tools/isobuild/isopack-cache.js"],"names":["module","export","IsopackCache","requestGarbageCollection","link","v","_","require","buildmessage","compiler","files","isopackModule","watch","colonConverter","Profile","archinfo","constructor","options","self","cacheDir","_pluginCacheDirRoot","pluginCacheDirRoot","_includeCordovaUnibuild","includeCordovaUnibuild","_packageMap","packageMap","_tropohouse","tropohouse","_previousIsopackCache","previousIsopackCache","Error","_isopacks","Object","create","_lintLocalPackages","lintLocalPackages","_lintPackageWithSourceRoot","lintPackageWithSourceRoot","allLoadedLocalPackagesWatchSet","WatchSet","buildLocalPackages","rootPackageNames","assertInCapture","mkdir_p","onStack","each","name","_ensurePackageLoaded","eachPackage","packageInfo","wipeCachedPackages","packages","packageName","rm_recursive","_isopackDir","_pluginCacheDirForPackage","getIsopack","has","eachBuiltIsopack","iterator","isopack","getSourceRoot","arch","getInfo","kind","packageSource","sourceRoot","isopackPath","packagePath","version","pathJoin","uses","unibuild","getUnibuildAtArch","some","use","implies","package","imp","ensureLoaded","depName","error","previousIsopack","previousInfo","packageNames","getPackagesToLoadFirst","enterJob","jobHasMessages","time","_loadLocalPackage","packagesToLoad","getStrongOrderedUsedAndImpliedPackages","pluginCacheDir","_pluginCacheDirForVersion","Isopack","initFromPath","packageToLoad","_checkUpToDatePreloaded","_pluginCacheDirForLocal","isopackBuildInfoJson","readJSONOrNull","_isopackBuildInfoPath","upToDate","_checkUpToDate","setPluginProviderPackageMap","makeSubsetMap","keys","pluginProviderPackageMap","_lintLocalPackage","compile","isopackCache","includePluginProviderPackageMap","saveToPath","includeIsopackBuildInfo","merge","getMergedWatchSet","assertInJob","_shouldLintPackage","warnings","linted","lint","lintingMessages","builtBy","BUILT_BY","isSupersetOfJSON","watchSet","fromJSON","pluginDependencies","unibuildDependencies","deps","isUpToDate","hasCordovaUnibuild","toJSON","convert","forgetPreviousIsopackCache","getLintingMessagesForLocalPackages","messages","_MessageSet","anyLinters","isopackMessages","ICp","prototype","forEach","method"],"mappings":"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","sourcesContent":["var _ = require('underscore');\n\nvar buildmessage = require('../utils/buildmessage.js');\nvar compiler = require('./compiler.js');\nvar files = require('../fs/files');\nvar isopackModule = require('./isopack.js');\nvar watch = require('../fs/watch');\nvar colonConverter = require('../utils/colon-converter.js');\nvar Profile = require('../tool-env/profile').Profile;\nvar archinfo = require('../utils/archinfo');\nimport { requestGarbageCollection } from \"../utils/gc.js\";\n\nexport class IsopackCache {\n  constructor(options) {\n    var self = this;\n    options = options || {};\n\n    // cacheDir may be null; in this case, we just don't ever save things to disk.\n    self.cacheDir = options.cacheDir;\n\n    // Root directory for caches used by build plugins.  Can be null, in which\n    // case we never give the build plugins a cache.  The directory structure is:\n    // <pluginCacheDirRoot>/<escapedPackageName>/<version>, where <version> is\n    // either the package's version if it's a versioned package, or \"local\" if\n    // it's a local package.  In the latter case, we make sure to empty it any\n    // time we rebuild the package.\n    self._pluginCacheDirRoot = options.pluginCacheDirRoot;\n\n    // This is a bit of a hack, but basically: we really don't want to spend time\n    // building web.cordova unibuilds in a project that doesn't have any Cordova\n    // platforms. (Note that we need to be careful with 'meteor publish' to still\n    // publish a web.cordova unibuild!)\n    self._includeCordovaUnibuild = !! options.includeCordovaUnibuild;\n\n    // Defines the versions of packages that we build. Must be set.\n    self._packageMap = options.packageMap;\n\n    // tropohouse may be null; in this case, we can't load versioned packages.\n    // eg, for building isopackets.\n    self._tropohouse = options.tropohouse;\n\n    // If provided, this is another IsopackCache for the same cache dir; when\n    // loading Isopacks, if they are definitely unchanged we can load the\n    // in-memory objects from this cache instead of recompiling.\n    self._previousIsopackCache = options.previousIsopackCache;\n    if (self._previousIsopackCache &&\n        self._previousIsopackCache.cacheDir !== self.cacheDir) {\n      throw Error(\"previousIsopackCache has different cacheDir!\");\n    }\n\n    // Map from package name to Isopack.\n    self._isopacks = Object.create(null);\n\n    self._lintLocalPackages = !! options.lintLocalPackages;\n    self._lintPackageWithSourceRoot = options.lintPackageWithSourceRoot;\n\n    self.allLoadedLocalPackagesWatchSet = new watch.WatchSet;\n  }\n\n  buildLocalPackages(rootPackageNames) {\n    var self = this;\n    buildmessage.assertInCapture();\n\n    if (self.cacheDir) {\n      files.mkdir_p(self.cacheDir);\n    }\n\n    var onStack = {};\n    if (rootPackageNames) {\n      _.each(rootPackageNames, function (name) {\n        self._ensurePackageLoaded(name, onStack);\n      });\n    } else {\n      self._packageMap.eachPackage(function (name, packageInfo) {\n        self._ensurePackageLoaded(name, onStack);\n        requestGarbageCollection();\n      });\n    }\n  }\n\n  wipeCachedPackages(packages) {\n    var self = this;\n    if (packages) {\n      // Wipe specific packages.\n      _.each(packages, function (packageName) {\n        if (self.cacheDir) {\n          files.rm_recursive(self._isopackDir(packageName));\n        }\n        if (self._pluginCacheDirRoot) {\n          files.rm_recursive(self._pluginCacheDirForPackage(packageName));\n        }\n      });\n    } else {\n      // Wipe all packages.\n      if (self.cacheDir) {\n        files.rm_recursive(self.cacheDir);\n      }\n      if (self._pluginCacheDirRoot) {\n        files.rm_recursive(self._pluginCacheDirRoot);\n      }\n    }\n  }\n\n  // Returns the isopack (already loaded in memory) for a given name. It is an\n  // error to call this if it's not already loaded! So it should only be called\n  // after buildLocalPackages has returned, or in the process of building a\n  // package whose dependencies have all already been built.\n  getIsopack(name) {\n    var self = this;\n    if (! _.has(self._isopacks, name)) {\n      throw Error(\"isopack \" + name + \" not yet loaded?\");\n    }\n    return self._isopacks[name];\n  }\n\n  eachBuiltIsopack(iterator) {\n    var self = this;\n    _.each(self._isopacks, function (isopack, packageName) {\n      iterator(packageName, isopack);\n    });\n  }\n\n  getSourceRoot(name, arch) {\n    const packageInfo = this._packageMap.getInfo(name);\n\n    if (packageInfo) {\n      if (packageInfo.kind === \"local\") {\n        return packageInfo.packageSource.sourceRoot;\n      }\n\n      if (packageInfo.kind === \"versioned\") {\n        const isopackPath = this._tropohouse.packagePath(\n          name,\n          packageInfo.version\n        );\n\n        return files.pathJoin(isopackPath, arch);\n      }\n    }\n\n    return null;\n  }\n\n  uses(isopack, name, arch) {\n    if (! isopack) {\n      return false;\n    }\n\n    if (isopack.name === name) {\n      // Packages use themselves.\n      return true;\n    }\n\n    const unibuild = isopack.getUnibuildAtArch(arch);\n    if (! unibuild) {\n      return false;\n    }\n\n    return _.some(unibuild.uses, use => {\n      return this.implies(\n        this._isopacks[use.package],\n        name,\n        arch,\n      );\n    });\n  }\n\n  implies(isopack, name, arch) {\n    if (! isopack) {\n      return false;\n    }\n\n    if (isopack.name === name) {\n      // Packages imply themselves.\n      return true;\n    }\n\n    const unibuild = isopack.getUnibuildAtArch(arch);\n    if (! unibuild) {\n      return false;\n    }\n\n    return _.some(unibuild.implies, imp => {\n      return this.implies(\n        this._isopacks[imp.package],\n        name,\n        arch,\n      );\n    });\n  }\n\n  _ensurePackageLoaded(name, onStack) {\n    var self = this;\n    buildmessage.assertInCapture();\n    if (_.has(self._isopacks, name)) {\n      return;\n    }\n\n    var ensureLoaded = function (depName) {\n      if (_.has(onStack, depName)) {\n        buildmessage.error(\"circular dependency between packages \" +\n                           name + \" and \" + depName);\n        // recover by not enforcing one of the dependencies\n        return;\n      }\n      onStack[depName] = true;\n      self._ensurePackageLoaded(depName, onStack);\n      delete onStack[depName];\n    };\n\n    var packageInfo = self._packageMap.getInfo(name);\n    if (! packageInfo) {\n      throw Error(\"Depend on unknown package \" + name + \"?\");\n    }\n    var previousIsopack = null;\n    if (self._previousIsopackCache &&\n        _.has(self._previousIsopackCache._isopacks, name)) {\n      var previousInfo = self._previousIsopackCache._packageMap.getInfo(name);\n      if ((packageInfo.kind === 'versioned' &&\n           previousInfo.kind === 'versioned' &&\n           packageInfo.version === previousInfo.version) ||\n          (packageInfo.kind === 'local' &&\n           previousInfo.kind === 'local' &&\n           (packageInfo.packageSource.sourceRoot ===\n            previousInfo.packageSource.sourceRoot))) {\n        previousIsopack = self._previousIsopackCache._isopacks[name];\n      }\n    }\n\n    if (packageInfo.kind === 'local') {\n      var packageNames =\n            packageInfo.packageSource.getPackagesToLoadFirst(self._packageMap);\n      buildmessage.enterJob(\"preparing to build package \" + name, function () {\n        _.each(packageNames, function (depName) {\n          ensureLoaded(depName);\n        });\n        // If we failed to load something that this package depends on, don't\n        // load it.\n        if (buildmessage.jobHasMessages()) {\n          return;\n        }\n        Profile.time('IsopackCache Build local isopack', () => {\n          self._loadLocalPackage(name, packageInfo, previousIsopack);\n        });\n      });\n    } else if (packageInfo.kind === 'versioned') {\n      // We don't have to build this package, and we don't have to build its\n      // dependencies either! Just load it from disk.\n\n      if (!self._tropohouse) {\n        throw Error(\"Can't load versioned packages without a tropohouse!\");\n      }\n\n      var isopack = null, packagesToLoad = [];\n\n      Profile.time('IsopackCache Load local isopack', () => {\n        if (previousIsopack) {\n          // We can always reuse a previous Isopack for a versioned package, since\n          // we assume that it never changes.  (Admittedly, this means we won't\n          // notice if we download an additional build for the package.)\n          isopack = previousIsopack;\n          packagesToLoad = isopack.getStrongOrderedUsedAndImpliedPackages();\n        }\n        if (! isopack) {\n          // Load the isopack from disk.\n          buildmessage.enterJob(\n            \"loading package \" + name + \"@\" + packageInfo.version,\n            function () {\n              var pluginCacheDir;\n              if (self._pluginCacheDirRoot) {\n                pluginCacheDir = self._pluginCacheDirForVersion(\n                  name, packageInfo.version);\n                files.mkdir_p(pluginCacheDir);\n              }\n              var isopackPath = self._tropohouse.packagePath(\n                name, packageInfo.version);\n\n              var Isopack = isopackModule.Isopack;\n              isopack = new Isopack();\n              isopack.initFromPath(name, isopackPath, {\n                pluginCacheDir: pluginCacheDir\n              });\n              // If loading the isopack fails, then we don't need to look for more\n              // packages to load, but we should still recover by putting it in\n              // self._isopacks.\n              if (buildmessage.jobHasMessages()) {\n                return;\n              }\n              packagesToLoad = isopack.getStrongOrderedUsedAndImpliedPackages();\n            });\n        }\n      });\n\n      self._isopacks[name] = isopack;\n      // Also load its dependencies. This is so that if this package is being\n      // built as part of a plugin, all the transitive dependencies of the\n      // plugin are loaded.\n      _.each(packagesToLoad, function (packageToLoad) {\n        ensureLoaded(packageToLoad);\n      });\n    } else {\n      throw Error(\"unknown packageInfo kind?\");\n    }\n  }\n\n  _loadLocalPackage(name, packageInfo, previousIsopack) {\n    var self = this;\n    buildmessage.assertInCapture();\n    buildmessage.enterJob(\"building package \" + name, function () {\n      var isopack;\n      if (previousIsopack && self._checkUpToDatePreloaded(previousIsopack)) {\n        isopack = previousIsopack;\n        // We don't need to call self._lintLocalPackage here, because\n        // lintingMessages is saved on the isopack.\n      } else {\n        var pluginCacheDir;\n        if (self._pluginCacheDirRoot) {\n          pluginCacheDir = self._pluginCacheDirForLocal(name);\n        }\n\n        // Do we have an up-to-date package on disk?\n        var isopackBuildInfoJson = self.cacheDir && files.readJSONOrNull(\n          self._isopackBuildInfoPath(name));\n        var upToDate = self._checkUpToDate(isopackBuildInfoJson);\n\n        if (upToDate) {\n          // Reuse existing plugin cache dir\n          pluginCacheDir && files.mkdir_p(pluginCacheDir);\n\n          isopack = new isopackModule.Isopack();\n          isopack.initFromPath(name, self._isopackDir(name), {\n            isopackBuildInfoJson: isopackBuildInfoJson,\n            pluginCacheDir: pluginCacheDir\n          });\n          // _checkUpToDate already verified that\n          // isopackBuildInfoJson.pluginProviderPackageMap is a subset of\n          // self._packageMap, so this operation is correct. (It can't be done\n          // by isopack.initFromPath, because Isopack doesn't have access to\n          // the PackageMap, and specifically to the local catalog it knows\n          // about.)\n          isopack.setPluginProviderPackageMap(\n            self._packageMap.makeSubsetMap(\n              Object.keys(isopackBuildInfoJson.pluginProviderPackageMap)));\n          // Because we don't save linter messages to disk, we have to relint\n          // this package.\n          // XXX save linter messages to disk?\n          self._lintLocalPackage(packageInfo.packageSource, isopack);\n        } else {\n          // Nope! Compile it again. Give it a fresh plugin cache.\n          if (pluginCacheDir) {\n            files.rm_recursive(pluginCacheDir);\n            files.mkdir_p(pluginCacheDir);\n          }\n          isopack = compiler.compile(packageInfo.packageSource, {\n            packageMap: self._packageMap,\n            isopackCache: self,\n            includeCordovaUnibuild: self._includeCordovaUnibuild,\n            includePluginProviderPackageMap: true,\n            pluginCacheDir: pluginCacheDir\n          });\n          // Accept the compiler's result, even if there were errors (since it\n          // at least will have a useful WatchSet and will allow us to keep\n          // going and compile other packages that depend on this one). However,\n          // only lint it and save it to disk if there were no errors.\n          if (! buildmessage.jobHasMessages()) {\n            // Lint the package. We do this before saving so that the linter can\n            // augment the saved-to-disk WatchSet with linter-specific files.\n            self._lintLocalPackage(packageInfo.packageSource, isopack);\n            if (self.cacheDir) {\n              // Save to disk, for next time!\n              isopack.saveToPath(self._isopackDir(name), {\n                includeIsopackBuildInfo: true,\n                isopackCache: self,\n              });\n            }\n          }\n\n          requestGarbageCollection();\n        }\n      }\n\n      self.allLoadedLocalPackagesWatchSet.merge(isopack.getMergedWatchSet());\n      self._isopacks[name] = isopack;\n    });\n  }\n\n  // Runs appropriate linters on a package. It also augments their unibuilds'\n  // WatchSets with files used by the linter.\n  _lintLocalPackage(packageSource, isopack) {\n    buildmessage.assertInJob();\n    if (!this._shouldLintPackage(packageSource)) {\n      return;\n    }\n    const {warnings, linted} = compiler.lint(packageSource, {\n      isopackCache: this,\n      isopack: isopack,\n      includeCordovaUnibuild: this._includeCordovaUnibuild\n    });\n    // Empty lintingMessages means we ran linters and everything was OK.\n    // lintingMessages left null means there were no linters to run.\n    if (linted) {\n      isopack.lintingMessages = warnings;\n    }\n  }\n\n  _checkUpToDate(isopackBuildInfoJson) {\n    var self = this;\n    // If there isn't an isopack-buildinfo.json file, then we definitely aren't\n    // up to date!\n    if (! isopackBuildInfoJson) {\n      return false;\n    }\n\n    // If we include Cordova but this Isopack doesn't, or via versa, then we're\n    // not up to date.\n    if (self._includeCordovaUnibuild !==\n        isopackBuildInfoJson.includeCordovaUnibuild) {\n      return false;\n    }\n\n    // Was the package built by a different compiler version?\n    if (isopackBuildInfoJson.builtBy !== compiler.BUILT_BY) {\n      return false;\n    }\n\n    // If any of the direct dependencies changed their version or location, we\n    // aren't up to date.\n    if (!self._packageMap.isSupersetOfJSON(\n      isopackBuildInfoJson.pluginProviderPackageMap)) {\n      return false;\n    }\n    // Merge in the watchsets for all unibuilds and plugins in the package, then\n    // check it once.\n    var watchSet = watch.WatchSet.fromJSON(\n      isopackBuildInfoJson.pluginDependencies);\n\n    _.each(isopackBuildInfoJson.unibuildDependencies, function (deps) {\n      watchSet.merge(watch.WatchSet.fromJSON(deps));\n    });\n    return watch.isUpToDate(watchSet);\n  }\n\n  _checkUpToDatePreloaded(previousIsopack) {\n    var self = this;\n\n    // If we include Cordova but this Isopack doesn't, or via versa, then we're\n    // not up to date.\n    if (self._includeCordovaUnibuild !== previousIsopack.hasCordovaUnibuild()) {\n      return false;\n    }\n\n    // We don't have to check builtBy because we don't change BUILT_BY without\n    // restarting the process.\n\n    // If any of the direct dependencies changed their version or location, we\n    // aren't up to date.\n    if (!self._packageMap.isSupersetOfJSON(\n      previousIsopack.pluginProviderPackageMap.toJSON())) {\n      return false;\n    }\n    // Merge in the watchsets for all unibuilds and plugins in the package, then\n    // check it once.\n    var watchSet = previousIsopack.getMergedWatchSet();\n    return watch.isUpToDate(watchSet);\n  }\n\n  _isopackDir(packageName) {\n    var self = this;\n    return files.pathJoin(self.cacheDir, colonConverter.convert(packageName));\n  }\n\n  _pluginCacheDirForPackage(packageName) {\n    var self = this;\n    return files.pathJoin(self._pluginCacheDirRoot,\n                          colonConverter.convert(packageName));\n  }\n\n  _pluginCacheDirForVersion(packageName, version) {\n    var self = this;\n    return files.pathJoin(\n      self._pluginCacheDirForPackage(packageName), version);\n  }\n\n  _pluginCacheDirForLocal(packageName) {\n    var self = this;\n    // assumes that `local` is not a valid package version.\n    return files.pathJoin(\n      self._pluginCacheDirForPackage(packageName), 'local');\n  }\n\n  _isopackBuildInfoPath(packageName) {\n    var self = this;\n    return files.pathJoin(\n      self._isopackDir(packageName), 'isopack-buildinfo.json');\n  }\n\n  forgetPreviousIsopackCache() {\n    var self = this;\n    self._previousIsopackCache = null;\n  }\n\n  _shouldLintPackage(packageSource) {\n    if (this._lintLocalPackages) {\n      return true;\n    }\n    if (! this._lintPackageWithSourceRoot) {\n      return false;\n    }\n    return this._lintPackageWithSourceRoot === packageSource.sourceRoot;\n  }\n\n  getLintingMessagesForLocalPackages() {\n    const messages = new buildmessage._MessageSet();\n    let anyLinters = false;\n\n    this._packageMap.eachPackage((name, packageInfo) => {\n      const isopack = this._isopacks[name];\n      if (packageInfo.kind === 'local') {\n        if (!this._shouldLintPackage(packageInfo.packageSource)) {\n          return;\n        }\n        const isopackMessages = isopack.lintingMessages;\n        if (isopackMessages) {\n          anyLinters = true;\n          messages.merge(isopackMessages);\n        }\n      }\n    });\n\n    // return null if no linters were ever run\n    if (! anyLinters) { return null; }\n\n    return messages;\n  }\n}\n\nconst ICp = IsopackCache.prototype;\n[ // Include any methods here that need profiling and take a package name\n  // string as their first argument.\n  \"_ensurePackageLoaded\",\n].forEach(method => {\n  ICp[method] = Profile(\n    packageName => method + \"(\" + packageName + \")\",\n    ICp[method],\n  );\n});\n"],"file":"tools/isobuild/isopack-cache.js.map"}