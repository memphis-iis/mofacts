{"version":3,"sources":["/tools/isobuild/source-arch.js"],"names":["module","export","default","SourceArch","isString","isFunction","link","v","WatchSet","reportMissingOption","name","Error","constructor","pkg","kind","arch","sourceRoot","getFiles","uses","implies","declaredExports","watchSet","localNodeModulesDirs","Object","create"],"mappings":"AAAAA,MAAM,CAACC,MAAP,CAAc;AAACC,EAAAA,OAAO,EAAC,MAAIC;AAAb,CAAd;AAAwC,IAAIC,QAAJ,EAAaC,UAAb;AAAwBL,MAAM,CAACM,IAAP,CAAY,YAAZ,EAAyB;AAACF,EAAAA,QAAQ,CAACG,CAAD,EAAG;AAACH,IAAAA,QAAQ,GAACG,CAAT;AAAW,GAAxB;;AAAyBF,EAAAA,UAAU,CAACE,CAAD,EAAG;AAACF,IAAAA,UAAU,GAACE,CAAX;AAAa;;AAApD,CAAzB,EAA+E,CAA/E;AAAkF,IAAIC,QAAJ;AAAaR,MAAM,CAACM,IAAP,CAAY,aAAZ,EAA0B;AAACE,EAAAA,QAAQ,CAACD,CAAD,EAAG;AAACC,IAAAA,QAAQ,GAACD,CAAT;AAAW;;AAAxB,CAA1B,EAAoD,CAApD;;AAG/J,SAASE,mBAAT,CAA6BC,IAA7B,EAAmC;AACjC,QAAM,IAAIC,KAAJ,gCAAkCD,IAAlC,+BAAN;AACD;AAED;AACA;AACA;AACA;AACA;;;AACe,MAAMP,UAAN,CAAiB;AAC9BS,EAAAA,WAAW,CAACC,GAAD,QAWR;AAAA,QAXc;AACfC,MAAAA,IADe;AACT;AACNC,MAAAA,IAFe;AAET;AACNC,MAAAA,UAHe;AAGH;AACZC,MAAAA,QAJe;AAIL;AACVC,MAAAA,IAAI,GAAG,EALQ;AAMfC,MAAAA,OAAO,GAAG,EANK;AAOfC,MAAAA,eAAe,GAAG,IAPH;AAQf;AACA;AACAC,MAAAA,QAAQ,GAAG,IAAIb,QAAJ;AAVI,KAWd;AACDJ,IAAAA,QAAQ,CAACU,IAAD,CAAR,IAAkBL,mBAAmB,CAAC,MAAD,CAArC;AACAL,IAAAA,QAAQ,CAACW,IAAD,CAAR,IAAkBN,mBAAmB,CAAC,MAAD,CAArC;AACAL,IAAAA,QAAQ,CAACY,UAAD,CAAR,IAAwBP,mBAAmB,CAAC,YAAD,CAA3C;AACAJ,IAAAA,UAAU,CAACY,QAAD,CAAV,IAAwBR,mBAAmB,CAAC,UAAD,CAA3C;AAEA,SAAKI,GAAL,GAAWA,GAAX,CANC,CAQD;AACA;;AACA,SAAKC,IAAL,GAAYA,IAAZ,CAVC,CAYD;AACA;;AACA,SAAKC,IAAL,GAAYA,IAAZ,CAdC,CAgBD;;AACA,SAAKC,UAAL,GAAkBA,UAAlB,CAjBC,CAmBD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAAKE,IAAL,GAAYA,IAAZ,CA9CC,CAgDD;AACA;AACA;AACA;AACA;;AACA,SAAKC,OAAL,GAAeA,OAAf,CArDC,CAuDD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAAKF,QAAL,GAAgBA,QAAhB,CArEC,CAuED;AACA;AACA;AACA;AACA;;AACA,SAAKK,oBAAL,GAA4BC,MAAM,CAACC,MAAP,CAAc,IAAd,CAA5B,CA5EC,CA8ED;AACA;;AACA,SAAKJ,eAAL,GAAuBA,eAAvB,CAhFC,CAkFD;AACA;AACA;AACA;AACA;;AACA,SAAKC,QAAL,GAAgBA,QAAhB;AACD;;AApG6B","sourcesContent":["import {isString, isFunction} from 'underscore';\nimport {WatchSet} from '../fs/watch';\n\nfunction reportMissingOption(name) {\n  throw new Error(`must provide options.${name} when creating SourceArch`);\n}\n\n/**\n * SourceArch\n *\n * Used in ./package-source.js.\n */\nexport default class SourceArch {\n  constructor(pkg, {\n    kind, // required\n    arch, // required\n    sourceRoot, // required\n    getFiles, // required\n    uses = [],\n    implies = [],\n    declaredExports = null,\n    // Do not include the source files in watchSet. They will be added at\n    // compile time when the sources are actually read.\n    watchSet = new WatchSet(),\n  }) {\n    isString(kind) || reportMissingOption('kind');\n    isString(arch) || reportMissingOption('arch');\n    isString(sourceRoot) || reportMissingOption('sourceRoot');\n    isFunction(getFiles) || reportMissingOption('getFiles');\n\n    this.pkg = pkg;\n\n    // Kind of this sourceArchitecture. At the moment, there are really\n    // three options -- package, plugin, and app. We use these in linking.\n    this.kind = kind;\n\n    // The architecture (fully or partially qualified) that can use this\n    // unibuild.\n    this.arch = arch;\n\n    // Absolute path of the root directory of this package or application.\n    this.sourceRoot = sourceRoot;\n\n    // Packages used. The ordering is significant only for determining\n    // import symbol priority (it doesn't affect load order), and a given\n    // package could appear more than once in the list, so code that\n    // consumes this value will need to guard appropriately. Each element\n    // in the array has keys:\n    // - package: the package name\n    // - constraint: the constraint on the version of the package to use,\n    //   as a string (may be null)\n    // - unordered: If true, we don't want the package's imports and we\n    //   don't want to force the package to load before us. We just want\n    //   to ensure that it loads if we load.\n    // - weak: If true, we don't *need* to load the other package, but\n    //   if the other package ends up loaded in the target, it must\n    //   be forced to load before us. We will not get its imports\n    //   or plugins.\n    // It is an error for both unordered and weak to be true, because such\n    // a dependency would have no effect.\n    //\n    // In most places, instead of using 'uses' directly, you want to use\n    // something like compiler.eachUsedUnibuild so you also take into\n    // account implied packages.\n    //\n    // Note that if `package` starts with 'isobuild:', it actually\n    // represents a dependency on a feature of the Isobuild build tool,\n    // not a real package. You need to be aware of this when processing a\n    // `uses` array, which is another reason to use eachUsedUnibuild\n    // instead.\n    this.uses = uses;\n\n    // Packages which are \"implied\" by using this package. If a unibuild X\n    // uses this unibuild Y, and Y implies Z, then X will effectively use\n    // Z as well (and get its imports and plugins).  An array of objects\n    // of the same type as the elements of this.uses (although for now\n    // unordered and weak are not allowed).\n    this.implies = implies;\n\n    // A function that returns the source files for this\n    // architecture. Object with keys `sources` and `assets`, where each\n    // is an array of objects with keys \"relPath\" and \"fileOptions\". Null\n    // if loaded from isopack.\n    //\n    // fileOptions is optional and represents arbitrary options passed to\n    // \"api.addFiles\"; they are made available on to the plugin as\n    // compileStep.fileOptions.\n    //\n    // This is a function rather than a literal array because for an app,\n    // we need to know the file extensions registered by the plugins in\n    // order to compute the sources list, so we have to wait until build\n    // time (after we have loaded any plugins, including local plugins in\n    // this package) to compute this.\n    this.getFiles = getFiles;\n\n    // Object whose keys are relative paths of local node_modules\n    // directories in this package or application, for the given\n    // architecture. Does not include the .npm/package/node_modules\n    // directory installed by Npm.depends. Should be populated when\n    // getFiles is called.\n    this.localNodeModulesDirs = Object.create(null);\n\n    // Symbols that this architecture should export. List of symbols (as\n    // strings).\n    this.declaredExports = declaredExports;\n\n    // Files and directories that we want to monitor for changes in\n    // development mode, as a watch.WatchSet. In the latest refactoring of\n    // the code, this does not include source files or directories, but\n    // only control files such as package.js and .meteor/packages, since\n    // the rest are not determined until compile time.\n    this.watchSet = watchSet;\n  }\n}\n"],"file":"tools/isobuild/source-arch.js.map"}