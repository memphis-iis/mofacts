{"version":3,"sources":["/tools/console/console.js"],"names":["module1","export","LEVEL_ERROR","LEVEL_WARN","LEVEL_INFO","LEVEL_DEBUG","createInterface","link","v","utilFormat","format","getRootProgress","chalk","default","cleanupOnExit","onExit","wordwrap","isEmacs","sleepMs","Throttled","ThrottledYield","PROGRESS_DEBUG","process","env","METEOR_PROGRESS_DEBUG","CARRIAGE_RETURN","platform","stdout","isTTY","argv","toLowerCase","includes","Array","join","FORCE_PRETTY","METEOR_PRETTY_OUTPUT","STATUS_MAX_LENGTH","PROGRESS_MAX_WIDTH","PROGRESS_BAR_FORMAT","TEMP_STATUS_LENGTH","STATUS_INTERVAL_MS","PROGRESS_THROTTLE_MS","FALLBACK_STATUS","SPACE_REPLACEMENT","replaceAll","str","search","replace","split","spacesArray","spacesString","length","substring","ARROW","toFixedLength","text","pad","ProgressDisplayNone","depaint","repaint","ProgressDisplayStatus","constructor","console","_console","_stream","_status","_wroteStatusMessage","spaces","write","updateStatus","status","_render","SpinnerRenderer","frames","start","Date","interval","asString","now","t","frame","Math","floor","ProgressBarRenderer","options","Object","create","fmt","curr","total","maxWidth","chars","complete","incomplete","availableSpace","ratio","min","max","percent","completeLength","elapsed","eta","isNaN","toFixed","isFinite","width","round","ProgressDisplayFull","_progressBarRenderer","_headless","METEOR_HEADLESS","JSON","parse","_spinnerRenderer","_fraction","undefined","_printedLength","_lastWrittenLine","_lastWrittenTime","_renderTimeout","_clearDelayedRender","updateProgress","fraction","startTime","_rerenderTimeout","setTimeout","setHeadless","headless","clearTimeout","progressGraphic","indentColumns","streamColumns","statusColumns","progressColumns","line","fixedLength","bold","StatusPoller","_watching","_pollPromise","_throttledStatusPoll","_startPoller","_stop","Error","statusPoll","stop","isAllowed","_statusPoll","rootProgress","dump","skipDone","reportState","state","progressDisplay","_progressDisplay","end","done","current","watching","getCurrentProgress","getState","title","addWatcher","ConsoleOptions","o","LEVEL_CODE_ERROR","LEVEL_CODE_WARN","LEVEL_CODE_INFO","LEVEL_CODE_DEBUG","code","ConsoleBase","assign","prototype","Console","_statusPoller","_throttledYield","verbose","_simpleDebug","stderr","_pretty","_progressDisplayEnabled","_logThreshold","logspec","METEOR_LOG","trim","METEOR_SIMPLE_DEBUG","sig","enableProgressDisplay","setPretty","pretty","_updateProgressDisplay","withProgressDisplayVisible","f","originalPretty","originalProgressDisplayEnabled","setVerbose","stream","columns","nudge","canYield","yield","_parseVariadicInput","args","msgArgs","lastArg","slice","message","_format","isLevelEnabled","levelCode","isDebugEnabled","rawDebug","_print","simpleDebug","debug","_prettifyMessage","isInfoEnabled","rawInfo","info","isWarnEnabled","rawWarn","warn","rawError","error","clear","msgArguments","parsedArgs","wrapOpts","indent","bulletPoint","wrappedMessage","_wrapText","level","dest","style","red","success","uglySuccessKeyword","checkmark","green","failInfo","_fail","failWarn","printFn","xmark","labelWarn","arrowError","_arrowPrint","arrowWarn","arrowInfo","printError","err","toString","stack","printMessages","messages","hasMessages","formatMessages","command","unwrapped","noWrap","url","unspaced","underline","path","noBlanks","printTwoColumns","rows","longest","forEach","row","col0","out","col1","substr","ignoreWidth","logArguments","maxIndent","wrappedText","METEOR_NO_WORDWRAP","map","s","initIndent","enabled","newProgressDisplay","isPseudoTTY","_setProgressDisplay","isHeadless","isInteractive","oldProgressDisplay","readLine","echo","silentStream","on","removeListener","previousProgressDisplay","rl","input","stdin","output","terminal","prompt","setPrompt","Promise","resolve","close","await","exports"],"mappings":"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","sourcesContent":["///  This class provides a set of utility functions for printing to the terminal\n///  in the Meteor tool.\n///\n///  When you intend for your messages to be read by humans, you should use the\n///  following functions to print to the terminal. They will automatically line\n///  wrap output to either the width of the terminal, or 80 characters. They\n///  will also end in a new line.\n///\n////   - Console.info : Print to stdout.\n///    - Console.error: Print to stderr.\n///    - Console.warn: Prints to stderr, if warnings are enabled.\n///    - Console.debug: Prints to stdout, if debug is enabled.\n///\n/// Sometimes, there is a phrase that shouldn't be split up over multiple\n/// lines (for example, 'meteor update'). When applicable, please use the\n/// following functions (Some of them add aditional formatting, especially when\n/// pretty-print is turned on):\n///\n///    - Console.command: things to enter on the command-line, such as\n///      'meteor update' or 'cd foobar'.\n///    - Console.url: URLs, such as 'www.meteor.com'\n///    - Console.path: filepaths outside of Console.command.\n///    - Console.noWrap: anything else that you don't want line-wrapped.\n///\n/// Here is a contrived example:\n///   Console.info(\n///     \"For more information, please run\", Console.command(\"meteor show\"),\n///     \"or check out the new releases at\", Console.url(\"www.meteor.com\"),\n///     \"or look at\", Console.path(filepath), \". You are currently running\",\n///     \"Console.noWrap(\"Meteor version 1.5\") + \".\");\n///\n/// The Console.info/Console.error/Console.warn/Console.debug functions also\n/// take in Console.options, as a last (optional) argument. These allow you to\n/// set an indent or use a bulletpoint. You can check out their API below. If\n/// possible, you might also want to use one of the existing wrapper functions,\n/// such as Console.labelWarning or Console.arrowInfo.\n///\n/// Output intended for machines (or pre-formatted in specific ways) should NOT\n/// be line-wrapped. Do not wrap these things: JSON output, error stack traces,\n/// logs from other programs, etc. For those, you should use the 'raw'\n/// version of the API:\n///\n///    - Console.rawInfo: Like Console.info, but without formatting.\n///    - Console.rawError: Like Console.error, but without formatting.\n///    - Console.rawWarn: Like Console.warn, but without formatting.\n///    - Console.rawDebug: Like Console.debug, but without formatting.\n///\n/// DO NOT use Console.command/Console.url/Console.path with the raw functions!\n/// (They will change your output in ways that you probably do not want). These\n/// don't auto-linewrap, end in a newline, or take in Console.options.\n///\n/// Here is are some examples:\n///     Console.rawInfo(JSON.stringify(myData, null, 2));\n///     Console.rawError(err.stack + \"\\n\");\n///\n/// In addition to printing functions, the Console class provides progress bar\n/// support, that is mostly handled through buildmessage.js.\nimport { createInterface } from \"readline\";\nimport { format as utilFormat }  from \"util\";\nimport { getRootProgress } from \"../utils/buildmessage.js\";\nimport chalk from \"chalk\";\nimport { onExit as cleanupOnExit } from \"../tool-env/cleanup.js\";\nimport wordwrap from \"wordwrap\";\nimport {\n  isEmacs,\n  sleepMs,\n  Throttled,\n  ThrottledYield,\n} from \"../utils/utils.js\";\n\nconst PROGRESS_DEBUG = !!process.env.METEOR_PROGRESS_DEBUG;\n// Set the default CR to \\r unless we're running with cmd\nconst CARRIAGE_RETURN = process.platform === 'win32' &&\n      process.stdout.isTTY &&\n      process.argv[1].toLowerCase().includes('cmd') ? new Array(249).join('\\b') : '\\r';\n\nconst FORCE_PRETTY = process.env.METEOR_PRETTY_OUTPUT &&\n  process.env.METEOR_PRETTY_OUTPUT != '0';\n\nconst STATUS_MAX_LENGTH = 40;\n\nconst PROGRESS_MAX_WIDTH = 40;\nconst PROGRESS_BAR_FORMAT = '[:bar] :percent :etas';\nconst TEMP_STATUS_LENGTH = STATUS_MAX_LENGTH + 12;\n\nconst STATUS_INTERVAL_MS = 50;\nconst PROGRESS_THROTTLE_MS = 300;\n\n// Message to show when we don't know what we're doing\n// XXX: ? FALLBACK_STATUS = 'Pondering';\nconst FALLBACK_STATUS = '';\n\n// If there is a part of the larger text, and we really want to make sure that\n// it doesn't get split up, we will replace the space with a utf character that\n// we are not likely to use anywhere else. This one looks like the a BLACK SUN\n// WITH RAYS. We intentionally want to NOT use a space-like character: it should\n// be obvious that something has gone wrong if this ever gets printed.\nconst SPACE_REPLACEMENT = '\\u2600';\n// In Javascript, replace only replaces the first occurance and this is the\n// proposed alternative.\nconst replaceAll = (str, search, replace) => str.split(search).join(replace);\n\nlet spacesArray = new Array(200).join(' ');\nconst spacesString = (length) => {\n  if (length > spacesArray.length) {\n    spacesArray = new Array(length * 2).join(' ');\n  }\n  return spacesArray.substring(0, length);\n};\nconst ARROW = \"=> \";\n\n\nconst toFixedLength = (text, length) => {\n  text = text || \"\";\n\n  // pad or truncate `text` to length\n  var pad = length - text.length;\n  if (pad < 0) {\n    // Truncate\n    text = text.substring(0, length - 3) + \"...\";\n  } else if (pad > 0) {\n    // Pad\n    text = text + spacesString(pad);\n  }\n  return text;\n};\n\n// No-op progress display, that means we don't have to handle the 'no progress\n// display' case\nclass ProgressDisplayNone {\n  depaint() {\n    // No-op\n  }\n\n  repaint() {\n    // No-op\n  }\n}\n\n// Status display only, primarily for use with emacs\n// No fancy terminal support available, but we have a TTY.\n// Print messages that will be overwritten because they\n// end in `\\r`.\n// Status message mode is where we see status messages but not the\n// fancy progress bar.  It's used when we detect a \"pseudo-TTY\"\n// of the type used by Emacs, and possibly SSH.\n//\n// XXX DELETE THIS MODE since the progress bar now uses \"\\r\".\n// But first we have to throttle progress bar updates so that\n// Emacs doesn't get overwhelemd (we should throttle them anyway).\n// There's also a bug when using the progress bar in Emacs where\n// the cursor doesn't seem to return to column 0.\nclass ProgressDisplayStatus {\n  constructor(console) {\n    this._console = console;\n    this._stream = console._stream;\n\n    this._status = null;\n    this._wroteStatusMessage = false;\n  }\n\n  depaint() {\n    // For the non-progress-bar status mode, we may need to\n    // clear some characters that we printed with a trailing `\\r`.\n    if (this._wroteStatusMessage) {\n      var spaces = spacesString(TEMP_STATUS_LENGTH + 1);\n      this._stream.write(spaces + CARRIAGE_RETURN);\n      this._wroteStatusMessage = false;\n    }\n  }\n\n  repaint() {\n    // We don't repaint after a log message (is that right?)\n  }\n\n  updateStatus(status) {\n    if (status == this._status) {\n      return;\n    }\n\n    this._status = status;\n    this._render();\n  }\n\n  _render() {\n    var text = this._status;\n    if (text) {\n      text = toFixedLength(text, STATUS_MAX_LENGTH);\n    }\n\n    if (text) {\n      // the number of characters besides `text` here must\n      // be accounted for in TEMP_STATUS_LENGTH.\n      this._stream.write('  (  ' + text + '  ... )' + CARRIAGE_RETURN);\n      this._wroteStatusMessage = true;\n    }\n  }\n}\n\nclass SpinnerRenderer {\n  constructor() {\n    this.frames = ['-', '\\\\', '|', '/'];\n    this.start = +(new Date);\n    this.interval = 250;\n    //// I looked at some Unicode indeterminate progress indicators, such as:\n    ////\n    //// spinner = \"▁▃▄▅▆▇▆▅▄▃\".split('');\n    //// spinner = \"▉▊▋▌▍▎▏▎▍▌▋▊▉\".split('');\n    //// spinner = \"▏▎▍▌▋▊▉▊▋▌▍▎▏▁▃▄▅▆▇▆▅▄▃\".split('');\n    //// spinner = \"▉▊▋▌▍▎▏▎▍▌▋▊▉▇▆▅▄▃▁▃▄▅▆▇\".split('');\n    //// spinner = \"⠉⠒⠤⣀⠤⠒\".split('');\n    ////\n    //// but none of them really seemed like an improvement. I think\n    //// the case for using unicode would be stronger in a determinate\n    //// progress indicator.\n    ////\n    //// There are also some four-frame options such as ◐◓◑◒ at\n    ////   http://stackoverflow.com/a/2685827/157965\n    //// but all of the ones I tried look terrible in the terminal.\n  }\n\n  asString() {\n    var now = +(new Date);\n\n    var t = now - this.start;\n    var frame = Math.floor(t / this.interval) % this.frames.length;\n    return this.frames[frame];\n  }\n}\n\n// Renders a progressbar.  Based on the npm 'progress' module, but tailored to our needs (i.e. renders to string)\nclass ProgressBarRenderer {\n  constructor(format, options) {\n    options = options || Object.create(null);\n\n    this.fmt = format;\n    this.curr = 0;\n    this.total = 100;\n    this.maxWidth = options.maxWidth || this.total;\n    this.chars = {\n      complete   : '=',\n      incomplete : ' '\n    };\n  }\n\n  asString(availableSpace) {\n    var ratio = this.curr / this.total;\n    ratio = Math.min(Math.max(ratio, 0), 1);\n\n    var percent = ratio * 100;\n    var incomplete, complete, completeLength;\n    var elapsed = new Date - this.start;\n    var eta = (percent == 100) ? 0 : elapsed * (this.total / this.curr - 1);\n\n    /* populate the bar template with percentages and timestamps */\n    var str = this.fmt\n      .replace(':current', this.curr)\n      .replace(':total', this.total)\n      .replace(':elapsed', isNaN(elapsed) ? '0.0' : (elapsed / 1000).toFixed(1))\n      .replace(':eta', (isNaN(eta) || ! isFinite(eta)) ? '0.0' : (eta / 1000).toFixed(1))\n      .replace(':percent', percent.toFixed(0) + '%');\n\n    /* compute the available space (non-zero) for the bar */\n    var width = Math.min(this.maxWidth, availableSpace - str.replace(':bar', '').length);\n\n    /* NOTE: the following assumes the user has one ':bar' token */\n    completeLength = Math.round(width * ratio);\n    complete = Array(completeLength + 1).join(this.chars.complete);\n    incomplete = Array(width - completeLength + 1).join(this.chars.incomplete);\n\n    /* fill in the actual progress bar */\n    str = str.replace(':bar', complete + incomplete);\n\n    return str;\n  }\n}\n\n\nclass ProgressDisplayFull {\n  constructor(console) {\n    this._console = console;\n    this._stream = console._stream;\n\n    this._status = '';\n\n    var options = {\n      complete: '=',\n      incomplete: ' ',\n      maxWidth: PROGRESS_MAX_WIDTH,\n      total: 100\n    };\n    this._progressBarRenderer = new ProgressBarRenderer(PROGRESS_BAR_FORMAT, options);\n    this._progressBarRenderer.start = new Date();\n\n    this._headless = !! (\n      process.env.METEOR_HEADLESS &&\n      JSON.parse(process.env.METEOR_HEADLESS)\n    );\n\n    this._spinnerRenderer = new SpinnerRenderer();\n\n    this._fraction = undefined;\n\n    this._printedLength = 0;\n\n    this._lastWrittenLine = null;\n    this._lastWrittenTime = 0;\n    this._renderTimeout = null;\n  }\n\n  depaint() {\n    this._clearDelayedRender();\n    this._stream.write(spacesString(this._printedLength) + CARRIAGE_RETURN);\n  }\n\n  updateStatus(status) {\n    if (status == this._status) {\n      return;\n    }\n\n    this._status = status;\n    this._render();\n  }\n\n  updateProgress(fraction, startTime) {\n    this._fraction = fraction;\n    if (fraction !== undefined) {\n      this._progressBarRenderer.curr = Math.floor(fraction * this._progressBarRenderer.total);\n    }\n    if (startTime) {\n      this._progressBarRenderer.start = startTime;\n    }\n\n    if (!this._rerenderTimeout && this._lastWrittenTime) {\n      this._rerenderTimeout = setTimeout(() => {\n        this._rerenderTimeout = null;\n        this._render()\n      }, PROGRESS_THROTTLE_MS);\n    } else if (this._lastWrittenTime === 0) {\n      this._render();\n    }\n  }\n\n  repaint() {\n    this._render();\n  }\n\n  setHeadless(headless) {\n    this._headless = !! headless;\n  }\n\n  _clearDelayedRender() {\n    if (this._rerenderTimeout) {\n      clearTimeout(this._rerenderTimeout);\n      this._rerenderTimeout = null;\n    }\n  }\n\n  _render() {\n    if (this._rerenderTimeout) {\n      this._clearDelayedRender();\n    }\n\n    // XXX: Or maybe just jump to the correct position?\n    var progressGraphic = '';\n\n    // The cursor appears in position 0; we indent it a little to avoid this\n    // This also means it appears less important, which is good\n    var indentColumns = 3;\n\n    var streamColumns = this._console.width();\n    var statusColumns;\n    var progressColumns;\n    if (! streamColumns) {\n      statusColumns = STATUS_MAX_LENGTH;\n      progressColumns = 0;\n    } else {\n      statusColumns = Math.min(STATUS_MAX_LENGTH, streamColumns - indentColumns);\n      progressColumns = Math.min(PROGRESS_MAX_WIDTH, streamColumns - indentColumns - statusColumns);\n    }\n\n    if (this._fraction !== undefined && progressColumns > 16) {\n      // 16 is a heuristic number that allows enough space for a meaningful progress bar\n      progressGraphic = \"  \" + this._progressBarRenderer.asString(progressColumns - 2);\n\n    } else if (! this._headless && progressColumns > 3) {\n      // 3 = 2 spaces + 1 spinner character\n      progressGraphic = \"  \" + this._spinnerRenderer.asString();\n\n    } else if (new Date - this._lastWrittenTime > 5 * 60 * 1000) {\n      // Print something every five minutes, to avoid test timeouts.\n      progressGraphic = \"  [ProgressDisplayFull keepalive]\";\n      this._lastWrittenLine = null; // Force printing.\n    }\n\n    if (this._status || progressGraphic) {\n      // XXX: Just update the graphic, to avoid text flicker?\n\n      var line = spacesString(indentColumns);\n      var length = indentColumns;\n\n      if (this._status) {\n        var fixedLength = toFixedLength(this._status, statusColumns);\n        line += chalk.bold(fixedLength);\n        length += statusColumns;\n      } else {\n        line += spacesString(statusColumns);\n        length += statusColumns;\n      }\n\n      line += progressGraphic + CARRIAGE_RETURN;\n      length += progressGraphic.length;\n\n      if (this._headless &&\n          line === this._lastWrittenLine) {\n        // Don't write the exact same line twice in a row.\n        return;\n      }\n\n      this.depaint();\n\n      this._stream.write(line);\n      this._lastWrittenLine = line;\n      this._lastWrittenTime = +new Date;\n      this._printedLength = length;\n    }\n  }\n}\n\nclass StatusPoller {\n  constructor(console) {\n    // The current progress we are watching\n    this._watching = null;\n\n    this._console = console;\n\n    this._pollPromise = null;\n    this._throttledStatusPoll = new Throttled({\n      interval: STATUS_INTERVAL_MS\n    });\n    this._startPoller();\n    this._stop = false;\n  }\n\n  _startPoller() {\n    if (this._pollPromise) {\n      throw new Error(\"Already started\");\n    }\n\n    this._pollPromise = (async() => {\n      sleepMs(STATUS_INTERVAL_MS);\n      while (! this._stop) {\n        this.statusPoll();\n        sleepMs(STATUS_INTERVAL_MS);\n      }\n    })();\n  }\n\n  stop() {\n    this._stop = true;\n  }\n\n  statusPoll() {\n    if (this._throttledStatusPoll.isAllowed()) {\n      this._statusPoll();\n    }\n  }\n\n  _statusPoll() {\n    // XXX: Early exit here if we're not showing status at all?\n\n    var rootProgress = getRootProgress();\n    if (PROGRESS_DEBUG) {\n      // It can be handy for dev purposes to see all the executing tasks\n      rootProgress.dump(process.stdout, {skipDone: true});\n    }\n\n    const reportState = (state, startTime) => {\n      var progressDisplay = this._console._progressDisplay;\n      // Do the % computation, if it is going to be used\n      if (progressDisplay.updateProgress) {\n        if (state.end === undefined || state.end == 0) {\n          progressDisplay.updateProgress(undefined, startTime);\n        } else {\n          var fraction = state.done ? 1.0 : (state.current / state.end);\n\n          if (! isNaN(fraction) && fraction >= 0) {\n            progressDisplay.updateProgress(fraction, startTime);\n          } else {\n            progressDisplay.updateProgress(0, startTime);\n          }\n        }\n      }\n    };\n\n    var watching = (rootProgress ? rootProgress.getCurrentProgress() : null);\n\n    if (this._watching === watching) {\n      // We need to do this to keep the spinner spinning\n      // XXX: Should we _only_ do this when we're showing the spinner?\n      reportState(watching.getState(), watching.startTime);\n      return;\n    }\n\n    this._watching = watching;\n\n    var title = (watching != null ? watching.title : null) || FALLBACK_STATUS;\n\n    var progressDisplay = this._console._progressDisplay;\n    progressDisplay.updateStatus && progressDisplay.updateStatus(title);\n\n    if (watching) {\n      watching.addWatcher((state) => {\n        if (watching != this._watching) {\n          // No longer active\n          // XXX: De-register with watching? (we don't bother right now because dead tasks tell no status)\n          return;\n        }\n\n        reportState(state, watching.startTime);\n      });\n    }\n  }\n}\n\n// We use a special class to represent the options that we send to the Console\n// because it allows us to call 'instance of' on the last argument of variadic\n// functions. This allows us to keep the signature of our custom output\n// functions (ex: info) roughly the same as the originals.\nclass ConsoleOptions {\n  constructor(o) {\n    this.options = o;\n  }\n}\n\nconst LEVEL_CODE_ERROR = 4;\nconst LEVEL_CODE_WARN = 3;\nconst LEVEL_CODE_INFO = 2;\nconst LEVEL_CODE_DEBUG = 1;\n\nexport const LEVEL_ERROR = { code: LEVEL_CODE_ERROR };\nexport const LEVEL_WARN = { code: LEVEL_CODE_WARN };\nexport const LEVEL_INFO = { code: LEVEL_CODE_INFO };\nexport const LEVEL_DEBUG = { code: LEVEL_CODE_DEBUG };\n\n// This base class is just here to preserve some of the \"static properties\"\n// which were being set on the `Console.prototype` prior to this being a\n// `class`.  In the future, if static properties eventually work their way\n// into the language, this can be moved into the `Console` class.\nclass ConsoleBase {}\nObject.assign(ConsoleBase.prototype, {\n  // Log levels\n  LEVEL_ERROR,\n  LEVEL_WARN,\n  LEVEL_INFO,\n  LEVEL_DEBUG,\n\n  // Other Console constants.\n  CARRIAGE_RETURN,\n});\n\nclass Console extends ConsoleBase {\n  constructor(options) {\n    super();\n\n    options = options || Object.create(null);\n\n    this._headless = !! (\n      process.env.METEOR_HEADLESS &&\n      JSON.parse(process.env.METEOR_HEADLESS)\n    );\n\n    // The progress display we are showing on-screen\n    this._progressDisplay = new ProgressDisplayNone(this);\n\n    this._statusPoller = null;\n\n    this._throttledYield = new ThrottledYield();\n\n    this.verbose = false;\n    this._simpleDebug = false;\n\n    // Legacy helpers\n    this.stdout = Object.create(null);\n    this.stderr = Object.create(null);\n\n    this._stream = process.stdout;\n\n    this._pretty = (FORCE_PRETTY !== undefined ? FORCE_PRETTY : false);\n    this._progressDisplayEnabled = false;\n\n    this._logThreshold = LEVEL_CODE_INFO;\n    var logspec = process.env.METEOR_LOG;\n\n    if (logspec) {\n      logspec = logspec.trim().toLowerCase();\n      if (logspec === 'debug') {\n        this._logThreshold = LEVEL_CODE_DEBUG;\n      }\n    }\n\n    if (process.env.METEOR_SIMPLE_DEBUG) {\n      this._simpleDebug = true;\n    }\n\n    cleanupOnExit((sig) => {\n      this.enableProgressDisplay(false);\n    });\n  }\n\n  setPretty(pretty) {\n    // If we're being forced, do nothing.\n    if (FORCE_PRETTY !== undefined) {\n      return;\n    }\n    // If no change, do nothing.\n    if (this._pretty === pretty) {\n      return;\n    }\n    this._pretty = pretty;\n    this._updateProgressDisplay();\n  }\n\n  // Runs f with the progress display visible (ie, with progress display enabled\n  // and pretty). Resets both flags to their original values after f runs.\n  withProgressDisplayVisible(f) {\n    var originalPretty = this._pretty;\n    var originalProgressDisplayEnabled = this._progressDisplayEnabled;\n\n    // Turn both flags on.\n    this._pretty = this._progressDisplayEnabled = true;\n\n    // Update the screen if anything changed.\n    if (! originalPretty || ! originalProgressDisplayEnabled) {\n      this._updateProgressDisplay();\n    }\n\n    try {\n      return f();\n    } finally {\n      // Reset the flags.\n      this._pretty = originalPretty;\n      this._progressDisplayEnabled = originalProgressDisplayEnabled;\n      // Update the screen if anything changed.\n      if (! originalPretty || ! originalProgressDisplayEnabled) {\n        this._updateProgressDisplay();\n      }\n    }\n  }\n\n  setVerbose(verbose) {\n    this.verbose = verbose;\n  }\n\n  // Get the current width of the Console.\n  width() {\n    var width = 80;\n    var stream = process.stdout;\n    if (stream && stream.isTTY && stream.columns) {\n      width = stream.columns;\n    }\n\n    // On Windows cmd.exe splits long lines into smaller chunks by inserting the\n    // '\\r\\n' symbols into the stream, this is what cmd.exe does instead of\n    // reflowing the text. We cannot control it. For some unknown reason, even\n    // when the output line is less than number of columns (usually 80), cmd.exe\n    // would still insert new-line chars. These chars break our repainting that\n    // relies on the previous chars to be erasable with '\\b' (end-line chars\n    // can't be erased this way). This is why we report a smaller number than it\n    // is in reality, for safety.\n    if (process.platform === 'win32') {\n      width -= 5;\n    }\n\n    return width;\n  }\n\n  // This can be called during long lived operations; it will keep the spinner spinning.\n  // (This code used to be in Patience.nudge)\n  //\n  // It's frustrating when you write code that takes a while, either because it\n  // uses a lot of CPU or because it uses a lot of network/IO.  In Node,\n  // consuming lots of CPU without yielding is especially bad.\n  // Other IO/network tasks will stall, and you can't even kill the process!\n  //\n  // Within any code that may burn CPU for too long, call `Console.nudge()`.\n  // If it's been a while since your last yield, your Fiber will sleep momentarily.\n  // It will also update the spinner if there is one and it's been a while.\n  // The caller should be OK with yielding --- it has to be in a Fiber and it can't be\n  // anything that depends for correctness on not yielding.  You can also call nudge(false)\n  // if you just want to update the spinner and not yield, but you should avoid this.\n  nudge(canYield) {\n    if (this._statusPoller) {\n      this._statusPoller.statusPoll();\n    }\n    if (canYield === undefined || canYield === true) {\n      this._throttledYield.yield();\n    }\n  }\n\n  // Initializes and returns a new ConsoleOptions object. Takes in the following\n  // Console options to pass to _wrapText eventually.\n  //\n  //   - bulletPoint: start the first line with a given string, then offset the\n  //     subsequent lines by the length of that string. For example, if the\n  //     bulletpoint is \" => \", we would get:\n  //     \" => some long message starts here\n  //          and then continues here.\"\n  //   - indent: offset the entire string by a specific number of\n  //     characters. For example:\n  //     \"  This entire message is indented\n  //        by two characters.\"\n  //\n  // Passing in both options will offset the bulletPoint by the indentation,\n  // like so:\n  //  \"  this message is indented by two.\"\n  //  \"  => this mesage indented by two and\n  //        and also starts with an arrow.\"\n  //\n  options(o) {\n    // (This design pattern allows us to call 'instance of' on the\n    // ConsoleOptions in parseVariadicInput, by ensuring that the object created\n    // with Console.options is, in fact, a new object.\n    return new ConsoleOptions(o);\n  }\n\n  // Deal with the arguments to a variadic print function that also takes an\n  // optional ConsoleOptions argument at the end.\n  //\n  // Returns an object with keys:\n  //  - options: The options that were passed in, or an empty object.\n  //  - message: Arguments to the original function, parsed as a string.\n  //\n  _parseVariadicInput(args) {\n    var msgArgs;\n    var options;\n    // If the last argument is an instance of ConsoleOptions, then we should\n    // separate it out, and only send the first N-1 arguments to be parsed as a\n    // message.\n    const lastArg = args && args.length && args[args.length - 1];\n    if (lastArg instanceof ConsoleOptions) {\n      msgArgs = args.slice(0, -1);\n      options = lastArg.options;\n    } else {\n      msgArgs = args;\n      options = Object.create(null);\n    }\n    var message = this._format(msgArgs);\n    return { message: message, options: options };\n  }\n\n  isLevelEnabled(levelCode) {\n    return (this.verbose || this._logThreshold <= levelCode);\n  }\n\n  isDebugEnabled() {\n    return this.isLevelEnabled(LEVEL_CODE_DEBUG);\n  }\n\n\n  // Don't pretty-fy this output by trying to, for example, line-wrap it. Just\n  // print it to the screen as it is.\n  rawDebug(...args) {\n    if (! this.isDebugEnabled()) {\n      return;\n    }\n\n    var message = this._format(args);\n    this._print(LEVEL_DEBUG, message);\n  }\n\n  // Don't use console and so it does not affect tests.\n  // like this.fullBuffer from matcher.\n  simpleDebug(...args) {\n    if (! this._simpleDebug) {\n      return;\n    }\n\n    var message = this._format(args);\n    process.stdout.write( '\\n' + message + '\\n');\n  }\n\n  // By default, Console.debug automatically line wraps the output.\n  //\n  // Takes in an optional Console.options({}) argument at the end, with the\n  // following keys:\n  //   - bulletPoint: start the first line with a given string, then offset the\n  //     subsequent lines by the length of that string. See _wrap for more details.\n  //   - indent: offset the entire string by a specific number of\n  //     characters. See _wrap for more details.\n  //\n  debug(...args) {\n    if (! this.isDebugEnabled()) { return; }\n\n    var message = this._prettifyMessage(args);\n    this._print(LEVEL_DEBUG, message);\n  }\n\n  isInfoEnabled() {\n    return this.isLevelEnabled(LEVEL_CODE_INFO);\n  }\n\n  // Don't pretty-fy this output by trying to, for example, line-wrap it. Just\n  // print it to the screen as it is.\n  rawInfo(...args) {\n    if (! this.isInfoEnabled()) {\n      return;\n    }\n\n    var message = this._format(args);\n    this._print(LEVEL_INFO, message);\n  }\n\n  // Generally, we want to process the output for legibility, for example, by\n  // wrapping it. For raw output (ex: stack traces, user logs, etc), use the\n  // rawInfo function. For more information about options, see: debug.\n  info(...args) {\n    if (! this.isInfoEnabled()) { return; }\n\n    var message = this._prettifyMessage(args);\n    this._print(LEVEL_INFO, message);\n  }\n\n  isWarnEnabled() {\n    return this.isLevelEnabled(LEVEL_CODE_WARN);\n  }\n\n  rawWarn(...args) {\n    if (! this.isWarnEnabled()) {\n      return;\n    }\n\n    var message = this._format(args);\n    this._print(LEVEL_WARN, message);\n  }\n\n  // Generally, we want to process the output for legibility, for example, by\n  // wrapping it. For raw output (ex: stack traces, user logs, etc), use the\n  // rawWarn function. For more information about options, see: debug.\n  warn(...args) {\n    if (! this.isWarnEnabled()) { return; }\n\n    var message = this._prettifyMessage(args);\n    this._print(LEVEL_WARN, message);\n  }\n\n  rawError(...args) {\n    var message = this._format(args);\n    this._print(LEVEL_ERROR, message);\n  }\n\n  // Generally, we want to process the output for legibility, for example, by\n  // wrapping it. For raw output (ex: stack traces, user logs, etc), use the\n  // rawError function. For more information about options, see: debug.\n  error(...args) {\n    var message = this._prettifyMessage(args);\n    this._print(LEVEL_ERROR, message);\n  }\n\n  // Prints a special ANSI sequence that \"clears\" the screen (on most terminal\n  // emulators just scrolls the contents down and resets the position).\n  // References: http://en.wikipedia.org/wiki/ANSI_escape_code#CSI_codes\n  clear() {\n    this.rawInfo('\\u001b[2J\\u001b[0;0H');\n  }\n\n  _prettifyMessage(msgArguments) {\n    var parsedArgs = this._parseVariadicInput(msgArguments);\n    var wrapOpts = {\n      indent: parsedArgs.options.indent,\n      bulletPoint: parsedArgs.options.bulletPoint\n    };\n\n    var wrappedMessage = this._wrapText(parsedArgs.message, wrapOpts);\n    wrappedMessage += \"\\n\";\n    return wrappedMessage;\n  }\n\n  _print(level, message) {\n    // We need to hide the progress bar/spinner before printing the message\n    var progressDisplay = this._progressDisplay;\n    progressDisplay.depaint();\n\n    // stdout/stderr is determined by the log level\n    // XXX: We should probably just implement Loggers with observers\n    var dest = process.stdout;\n    if (level) {\n      switch (level.code) {\n        case LEVEL_CODE_ERROR:\n          dest = process.stderr;\n          break;\n        case LEVEL_CODE_WARN:\n          dest = process.stderr;\n          break;\n      }\n    }\n\n    // Pick the color/weight if in pretty mode\n    var style = null;\n    if (level && this._pretty) {\n      switch (level.code) {\n        case LEVEL_CODE_ERROR:\n          style = chalk.bold.red;\n          break;\n        case LEVEL_CODE_WARN:\n          style = chalk.red;\n          break;\n      }\n    }\n\n    if (style) {\n      dest.write(style(message));\n    } else {\n      dest.write(message);\n    }\n\n    // XXX: Pause before showing the progress display, to prevent\n    // flicker/spewing messages\n    // Repaint the progress display\n    progressDisplay.repaint();\n  }\n\n  // A wrapper around Console.info. Prints the message out in green (if pretty),\n  // with the CHECKMARK as the bullet point in front of it.\n  success(message, uglySuccessKeyword = \"success\") {\n    var checkmark;\n\n    if (! this._pretty) {\n      return this.info(`${message}: ${uglySuccessKeyword}`);\n    }\n\n    if (process.platform === \"win32\") {\n      checkmark = chalk.green('SUCCESS');\n    } else {\n      checkmark = chalk.green('\\u2713'); // CHECKMARK\n    }\n\n    return this.info(\n        chalk.green(message),\n        this.options({ bulletPoint: checkmark  + \" \"}));\n  }\n\n  // Wrapper around Console.info. Prints the message out in red (if pretty)\n  // with the BALLOT X as the bullet point in front of it.\n  failInfo(message) {\n    return this._fail(message, \"info\");\n  }\n\n  // Wrapper around Console.warn. Prints the message out in red (if pretty)\n  // with the ascii x as the bullet point in front of it.\n  failWarn(message) {\n    return this._fail(message, \"warn\");\n  }\n\n  // Print the message in red (if pretty) with an x bullet point in front of it.\n  _fail(message, printFn) {\n    if (! this._pretty) {\n      return this[printFn](message);\n    }\n\n    var xmark = chalk.red('\\u2717');\n    return this[printFn](\n        chalk.red(message),\n        this.options({ bulletPoint: xmark + \" \" }));\n  }\n\n  // Wrapper around Console.warn that prints a large \"WARNING\" label in front.\n  labelWarn(message) {\n    return this.warn(message, this.options({ bulletPoint: \"WARNING: \" }));\n  }\n\n  // Wrappers around Console functions to prints an \"=> \" in front. Optional\n  // indent to indent the arrow.\n  arrowError(message, indent) {\n    return this._arrowPrint(\"error\", message, indent);\n  }\n  arrowWarn(message, indent) {\n    return this._arrowPrint(\"warn\", message, indent);\n  }\n  arrowInfo(message, indent) {\n    return this._arrowPrint(\"info\", message, indent);\n  }\n  _arrowPrint(printFn, message, indent) {\n    indent = indent || 0;\n    return this[printFn](\n      message,\n      this.options({ bulletPoint: ARROW, indent: indent }));\n  }\n\n  // A wrapper around console.error. Given an error and some background\n  // information, print out the correct set of messages depending on verbose\n  // level, etc.\n  printError(err, info) {\n    var message = err.message;\n    if (! message) {\n      message = \"Unexpected error\";\n      if (this.verbose) {\n        message += \" (\" + err.toString() + \")\";\n      }\n    }\n\n    if (info) {\n      message = info + \": \" + message;\n    }\n\n    this.error(message);\n    if (this.verbose && err.stack) {\n      this.rawInfo(err.stack + \"\\n\");\n    }\n  }\n\n  // A wrapper to print out buildmessage errors.\n  printMessages(messages) {\n    if (messages.hasMessages()) {\n      this.error(\"\\n\" + messages.formatMessages());\n    }\n  }\n\n  // Wrap commands in this function -- it ensures that commands don't get line\n  // wrapped (ie: print 'meteor' at the end of the line, and 'create --example'\n  // at the beginning of the next one).\n  //\n  // To use, wrap commands that you send into print functions with this\n  // function, like so: Console.info(text + Console.command(\"meteor create\n  // --example leaderboard\") + moretext).\n  //\n  // If pretty print is on, this will also bold the commands.\n  command(message) {\n    var unwrapped = this.noWrap(message);\n    return this.bold(unwrapped);\n  }\n\n  // Underline the URLs (if pretty print is on).\n  url(message) {\n    // If we are going to print URLs with spaces, we should turn spaces into\n    // things browsers understand.\n    var unspaced =\n          replaceAll(message, ' ', '%20');\n    // There is no need to call noWrap here, since that only handles spaces (and\n    // we have done that). If it ever handles things other than spaces, we\n    // should make sure to call it here.\n    return this.underline(unspaced);\n  }\n\n  // Format a filepath to not wrap. This does NOT automatically escape spaces\n  // (ie: add a slash in front so the user could copy paste the file path into a\n  // terminal).\n  path(message) {\n    // Make sure that we don't wrap this.\n    var unwrapped = this.noWrap(message);\n    return this.bold(unwrapped);\n  }\n\n  // Do not wrap this substring when you send it into a non-raw print function.\n  // DO NOT print the result of this call with a raw function.\n  noWrap(message) {\n    var noBlanks = replaceAll(message, ' ', SPACE_REPLACEMENT);\n    return noBlanks;\n  }\n\n  // A wrapper around the underline functionality of chalk.\n  underline(message) {\n    if (! this._pretty) {\n      return message;\n    }\n    return chalk.underline(message);\n  }\n\n  // A wrapper around the bold functionality of chalk.\n  bold(message) {\n    if (! this._pretty) {\n      return message;\n    }\n    return chalk.bold(message);\n  }\n\n  // Prints a two column table in a nice format (The first column is printed\n  // entirely, the second only as space permits).\n  //  options:\n  //      - level: Allows to print to stderr, instead of stdout. Set the print\n  //        level with Console.LEVEL_INFO, Console.LEVEL_ERROR, etc.\n  //      - ignoreWidth: ignore the width of the terminal, and go over the\n  //        character limit instead of trailing off with '...'. Useful for\n  //        printing directories, for example.\n  //      - indent: indent the entire table by a given number of spaces.\n  printTwoColumns(rows, options) {\n    options = options || Object.create(null);\n\n    var longest = '';\n    rows.forEach(row => {\n      var col0 = row[0] || '';\n      if (col0.length > longest.length) {\n        longest = col0;\n      }\n    });\n\n    var pad = longest.replace(/./g, ' ');\n    var width = this.width();\n    var indent =\n      options.indent ? Array(options.indent + 1).join(' ') : \"\";\n\n    var out = '';\n    rows.forEach(row => {\n      var col0 = row[0] || '';\n      var col1 = row[1] || '';\n      var line = indent + this.bold(col0) + pad.substr(col0.length);\n      line += \"  \" + col1;\n      if (! options.ignoreWidth && line.length > width) {\n        line = line.substr(0, width - 3) + '...';\n      }\n      out += line + \"\\n\";\n    });\n\n    var level = options.level || this.LEVEL_INFO;\n    out += \"\\n\";\n    this._print(level, out);\n\n    return out;\n  }\n\n  // Format logs according to the spec in utils.\n  _format(logArguments) {\n    return utilFormat(...logArguments);\n  }\n\n  // Wraps long strings to the length of user's terminal. Inserts linebreaks\n  // between words when nearing the end of the line. Returns the wrapped string\n  // and takes the following arguments:\n  //\n  // text: the text to wrap\n  // options:\n  //   - bulletPoint: (see: Console.options)\n  //   - indent: (see: Console.options)\n  //\n  _wrapText(text, options) {\n    options = options || Object.create(null);\n\n    // Compute the maximum offset on the bulk of the message.\n    var maxIndent = 0;\n    if (options.indent && options.indent > 0) {\n      maxIndent = maxIndent + options.indent;\n    }\n    if (options.bulletPoint) {\n      maxIndent = maxIndent + options.bulletPoint.length;\n    }\n\n    // Get the maximum width, or if we are not running in a terminal (self-test,\n    // for example), default to 80 columns.\n    var max = this.width();\n\n    var wrappedText;\n    if (process.env.METEOR_NO_WORDWRAP) {\n      var indent =\n        options.indent ? Array(options.indent + 1).join(' ') : \"\";\n      if (options.bulletPoint) {\n        wrappedText = options.bulletPoint + text;\n      } else {\n        wrappedText = text;\n      }\n      wrappedText = wrappedText.split('\\n').map(s => {\n        if (s === \"\") {\n          return \"\";\n        }\n        return indent + s;\n      }).join('\\n');\n\n    } else {\n      // Wrap the text using the npm wordwrap library.\n      wrappedText = wordwrap(maxIndent, max)(text);\n\n      // Insert the start string, if applicable.\n      if (options.bulletPoint) {\n        // Save the initial indent level.\n        var initIndent = options.indent ?\n              wrappedText.substring(0, options.indent) : \"\";\n        // Add together the initial indent (if any), the bullet point and the\n        // remainder of the message.\n        wrappedText = initIndent + options.bulletPoint +\n          wrappedText.substring(maxIndent);\n      }\n    }\n\n    // If we have previously replaces any spaces, now is the time to bring them\n    // back.\n    wrappedText = replaceAll(wrappedText, SPACE_REPLACEMENT, ' ');\n    return wrappedText;\n  }\n\n\n  // Enables the progress bar, or disables it when called with (false)\n  enableProgressDisplay(enabled) {\n    // No arg => enable\n    if (enabled === undefined) {\n      enabled = true;\n    }\n\n    if (this._progressDisplayEnabled === enabled) {\n      return;\n    }\n\n    this._progressDisplayEnabled = enabled;\n    this._updateProgressDisplay();\n  }\n\n  // In response to a change in setPretty or enableProgressDisplay,\n  // configure the appropriate progressDisplay\n  _updateProgressDisplay() {\n    var newProgressDisplay;\n\n    if (! this._progressDisplayEnabled) {\n      newProgressDisplay = new ProgressDisplayNone();\n    } else if ((! this._stream.isTTY) || (! this._pretty)) {\n      // No progress bar if not in pretty / on TTY.\n      newProgressDisplay = new ProgressDisplayNone(this);\n    } else if (isEmacs() || this.isPseudoTTY()) {\n      // Resort to a more basic mode if we're in an environment which\n      // misbehaves when using clearLine() and cursorTo(...).\n      newProgressDisplay = new ProgressDisplayStatus(this);\n    } else {\n      // Otherwise we can do the full progress bar\n      newProgressDisplay = new ProgressDisplayFull(this);\n    }\n\n    // Start/stop the status poller, so we never block exit\n    if (this._progressDisplayEnabled) {\n      if (! this._statusPoller) {\n        this._statusPoller = new StatusPoller(this);\n      }\n    } else {\n      if (this._statusPoller) {\n        this._statusPoller.stop();\n        this._statusPoller = null;\n      }\n    }\n\n    this._setProgressDisplay(newProgressDisplay);\n  }\n\n  isPseudoTTY() {\n    return this._stream && this._stream.isTTY && ! this._stream.columns;\n  }\n\n  isHeadless() {\n    return this._headless;\n  }\n\n  isInteractive() {\n    return ! this._headless;\n  }\n\n  setHeadless(headless = true) {\n    this._headless = !! headless;\n\n    if (this._progressDisplay &&\n        this._progressDisplay.setHeadless) {\n      this._progressDisplay.setHeadless(this._headless);\n    }\n  }\n\n  _setProgressDisplay(newProgressDisplay) {\n    // XXX: Optimize case of no-op transitions? (same mode -> same mode)\n\n    var oldProgressDisplay = this._progressDisplay;\n    oldProgressDisplay.depaint();\n\n    this._progressDisplay = newProgressDisplay;\n  }\n\n  // options:\n  //   - echo (boolean): defaults to true\n  //   - prompt (string)\n  //   - stream: defaults to process.stdout (you might want process.stderr)\n  readLine(options) {\n    options = Object.assign(Object.create(null), {\n      echo: true,\n      stream: this._stream\n    }, options);\n\n    var silentStream = {\n      write: function () {\n      },\n      on: function () {\n      },\n      end: function () {\n      },\n      isTTY: options.stream.isTTY,\n      removeListener: function () {\n      }\n    };\n\n    var previousProgressDisplay = this._progressDisplay;\n    this._setProgressDisplay(new ProgressDisplayNone());\n\n    // Read a line, throwing away the echoed characters into our dummy stream.\n    var rl = createInterface({\n      input: process.stdin,\n      output: options.echo ? options.stream : silentStream,\n      // `terminal: options.stream.isTTY` is the default, but emacs shell users\n      // don't want fancy ANSI.\n      terminal: options.stream.isTTY && ! isEmacs()\n    });\n\n    if (! options.echo) {\n      options.stream.write(options.prompt);\n    } else {\n      rl.setPrompt(options.prompt);\n      rl.prompt();\n    }\n\n    return new Promise((resolve) => {\n      rl.on('line', line => {\n        rl.close();\n        if (! options.echo) {\n          options.stream.write(\"\\n\");\n        }\n        this._setProgressDisplay(previousProgressDisplay);\n        resolve(line);\n      });\n    }).await();\n  }\n}\n\nexports.Console = new Console;\n"],"file":"tools/console/console.js.map"}