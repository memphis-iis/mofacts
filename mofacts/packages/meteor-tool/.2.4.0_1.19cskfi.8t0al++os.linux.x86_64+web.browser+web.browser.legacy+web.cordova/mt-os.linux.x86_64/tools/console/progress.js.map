{"version":3,"sources":["tools/console/progress.ts"],"names":[],"mappings":"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","sourcesContent":["type ProgressWatcher = (state: ProgressState) => void;\n\ntype ProgressOptions = {\n  parent?: Progress;\n  watchers?: ProgressWatcher[];\n  title?: string;\n  forkJoin?: boolean;\n};\n\ntype ProgressState = {\n  done: boolean; // true if job is done\n  current: number; // the current progress value\n  end?: number; // the value of current where we expect to be done\n};\n\n/**\n * Utility class for computing the progress of complex tasks.\n * \n * Watchers are invoked with a ProgressState object.\n */\nexport class Progress {\n  public readonly title?: string;\n  public readonly startTime = Date.now();\n\n  private parent: Progress | null;\n  private allTasks: Progress[] = [];\n  private selfState: ProgressState = { current: 0, done: false };\n  private state: ProgressState = { current: 0, done: false };\n  private isDone = false;\n  private watchers: ProgressWatcher[];\n  private forkJoin: boolean;\n\n  constructor(options: ProgressOptions = {}) {\n    this.parent = options.parent || null;\n    this.watchers = options.watchers || [];\n    this.forkJoin = !!options.forkJoin;\n\n    if ((this.title = options.title)) {\n      // Capitalize job titles when displayed in the progress bar.\n      this.title = this.title[0].toUpperCase() + this.title.slice(1);\n    }\n  }\n\n  toString() {\n    return \"Progress [state=\" + JSON.stringify(this.state) + \"]\";\n  }\n\n  reportProgressDone() {\n    const state = {\n      ...this.selfState,\n      done: true,\n    };\n\n    if (typeof state.end !== 'undefined') {\n      if (state.current > state.end) {\n        state.end = state.current;\n      }\n      state.current = state.end;\n    }\n\n    this.reportProgress(state);\n  }\n\n  // Tries to determine which is the 'current' job in the tree\n  // This is very heuristical... we use some hints, like:\n  // don't descend into fork-join jobs; we know these execute concurrently,\n  // so we assume the top-level task has the title\n  // i.e. \"Downloading packages\", not \"downloading supercool-1.0\"\n  getCurrentProgress(): Progress | null {\n    const isRoot = !this.parent;\n\n    if (this.isDone) {\n      // A done task cannot be the active task\n      return null;\n    }\n\n    if (!this.state.done && (this.state.current !== 0) && this.state.end &&\n        !isRoot) {\n      // We are not done and we have interesting state to report\n      return this;\n    }\n\n    if (this.forkJoin) {\n      // Don't descend into fork-join tasks (by choice)\n      return this;\n    }\n\n    if (this.allTasks.length) {\n      const active = this.allTasks\n        .map(task => task.getCurrentProgress())\n        .filter(Boolean);\n\n      if (active.length) {\n        // pick one to display, somewhat arbitrarily\n        return active[active.length - 1];\n      }\n\n      // No single active task, return self\n      return this;\n    }\n\n    return this;\n  }\n\n  // Creates a subtask that must be completed as part of this (bigger) task\n  addChildTask(options: ProgressOptions) {\n    options = {\n      parent: this,\n      ...options,\n    };\n    const child = new Progress(options);\n    this.allTasks.push(child);\n    this.reportChildState();\n    return child;\n  }\n\n  // Dumps the tree, for debug\n  dump(\n    stream: NodeJS.WriteStream,\n    options?: { skipDone: boolean },\n    prefix?: string,\n  ) {\n    if (options && options.skipDone && this.isDone) {\n      return;\n    }\n\n    if (prefix) {\n      stream.write(prefix);\n    }\n    const end = this.state.end || '?';\n    stream.write(\"Task [\" + this.title + \"] \" + this.state.current + \"/\" + end\n      + (this.isDone ? \" done\" : \"\") +\"\\n\");\n    if (this.allTasks.length) {\n      this.allTasks.forEach(child => {\n        child.dump(stream, options, (prefix || '') + '  ');\n      });\n    }\n  }\n\n  // Receives a state report indicating progress of self\n  reportProgress(state: ProgressState) {\n    this.selfState = state;\n\n    this.updateTotalState();\n\n    // Nudge the spinner/progress bar, but don't yield (might not be safe to yield)\n    require('./console.js').Console.nudge(false);\n\n    this.notifyState();\n  }\n\n  // Subscribes a watcher to changes\n  addWatcher(watcher: ProgressWatcher) {\n    this.watchers.push(watcher);\n  }\n\n  // Notifies watchers & parents\n  private notifyState() {\n    if (this.parent) {\n      this.parent.reportChildState();\n    }\n\n    if (this.watchers.length) {\n      this.watchers.forEach(watcher => {\n        watcher(this.state);\n      });\n    }\n  }\n\n  // Recomputes state, incorporating children's states\n  private updateTotalState() {\n    let allChildrenDone = true;\n    const state = { ...this.selfState };\n    this.allTasks.forEach(child => {\n      const childState = child.state;\n\n      if (!child.isDone) {\n        allChildrenDone = false;\n      }\n\n      state.current += childState.current;\n      if (state.end !== undefined) {\n        if (childState.done) {\n          state.end += childState.current;\n        } else if (childState.end !== undefined) {\n          state.end += childState.end;\n        } else {\n          state.end = undefined;\n        }\n      }\n    });\n\n    this.isDone = allChildrenDone && !!this.selfState.done;\n    if (!allChildrenDone) {\n      state.done = false;\n    }\n\n    if (!state.done && this.state.done) {\n      // This shouldn't happen\n      throw new Error(\"Progress transition from done => !done\");\n    }\n\n    this.state = state;\n  }\n\n  // Called by a child when its state changes\n  private reportChildState() {\n    this.updateTotalState();\n    this.notifyState();\n  }\n\n  getState() {\n    return this.state;\n  }\n}\n"],"sourceRoot":"","file":"tools/console/progress.js.map"}