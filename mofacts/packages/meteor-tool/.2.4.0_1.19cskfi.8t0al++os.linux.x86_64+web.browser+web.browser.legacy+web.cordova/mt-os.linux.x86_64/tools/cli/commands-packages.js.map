{"version":3,"sources":["/tools/cli/commands-packages.js"],"names":["ensureDevBundleDependencies","newPluginId","splitPluginsAndPackages","module","link","v","disableNativeWatcher","updateMeteorToolSymlink","main","require","_","files","buildmessage","auth","config","utils","httpHelpers","compiler","catalog","catalogRemote","isopack","updater","Console","projectContextModule","colonConverter","catalogUtils","release","packageVersionParser","packageMapModule","packageClient","tropohouse","getReleaseOrPackageRecord","name","rec","official","getPackage","rel","getReleaseTrack","record","isRelease","refreshOfficialCatalogOrDie","options","refreshOrWarn","error","ExitWithCode","removeIfEndsWith","s","suffix","endsWith","substring","length","registerCommand","catalogRefresh","Refresh","OnceAtStart","ignoreErrors","type","Boolean","projectContext","ProjectContext","projectDir","appDir","mkdtemp","neverWriteProjectConstraintsFile","neverWritePackageMap","allowIncompatibleUpdate","captureAndExit","initializeCatalog","addPackages","packageNames","projectConstraintsFile","addConstraints","map","p","parsePackageConstraint","localCatalog","getAllPackageNames","current","isProperRelease","Object","keys","getPackages","prepareProjectForBuild","requiresApp","Never","packageMapDelta","displayOnConsole","updatePackageMetadata","packageSource","conn","version","existingRecord","getVersion","command","readmeInfo","processReadme","hash","blankHash","connection","info","minArgs","maxArgs","create","update","requiresPackage","tempProjectDir","explicitlyAddedLocalPackageDirs","packageDir","packageMapFilename","pathJoin","alwaysWritePackageMap","forceIncludeCordovaUnibuild","lintPackageWithSourceRoot","process","env","METEOR_TEST_NO_PUBLISH","loggedInPackagesConnection","err","handlePackageServerConnectionError","localVersionRecord","getVersionBySourceRoot","packageName","getPackageSource","Error","versionExplicitlyProvided","packageInfo","match","isLoggedIn","properName","loggedInUsername","each","testName","getConstraint","warnings","getLintingMessagesForLocalPackages","hasMessages","arrowError","printMessages","arrowInfo","isopackCache","getIsopack","binary","platformSpecific","publishPackage","new","existingVersion","doNotPublishBuild","close","warn","labelWarn","url","indent","all","args","split","ShowUsage","versionString","pkgVersion","source","has","inCheckout","exit","SpringboardToSpecificRelease","releaseName","sourceTarball","enterJob","getUrlWithResuming","encoding","jobHasMessages","sourcePath","extractTarGz","convert","exists","versionsFile","copyFile","title","isopk","buildArchitectures","createAndPublishBuiltPackage","relConf","data","readFile","JSON","parse","e","message","description","orderKey","defaultOrderKeyForReleaseVersion","recommended","track","DEFAULT_TRACK","start","slice","trackRecord","amIAuthorized","packages","tool","ignorePackageDirsEnvVar","allPackagesWithTests","allPackages","getAllNonTestPackageNames","includeNonCore","toPublish","oldVersionRecord","newVersion","push","existingBuild","getBuildWithPreciseBuildArchitectures","somethingChanged","bundleBuildResult","bundleBuild","treeHash","build","unfinishedBuilds","callPackageServerBM","patchFrom","gitTag","getPackageServerFilePrefix","indexOf","runGitInCheckout","fail","isEmpty","showJson","showTree","suffixes","topLevel","expandedAbove","weak","skipped","missing","jsonOut","showWeak","showDetails","packageDetails","Map","packageMap","eachPackage","set","projectCatalog","topLevelSet","Set","eachConstraint","constraint","add","package","dontExpand","values","printPackage","packageToPrint","isWeak","indent1","indent2","parent","depsObj","dependencies","deps","sort","filter","dep","isIsobuildFeaturePackage","references","weakRef","every","r","expandedAlready","shouldExpand","entry","mapInfo","getInfo","isLocal","kind","infoSource","assign","local","newerVersion","getNewerVersion","entries","forEach","key","value","index","last","child","get","newIndent1","newIndent2","topLevelNames","Array","from","topLevelPackage","delete","console","stringify","items","newVersionsAvailable","anyBuiltLocally","versionRecord","versionAddendum","cordovaPluginsFile","getPluginVersions","printPackageList","bulletPoint","curVersion","whichCatalog","latest","test","getLatestVersion","getLatestMainlineVersion","latestVersion","lessThan","maybeUpdateRelease","isCheckout","releaseTrack","forced","latestRelease","latestKnown","isRecommended","patch","releaseVersion","getReleaseVersion","newerRecommendedReleases","getLaterReleaseVersions","SpringboardToLatestRelease","getDisplayName","noPrefix","readProjectMetadata","releaseFile","fullReleaseName","maybeTheLatestRelease","explicit","normalReleaseSpecified","updateTo","patchReleaseVersion","patchRecord","noWrap","displayReleaseName","upgraders","upgradersToRun","releaseRecord","updateReleaseConstraints","writeReleaseFileAndDevBundleLink","pathBasename","upgrader","runUpgrader","finishedUpgraders","appendUpgraders","releaseInfo","getSortedRecommendedReleaseVersions","requiresRelease","Infinity","releaseUpdateStatus","upgradePackageNames","upgradeIndirectDepPatchVersions","packageMapFile","getCachedVersions","releaseRecordForConstraints","upgradePackagesWithoutCordova","isEqual","reset","releaseForConstraints","resolveConstraints","hasChanges","topLevelPkgSet","nonlatestDirectDeps","nonlatestIndirectDeps","deprecatedDeps","selectedVersion","deprecated","deprecatedMessage","printItem","item","join","hidden","log","tryToDownloadUpdate","showBanner","printErrors","default","wipeAllPackages","checkoutVersion","remoteLatestVersion","exitCode","plugins","pluginsToAdd","packagesToAdd","cordovaPluginAdd","changed","target","id","newId","isValidVersion","forCordova","write","infoMessages","constraintsToAdd","messages","capture","packageReq","useBuildmessage","packageRecord","versionConstraint","alternatives","subConstr","constraintString","explainIfRefreshFailed","pluginsToRemove","cordovaPluginRemove","packagesToRemove","removePackages","String","short","remove","list","fullRecord","callPackageServer","maintainers","user","username","rawInfo","releaseNameAndVersion","outputDirectory","convertToStandardPath","trackAndVersion","splitReleaseName","toolPackageVersion","parsePackageAndVersion","toolPackage","toolVersion","toolPkgBuilds","getAllBuilds","buildArches","pluck","osArches","buildArch","subArches","subArch","substr","arch","includes","osArch","pkgName","getBuildsForArches","mkdir_p","dataTmpdir","tmpDataFile","tmpCatalog","RemoteCatalog","initialize","packageStorage","updateServerPackageData","forceRecommendRelease","closePermanently","PackageMap","fromReleaseVersion","tmpdir","targetPlatform","tmpTropo","Tropohouse","platform","downloadPackagesMissingFromMap","serverArchitectures","getPackageStorage","root","toolIsopackPath","packagePath","toolIsopack","Isopack","initFromPath","toolRecord","findWhere","toolsOnDisk","linkToLatestMeteor","path","unpacked","cp_r","createTarball","bannersFile","bannersData","banners","unrecommend","versions","nSplit","getSortedVersions","status","success"],"mappings":"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","sourcesContent":["var main = require('./main.js');\nvar _ = require('underscore');\nvar files = require('../fs/files');\nvar buildmessage = require('../utils/buildmessage.js');\nvar auth = require('../meteor-services/auth.js');\nvar config = require('../meteor-services/config.js');\nvar utils = require('../utils/utils.js');\nvar httpHelpers = require('../utils/http-helpers.js');\nvar compiler = require('../isobuild/compiler.js');\nvar catalog = require('../packaging/catalog/catalog.js');\nvar catalogRemote = require('../packaging/catalog/catalog-remote.js');\nvar isopack = require('../isobuild/isopack.js');\nvar updater = require('../packaging/updater.js');\nvar Console = require('../console/console.js').Console;\nvar projectContextModule = require('../project-context.js');\nvar colonConverter = require('../utils/colon-converter.js');\nvar catalogUtils = require('../packaging/catalog/catalog-utils.js');\n\nvar release = require('../packaging/release.js');\nvar packageVersionParser = require('../packaging/package-version-parser.js');\nvar updater = require('../packaging/updater.js');\nvar packageMapModule = require('../packaging/package-map.js');\nvar packageClient = require('../packaging/package-client.js');\nvar tropohouse = require('../packaging/tropohouse.js');\n\nimport {\n  ensureDevBundleDependencies,\n  newPluginId,\n  splitPluginsAndPackages,\n} from '../cordova/index.js';\nimport { disableNativeWatcher } from '../fs/safe-watcher';\nimport { updateMeteorToolSymlink } from \"../packaging/updater.js\";\n\n// For each release (or package), we store a meta-record with its name,\n// maintainers, etc. This function takes in a name, figures out if\n// it is a release or a package, and fetches the correct record.\n//\n// Specifically, it returns an object with the following keys:\n//  - record : (a package or version record)\n//  - isRelease : true if it is a release instead of a package.\nvar getReleaseOrPackageRecord = function(name) {\n  var rec = catalog.official.getPackage(name);\n  var rel = false;\n  if (!rec) {\n    // Not a package! But is it a release track?\n    rec = catalog.official.getReleaseTrack(name);\n    if (rec) {\n      rel = true;\n    }\n  }\n  return { record: rec, isRelease: rel };\n};\n\n// Seriously, this dies if it can't refresh. Only call it if you're sure you're\n// OK that the command doesn't work while offline.\nvar refreshOfficialCatalogOrDie = function (options) {\n  if (!catalog.refreshOrWarn(options)) {\n    Console.error(\n      \"This command requires an up-to-date package catalog. Exiting.\");\n    throw new main.ExitWithCode(1);\n  }\n};\n\nvar removeIfEndsWith = function (s, suffix) {\n  if (s.endsWith(suffix)) {\n    return s.substring(0, s.length - suffix.length);\n  }\n  return s;\n};\n\n// Internal use only. Makes sure that your Meteor install is totally good to go\n// (is \"airplane safe\"). Specifically, it:\n//    - Builds all local packages, even those you're not using in your current\n//      app. (If you're not in an app, it still does this even though there is\n//      no persistent IsopackCache, because this still causes npm dependencies\n//      to be downloaded.)\n//    - Ensures that all packages in your current release are downloaded, even\n//      those you're not using in your current app.\n//    - Ensures that all packages used by your app (if any) are downloaded\n// (It also ensures you have the dev bundle downloaded, just like every command\n// in a checkout.)\n//\n// The use case is, for example, cloning an app from github, running this\n// command, then getting on an airplane.\n//\n// This does NOT guarantee a *re*build of all local packages (though it will\n// download any new dependencies): we still trust the buildinfo files in your\n// app's IsopackCache. If you want to rebuild all local packages that are used\n// in your app, call meteor rebuild. That said, rebuild should only be necessary\n// if there's a bug in the build tool... otherwise, packages should be rebuilt\n// whenever necessary!\nmain.registerCommand({\n  name: '--get-ready',\n  catalogRefresh: new catalog.Refresh.OnceAtStart({ ignoreErrors: false }),\n  options: {\n    'allow-incompatible-update': { type: Boolean }\n  }\n}, function (options) {\n  disableNativeWatcher();\n\n  // If we're in an app, make sure that we can build the current app. Otherwise\n  // just make sure that we can build some fake app.\n  var projectContext = new projectContextModule.ProjectContext({\n    projectDir: options.appDir || files.mkdtemp('meteor-get-ready'),\n    neverWriteProjectConstraintsFile: true,\n    neverWritePackageMap: true,\n    allowIncompatibleUpdate: options['allow-incompatible-update']\n  });\n  main.captureAndExit(\"=> Errors while initializing project:\", function () {\n    projectContext.initializeCatalog();\n  });\n\n  // Add every local package (including tests) and every release package to this\n  // project. (Hopefully they can all be built at once!)\n  var addPackages = function (packageNames) {\n    projectContext.projectConstraintsFile.addConstraints(\n      _.map(packageNames, function (p) {\n        return utils.parsePackageConstraint(p);\n      })\n    );\n  };\n  addPackages(projectContext.localCatalog.getAllPackageNames());\n  if (release.current.isProperRelease()) {\n    addPackages(Object.keys(release.current.getPackages()));\n  }\n\n  // Now finish building and downloading.\n  main.captureAndExit(\"=> Errors while initializing project:\", function () {\n    projectContext.prepareProjectForBuild();\n  });\n  // We don't display package changes because they'd include all these packages\n  // not actually in the app!\n  // XXX Maybe we should do a first pass that only builds packages actually in\n  // the app and does display the PackageMapDelta?\n  return 0;\n});\n\n\n// Internal use only. A simpler version of --get-ready which doesn't try to also\n// build/download local and release packages that aren't currently used. Just\n// builds and downloads packages used by the current app.\nmain.registerCommand({\n  name: '--prepare-app',\n  requiresApp: true,\n  catalogRefresh: new catalog.Refresh.Never(),\n  options: {\n    'allow-incompatible-update': { type: Boolean }\n  }\n}, function (options) {\n  var projectContext = new projectContextModule.ProjectContext({\n    projectDir: options.appDir,\n    allowIncompatibleUpdate: options['allow-incompatible-update']\n  });\n\n  main.captureAndExit(\"=> Errors while initializing project:\", function () {\n    projectContext.prepareProjectForBuild();\n  });\n\n  projectContext.packageMapDelta.displayOnConsole();\n});\n\n\n///////////////////////////////////////////////////////////////////////////////\n// publish a package\n///////////////////////////////////////////////////////////////////////////////\n\n// Updates the metadata for a given package version. Prints user-friendly\n// messages if certain new values are invalid; calls to the packageClient to\n// perform the actual update.\n//\n// Takes in a packageSource and a connection to the package server. Returns 0 on\n// success and an exit code on failure.\nvar updatePackageMetadata = function (packageSource, conn) {\n    var name = packageSource.name;\n    var version = packageSource.version;\n\n    // You can't change the metadata of a record that doesn't exist.\n    var existingRecord =\n          catalog.official.getVersion(name, version);\n    if (! existingRecord) {\n      Console.error(\n        \"You can't call\",  Console.command(\"`meteor publish --update`\"),\n        \"on version \" + version + \" of \" + \"package '\" + name +\n          \"' without publishing it first.\");\n      return 1;\n    }\n\n    // Load in the user's documentation, and check that it isn't blank.\n    var readmeInfo;\n    main.captureAndExit(\n      \"=> Errors while publishing:\", \"reading documentation\",\n      function () {\n       readmeInfo = packageSource.processReadme();\n    });\n\n    // You are still not allowed to upload a blank README.md.\n    if (readmeInfo && readmeInfo.hash === files.blankHash) {\n      Console.error(\n        \"Your documentation file is blank, so users may have trouble\",\n        \"figuring out how to use your package. Please fill it out, or\",\n        \"set 'documentation: null' in your Package.describe.\");\n      return 1;\n    };\n\n    // Finally, call to the server.\n    main.captureAndExit(\n      \"=> Errors while publishing:\",\n      \"updating package metadata\",\n      function () {\n        packageClient.updatePackageMetadata({\n          packageSource: packageSource,\n          readmeInfo: readmeInfo,\n          connection: conn\n        });\n    });\n\n    Console.info(\n      \"Success. You can take a look at the new metadata by running\",\n      Console.command(\"'meteor show \" + name + \"@\" + version + \"'\"),\n      \"outside the current project directory.\");\n\n    // Refresh, so that we actually learn about the thing we just published.\n    refreshOfficialCatalogOrDie();\n    return 0;\n};\n\nmain.registerCommand({\n  name: 'publish',\n  minArgs: 0,\n  maxArgs: 0,\n  options: {\n    create: { type: Boolean },\n    update: { type: Boolean },\n    // This is similar to publish-for-arch, but uses the source code you have\n    // locally (and other local packages you may have) instead of downloading\n    // the source bundle. It does verify that the source is the same, though.\n    // Good for bootstrapping things in the core release.\n    'existing-version': { type: Boolean },\n    // This is the equivalent of \"sudo\": make sure that administrators don't\n    // accidentally put their personal packages in the top level namespace.\n    'top-level': { type: Boolean },\n    // An option to publish despite linting errors\n    'no-lint': { type: Boolean }\n  },\n  requiresPackage: true,\n  // We optimize the workflow by using up-to-date package data to weed out\n  // obviously incorrect submissions before they ever hit the wire.\n  catalogRefresh: new catalog.Refresh.OnceAtStart({ ignoreErrors: false }),\n  'allow-incompatible-update': { type: Boolean }\n}, function (options) {\n  if (options.create && options['existing-version']) {\n    // Make up your mind!\n    Console.error(\n      \"The --create and --existing-version options cannot\",\n      \"both be specified.\");\n    return 1;\n  }\n\n  if (options.update && options.create) {\n    Console.error(\n      \"The --create and --update options cannot both be specified.\");\n    return 1;\n  }\n\n  if (options.update && options[\"existing-version\"]) {\n    Console.error(\n      \"The --update option implies that the version already exists.\",\n      \"You do not need to use the --existing-version flag with --update.\");\n    return 1;\n  }\n\n  var projectContext;\n  if (! options.appDir) {\n    // We're not in an app? OK, make a temporary app directory, and make sure\n    // that the current package directory is found by its local catalog.\n    var tempProjectDir = files.mkdtemp('meteor-package-build');\n    projectContext = new projectContextModule.ProjectContext({\n      projectDir: tempProjectDir,  // won't have a packages dir, that's OK\n      explicitlyAddedLocalPackageDirs: [options.packageDir],\n      packageMapFilename: files.pathJoin(options.packageDir, '.versions'),\n      // We always want to write our '.versions' package map, overriding a\n      // comparison against the value of a release file that doesn't exist.\n      alwaysWritePackageMap: true,\n      // When we publish, we should always include web.cordova unibuilds, even\n      // though this temporary directory does not have any cordova platforms\n      forceIncludeCordovaUnibuild: true,\n      allowIncompatibleUpdate: options['allow-incompatible-update'],\n      lintPackageWithSourceRoot: options['no-lint'] ? null : options.packageDir,\n    });\n  } else {\n    // We're in an app; let the app be our context, but make sure we don't\n    // overwrite .meteor/packages or .meteor/versions when we add some temporary\n    // constraints (which ensure that we can actually build the package and its\n    // tests).\n    projectContext = new projectContextModule.ProjectContext({\n      projectDir: options.appDir,\n      neverWriteProjectConstraintsFile: true,\n      neverWritePackageMap: true,\n      // When we publish, we should always include web.cordova unibuilds, even\n      // if this project does not have any cordova platforms\n      forceIncludeCordovaUnibuild: true,\n      allowIncompatibleUpdate: options['allow-incompatible-update'],\n      lintPackageWithSourceRoot: options['no-lint'] ? null : options.packageDir,\n    });\n  }\n\n  main.captureAndExit(\"=> Errors while initializing project:\", function () {\n    // Just get up to initializing the catalog. We're going to mutate the\n    // constraints file a bit before we prepare the build.\n    projectContext.initializeCatalog();\n  });\n\n  if (!process.env.METEOR_TEST_NO_PUBLISH) {\n    // Connect to the package server and log in.\n    try {\n      var conn = packageClient.loggedInPackagesConnection();\n    } catch (err) {\n      packageClient.handlePackageServerConnectionError(err);\n      return 1;\n    }\n    if (! conn) {\n      Console.error('No connection: Publish failed.');\n      return 1;\n    }\n  }\n\n  var localVersionRecord = projectContext.localCatalog.getVersionBySourceRoot(\n    options.packageDir);\n  if (! localVersionRecord) {\n    // OK, we're inside a package (ie, a directory with a package.js) and we're\n    // inside an app (ie, a directory with a file named .meteor/packages) but\n    // the package is not on the app's search path (ie, it's probably not\n    // directly inside the app's packages directory).  That's kind of\n    // weird. Let's not allow this.\n    Console.error(\n      \"The package you are in appears to be inside a Meteor app but is not \" +\n       \"in its packages directory. You may only publish packages that are \" +\n       \"entirely outside of a project or that are loaded by the project \" +\n       \"that they are inside.\");\n    return 1;\n  }\n  var packageName = localVersionRecord.packageName;\n  var packageSource = projectContext.localCatalog.getPackageSource(packageName);\n  if (! packageSource) {\n    throw Error(\"no PackageSource for \" + packageName);\n  }\n\n  // Anything published to the server must explicitly set a version.\n  if (! packageSource.versionExplicitlyProvided) {\n    Console.error(\"A version must be specified for the package. Set it with \" +\n                  \"Package.describe.\");\n    return 1;\n  }\n\n  // If we just want to update the package metadata, then we have all we\n  // need. Don't bother building the package, just update the metadata and\n  // return the result.\n  if (options.update) {\n    return updatePackageMetadata(packageSource, conn);\n  }\n\n  // Fail early if the package record exists, but we don't think that it does\n  // and are passing in the --create flag!\n  if (options.create) {\n    var packageInfo = catalog.official.getPackage(packageName);\n    if (packageInfo) {\n      Console.error(\n        \"Package already exists. To create a new version of an existing \"+\n        \"package, do not use the --create flag!\");\n      return 2;\n    }\n\n    if (!options['top-level'] && !packageName.match(/:/)) {\n      Console.error(\n        \"Only administrators can create top-level packages without an\",\n        \"account prefix. (To confirm that you wish to create a top-level\",\n        \"package with no account prefix, please run this command again\",\n        \"with the --top-level option.)\");\n      // You actually shouldn't be able to get here without being logged in, but\n      // it seems poor form to assume anything like that for the point of a\n      // brief error message.\n      if (auth.isLoggedIn()) {\n        var properName =  auth.loggedInUsername() + \":\" + packageName;\n        Console.error(\n          \"\\nDid you mean to create \" + properName + \" instead?\"\n       );\n      }\n      return 2;\n    }\n  }\n\n  // Make sure that both the package and its test (if any) are actually built.\n  _.each([packageName, packageSource.testName], function (name) {\n    if (! name) {\n      // for testName\n      return;\n    }\n\n    // If we're already using this package, that's OK; no need to override.\n    if (projectContext.projectConstraintsFile.getConstraint(name)) {\n      return;\n    }\n    projectContext.projectConstraintsFile.addConstraints(\n      [utils.parsePackageConstraint(name)]);\n  });\n\n  // Now resolve constraints and build packages.\n  main.captureAndExit(\"=> Errors while initializing project:\", function () {\n    projectContext.prepareProjectForBuild();\n  });\n  // We don't display the package map delta here, because it includes adding the\n  // package's test and all the test's dependencies.\n\n  if (!options['no-lint']) {\n    const warnings = projectContext.getLintingMessagesForLocalPackages();\n    if (warnings && warnings.hasMessages()) {\n      Console.arrowError(\n        \"Errors linting your package; run with --no-lint to ignore.\");\n      Console.printMessages(warnings);\n      return 1;\n    } else if (warnings) {\n      Console.arrowInfo('Linted your package. No linting errors.');\n    }\n  }\n\n  if (process.env.METEOR_TEST_NO_PUBLISH) {\n    Console.error(\n      'Would publish the package at this point, but since the ' +\n      'METEOR_TEST_NO_PUBLISH environment variable is set, just going ' +\n      'to finish here.');\n    return 0;\n  }\n\n  var isopack = projectContext.isopackCache.getIsopack(packageName);\n  if (! isopack) {\n    // This shouldn't happen; we already threw a different error if the package\n    // wasn't even in the local catalog, and we explicitly added this package to\n    // the project's constraints file, so it should have been built.\n    throw Error(\"package not built even though added to constraints?\");\n  }\n\n  // We have initialized everything, so perform the publish operation.\n  var binary = isopack.platformSpecific();\n  main.captureAndExit(\n    \"=> Errors while publishing:\",\n    \"publishing the package\",\n    function () {\n      packageClient.publishPackage({\n        projectContext: projectContext,\n        packageSource: packageSource,\n        connection: conn,\n        new: options.create,\n        existingVersion: options['existing-version'],\n        doNotPublishBuild: binary && !options['existing-version']\n      });\n    });\n\n  Console.info('Published ' + packageName + '@' + localVersionRecord.version +\n               '.');\n\n  // We are only publishing one package, so we should close the connection, and\n  // then exit with the previous error code.\n  conn.close();\n\n  // Warn the user if their package is not good for all architectures.\n  if (binary && options['existing-version']) {\n    // This is an undocumented command that you are not supposed to run! We\n    // assume that you know what you are doing, if you ran it, and are OK with\n    // overrwriting normal compatibilities.\n    Console.warn();\n    Console.labelWarn(\"Your package contains binary code.\");\n  } else if (binary) {\n    // Normal publish flow. Tell the user nicely.\n    Console.warn();\n    Console.warn(\"This package contains binary code which must be\",\n      \"compiled on the architecture it will eventually run on.\");\n    Console.warn();\n    Console.info(\n      \"Meteor 1.4 and higher will automatically compile packages\",\n      \"with binary dependencies when they are installed, assuming\",\n      \"the target machine has a basic compiler toolchain.\");\n    Console.info();\n    Console.info(\"To see the requirements for this compilation step,\",\n      \"consult the platform requirements for 'node-gyp':\");\n    Console.info(\n      Console.url(\"https://github.com/nodejs/node-gyp\"),\n      Console.options({ indent: 2 })\n    );\n    Console.info();\n  }\n\n  // Refresh, so that we actually learn about the thing we just published.\n  refreshOfficialCatalogOrDie();\n\n  return 0;\n});\n\n\nmain.registerCommand({\n  name: 'publish-for-arch',\n  minArgs: 1,\n  maxArgs: 1,\n  catalogRefresh: new catalog.Refresh.OnceAtStart({ ignoreErrors: false }),\n  // in theory, this option shouldn't be necessary, because when you run\n  // publish-for-arch you want to reproduce the exact same setup as when\n  // you ran 'publish', but support the option in case it comes up.\n  'allow-incompatible-update': { type: Boolean }\n}, function (options) {\n  // argument processing\n  var all = options.args[0].split('@');\n  if (all.length !== 2) {\n    Console.error(\n      'Incorrect argument. Please use the form of <packageName>@<version>');\n    throw new main.ShowUsage;\n  }\n  var name = all[0];\n  var versionString = all[1];\n\n  var packageInfo = catalog.official.getPackage(name);\n  if (! packageInfo) {\n    Console.error(\n      \"You can't call \" + Console.command(\"`meteor publish-for-arch`\") +\n      \"on package '\" + name + \"' without \" +\" publishing it first.\"\n    );\n    Console.error();\n    Console.error(\n      \"To publish the package, run \" +\n       Console.command(\"`meteor publish --create` \") +\n      \"from the package directory.\");\n    Console.error();\n    return 1;\n  }\n\n  var pkgVersion = catalog.official.getVersion(name, versionString);\n  if (! pkgVersion) {\n    Console.error(\n      \"You can't call\",  Console.command(\"`meteor publish-for-arch`\"),\n      \"on version \" + versionString + \" of \" + \"package '\" + name +\n      \"' without publishing it first.\");\n    Console.error();\n    Console.error(\n      \"To publish the package, run \" + Console.command(\"`meteor publish ` \") +\n      \"from the package directory.\");\n    Console.error();\n    return 1;\n  }\n\n  if (! pkgVersion.source || ! pkgVersion.source.url) {\n    Console.error(\n      \"There is no source uploaded for\",\n      name + '@' + versionString);\n    return 1;\n  }\n\n  // No releaseName (not even null): this predates the isopack-cache\n  // refactorings. Let's just springboard to Meteor 1.0 and let it deal with any\n  // further springboarding based on reading a nested json file.\n  if (! _.has(pkgVersion, 'releaseName')) {\n    if (files.inCheckout()) {\n      Console.error(\n        \"This package was published from an old version of meteor, \" +\n        \"but you are running from checkout! Consider running \" +\n        Console.command(\"`meteor --release 1.0`\"),\n        \"so we can springboard correctly.\");\n      process.exit(1);\n    }\n    throw new main.SpringboardToSpecificRelease(\"METEOR@1.0\");\n  }\n\n  if (pkgVersion.releaseName === null) {\n    if (! files.inCheckout()) {\n      Console.error(\n        \"This package was published from a checkout of meteor!\",\n        \"The tool cannot replicate that environment and will not even try.\",\n        \"Please check out meteor at the \" +\n        \"corresponding git commit and try again.\");\n      process.exit(1);\n    }\n  } else if (files.inCheckout()) {\n    Console.error(\n      \"This package was published from a built version of meteor, \" +\n      \"but you are running from checkout! Consider running from a \" +\n      \"proper Meteor release with \" +\n      Console.command(\"`meteor --release \" + pkgVersion.releaseName + \"`\"),\n      \"so we can springboard correctly.\");\n    process.exit(1);\n  } else if (pkgVersion.releaseName !== release.current.name) {\n    // We are in a built release, and so is the package, but it's a different\n    // one. Springboard!\n    throw new main.SpringboardToSpecificRelease(pkgVersion.releaseName);\n  }\n\n  // OK, either we're running from a checkout and so was the published package,\n  // or we're running from the same release as the published package.\n\n  // Download the source to the package.\n  var sourceTarball = buildmessage.enterJob(\"downloading package source\", function () {\n    return httpHelpers.getUrlWithResuming({\n      url: pkgVersion.source.url,\n      encoding: null\n    });\n  });\n\n  if (buildmessage.jobHasMessages()) {\n    return 1;\n  }\n\n  var sourcePath = files.mkdtemp('package-source');\n  buildmessage.enterJob(\"extracting package source\", () => {\n    // XXX check tarballHash!\n    files.extractTarGz(sourceTarball, sourcePath);\n  });\n\n  // XXX Factor out with packageClient.bundleSource so that we don't\n  // have knowledge of the tarball structure in two places.\n  var packageDir = files.pathJoin(sourcePath, colonConverter.convert(name));\n  if (! files.exists(packageDir)) {\n    Console.error('Malformed source tarball');\n    return 1;\n  }\n\n  var tempProjectDir = files.mkdtemp('meteor-package-arch-build');\n  // Copy over a version lock file from the source tarball.\n  var versionsFile = files.pathJoin(packageDir, '.versions');\n  if (! files.exists(versionsFile)) {\n    Console.error(\n      \"This package has no valid version lock file: are you trying to use \" +\n      \"publish-for-arch on a core package? Publish-for-arch cannot \" +\n      \"guarantee safety. Please use\",\n      Console.command(\"'meteor publish --existing-version'\"), \"instead.\");\n    process.exit(1);\n  }\n  files.copyFile(files.pathJoin(packageDir, '.versions'),\n                 files.pathJoin(tempProjectDir, '.meteor', 'versions'));\n\n  // Set up the project.\n  var projectContext = new projectContextModule.ProjectContext({\n    projectDir: tempProjectDir,\n    explicitlyAddedLocalPackageDirs: [packageDir],\n    // When we publish, we should always include web.cordova unibuilds, even\n    // though this temporary directory does not have any cordova platforms\n    forceIncludeCordovaUnibuild: true,\n    allowIncompatibleUpdate: options['allow-incompatible-update']\n  });\n  // Just get up to initializing the catalog. We're going to mutate the\n  // constraints file a bit before we prepare the build.\n  main.captureAndExit(\"=> Errors while initializing project:\", function () {\n    projectContext.initializeCatalog();\n  });\n  projectContext.projectConstraintsFile.addConstraints(\n    [utils.parsePackageConstraint(name + \"@=\" + versionString)]);\n  main.captureAndExit(\"=> Errors while initializing project:\", function () {\n    projectContext.prepareProjectForBuild();\n  });\n  projectContext.packageMapDelta.displayOnConsole({\n    title: \"Some package versions changed since this package was published!\"\n  });\n\n  var isopk = projectContext.isopackCache.getIsopack(name);\n  if (! isopk) {\n    throw Error(\"didn't build isopack for \" + name);\n  }\n\n  var conn;\n  try {\n    conn = packageClient.loggedInPackagesConnection();\n  } catch (err) {\n    packageClient.handlePackageServerConnectionError(err);\n    return 1;\n  }\n\n  main.captureAndExit(\n    \"=> Errors while publishing build:\",\n    (\"publishing package \" + name + \" for architecture \"\n     + isopk.buildArchitectures()),\n    function () {\n      packageClient.createAndPublishBuiltPackage(\n        conn, isopk, projectContext.isopackCache);\n    }\n  );\n\n  Console.info('Published ' + name + '@' + versionString + '.');\n\n  refreshOfficialCatalogOrDie();\n  return 0;\n});\n\nmain.registerCommand({\n  name: 'publish-release',\n  minArgs: 1,\n  maxArgs: 1,\n  options: {\n    'create-track': { type: Boolean },\n    'from-checkout': { type: Boolean },\n    // It is going to produce a fake error and nothing will be published\n    'dry-run': { type: Boolean },\n    // Normally the publish-release script will complain if the source of\n    // a core package differs in any way from what was previously\n    // published for the current version of the package. However, if the\n    // package was deliberately republished independently from a Meteor\n    // release, and those changes have not yet been merged to the master\n    // branch, then the complaint may be spurious. If you have verified\n    // that current release contains no meaningful changes (since the\n    // previous official release) to the packages that are being\n    // complained about, then you can pass the --skip-tree-hashing flag to\n    // disable the treeHash check.\n    'skip-tree-hashing': { type: Boolean },\n  },\n  catalogRefresh: new catalog.Refresh.OnceAtStart({ ignoreErrors: false })\n}, function (options) {\n  try {\n    var conn = packageClient.loggedInPackagesConnection();\n  } catch (err) {\n    packageClient.handlePackageServerConnectionError(err);\n    return 1;\n  }\n\n  var relConf = {};\n\n  // Let's read the json release file. It should, at the very minimum contain\n  // the release track name, the release version and some short freeform\n  // description.\n  try {\n    var data = files.readFile(options.args[0], 'utf8');\n    relConf = JSON.parse(data);\n  } catch (e) {\n    Console.error(\"Could not parse release file: \" + e.message);\n    return 1;\n  }\n\n  // Fill in the order key and any other generated release.json fields.\n  main.captureAndExit(\n    \"=> Errors in release schema:\",\n    \"double-checking release schema\",\n    function () {\n      // Check that the schema is valid -- release.json contains all the\n      // required fields, does not contain contradicting information, etc.\n      // XXX Check for unknown keys?\n      if (! _.has(relConf, 'track')) {\n        buildmessage.error(\n          \"Configuration file must specify release track. (track).\");\n      }\n      if (! _.has(relConf, 'version')) {\n        buildmessage.error(\n          \"Configuration file must specify release version. (version).\");\n      }\n      if (! _.has(relConf, 'description')) {\n        buildmessage.error(\n          \"Configuration file must contain a description (description).\");\n      } else if (relConf.description.length > 100) {\n        buildmessage.error(\"Description must be under 100 characters.\");\n      }\n      if (! options['from-checkout']) {\n        if (! _.has(relConf, 'tool')) {\n          buildmessage.error(\n            \"Configuration file must specify a tool version (tool) unless in \" +\n              \"--from-checkout mode.\");\n        }\n        if (! _.has(relConf, 'packages')) {\n          buildmessage.error(\n            \"Configuration file must specify package versions (packages) \" +\n              \"unless in --from-checkout mode.\");\n        }\n      }\n\n      // If you didn't specify an orderKey and it's compatible with our\n      // conventional orderKey generation algorithm, use the algorithm. If you\n      // explicitly specify orderKey: null, don't include one.\n      if (! _.has(relConf, 'orderKey')) {\n        relConf.orderKey = utils.defaultOrderKeyForReleaseVersion(\n          relConf.version);\n      }\n      // This covers both the case of \"explicitly specified {orderKey: null}\"\n      // and \"defaultOrderKeyForReleaseVersion returned null\".\n      if (relConf.orderKey === null) {\n        delete relConf.orderKey;\n      }\n\n      if (! _.has(relConf, 'orderKey') && relConf.recommended) {\n        buildmessage.error(\"Recommended releases must have order keys.\");\n      }\n      // On the main release track, we can't name the release anything beginning\n      // with 0.8 and below, because those are taken for pre-troposphere\n      // releases.\n      if ((relConf.track === catalog.DEFAULT_TRACK)) {\n        var start = relConf.version.slice(0,4);\n        if (start === \"0.8.\" || start === \"0.7.\" ||\n            start === \"0.6.\" || start === \"0.5.\") {\n          buildmessage.error(\n            \"It looks like you are trying to publish a pre-package-server \" +\n            \"meteor release. Doing this through the package server is going \" +\n            \"to cause a lot of confusion. Please use the old release process.\");\n        }\n      }\n    }\n  );\n\n  // Let's check if this is a known release track/ a track to which we are\n  // authorized to publish before we do any complicated/long operations, and\n  // before we publish its packages.\n  if (! options['create-track']) {\n    var trackRecord = catalog.official.getReleaseTrack(relConf.track);\n    if (!trackRecord) {\n      Console.error(\n        'There is no release track named ' + relConf.track +\n        '. If you are creating a new track, use the --create-track flag.');\n      return 1;\n    }\n\n    // Check with the server to see if we're organized (we can't due this\n    // locally due to organizations).\n    if (!packageClient.amIAuthorized(relConf.track,conn,  true)) {\n      Console.error('You are not an authorized maintainer of ' +\n                    relConf.track + \".\");\n      Console.error('Only authorized maintainers may publish new versions.');\n      return 1;\n    }\n  }\n\n  // This is sort of a hidden option to just take your entire meteor checkout\n  // and make a release out of it. That's what we do now (that's what releases\n  // meant pre-0.90), and it is very convenient to do that here.\n  //\n  // If you have any unpublished packages at new versions in your checkout, this\n  // WILL PUBLISH THEM at specified versions. (If you have unpublished changes,\n  // including changes to build-time dependencies, but have not incremented the\n  // version number, this will use buildmessage to error and exit.)\n  //\n  // Without any modifications about forks and package names, this particular\n  // option is not very useful outside of Meteor Software. Right now, to run this option on\n  // a non-Meteor Software fork of meteor, someone would probably need to go through and\n  // change the package names to have proper prefixes, etc.\n  if (options['from-checkout']) {\n    // You must be running from checkout to bundle up your checkout as a release.\n    if (!files.inCheckout()) {\n      Console.error(\"Must run from checkout to make release from checkout.\");\n      return 1;\n    };\n\n    // You should not use a release configuration with packages&tool *and* a\n    // from checkout option, at least for now. That's potentially confusing\n    // (which ones did you mean to use) and makes it likely that you did one of\n    // these by accident. So, we will disallow it for now.\n    if (relConf.packages || relConf.tool) {\n      Console.error(\n        \"Setting the --from-checkout option will use the tool and packages \" +\n        \"in your meteor checkout. \" +\n        \"Your release configuration file should not contain that information.\");\n      return 1;\n    }\n\n    // Set up a temporary project context and build everything.\n    var tempProjectDir = files.mkdtemp('meteor-release-build');\n    var projectContext = new projectContextModule.ProjectContext({\n      projectDir: tempProjectDir,  // won't have a packages dir, that's OK\n      // seriously, we only want checkout packages\n      ignorePackageDirsEnvVar: true,\n      // When we publish, we should always include web.cordova unibuilds, even\n      // though this temporary directory does not have any cordova platforms\n      forceIncludeCordovaUnibuild: true\n    });\n\n    // Read metadata and initialize catalog.\n    main.captureAndExit(\"=> Errors while building for release:\", function () {\n      projectContext.initializeCatalog();\n    });\n\n    // Ensure that all packages and their tests are built. (We need to build\n    // tests so that we can include their sources in source tarballs.)\n    var allPackagesWithTests = projectContext.localCatalog.getAllPackageNames();\n    var allPackages = projectContext.localCatalog.getAllNonTestPackageNames({\n      includeNonCore: false,\n    });\n    projectContext.projectConstraintsFile.addConstraints(\n      _.map(allPackagesWithTests, function (p) {\n        return utils.parsePackageConstraint(p);\n      })\n    );\n\n    // Build!\n    main.captureAndExit(\"=> Errors while building for release:\", function () {\n      projectContext.prepareProjectForBuild();\n    });\n    // No need to display the PackageMapDelta here, since it would include all\n    // of the packages!\n\n    relConf.packages = {};\n    var toPublish = [];\n\n    main.captureAndExit(\"=> Errors in release packages:\", function () {\n      _.each(allPackages, function (packageName) {\n        buildmessage.enterJob(\"checking consistency of \" + packageName, function () {\n          var packageSource = projectContext.localCatalog.getPackageSource(\n            packageName);\n          if (! packageSource) {\n            throw Error(\"no PackageSource for built package \" + packageName);\n          }\n\n          if (! packageSource.versionExplicitlyProvided) {\n            buildmessage.error(\n              \"A version must be specified for the package. Set it with \" +\n                \"Package.describe.\");\n            return;\n          }\n\n          // Let's get the server version that this local package is\n          // overwriting. If such a version exists, we will need to make sure\n          // that the contents are the same.\n          var oldVersionRecord = catalog.official.getVersion(\n            packageName, packageSource.version);\n\n          // Include this package in our release.\n          relConf.packages[packageName] = packageSource.version;\n\n          // If there is no old version, then we need to publish this package.\n          if (! oldVersionRecord) {\n            // We are going to check if we are publishing an official\n            // release. If this is an experimental or pre-release, then we are\n            // not ready to commit to these package semver versions either. Any\n            // packages that we should publish as part of this release should\n            // have a -(something) at the end.\n            var newVersion = packageSource.version;\n            if (! relConf.official && newVersion.split(\"-\").length < 2) {\n              buildmessage.error(\n                \"It looks like you are building an experimental release or \" +\n                  \"pre-release. Any packages we publish here should have an \" +\n                  \"pre-release identifier at the end (eg, 1.0.0-dev). If \" +\n                  \"this is an official release, please set official to true \" +\n                  \"in the release configuration file.\");\n              return;\n            }\n            toPublish.push(packageName);\n            Console.info(\"Will publish new version for \" + packageName);\n            return;\n          } else {\n            var isopk = projectContext.isopackCache.getIsopack(packageName);\n            if (! isopk) {\n              throw Error(\"no isopack for \" + packageName);\n            }\n\n            const existingBuild =\n              // First try with the non-simplified build architecture\n              // list, which is likely to be something like\n              // os+web.browser+web.browser.legacy+web.cordova:\n              catalog.official.getBuildWithPreciseBuildArchitectures(\n                oldVersionRecord,\n                isopk.buildArchitectures(),\n              ) ||\n              // If that fails, fall back to the simplified architecture\n              // list (e.g. os+web.browser+web.cordova), to match packages\n              // published before the web.browser.legacy architecture was\n              // introduced (in Meteor 1.7).\n              catalog.official.getBuildWithPreciseBuildArchitectures(\n                oldVersionRecord,\n                isopk.buildArchitectures(true),\n              );\n\n            var somethingChanged;\n\n            if (! existingBuild) {\n              // If the version number mentioned in package.js exists,\n              // but there's no build of this architecture, then\n              // either the old version was only semi-published, or\n              // you've added some platform-specific dependencies but\n              // haven't bumped the version number yet; either way,\n              // you should probably bump the version number.\n              somethingChanged = true;\n            } else if (! options[\"skip-tree-hashing\"] ||\n                       // Always check the treeHash of the meteor-tool\n                       // package, since it must have been modified if a\n                       // new release is being published.\n                       packageName === \"meteor-tool\") {\n              // Save the isopack, just to get its hash.\n              var bundleBuildResult = packageClient.bundleBuild(\n                isopk,\n                projectContext.isopackCache,\n              );\n\n              somethingChanged =\n                (bundleBuildResult.treeHash !== existingBuild.build.treeHash);\n            }\n\n            if (somethingChanged) {\n              buildmessage.error(\n                \"Something changed in package \" + packageName + \"@\" +\n                  isopk.version + \". Please upgrade its version number.\");\n            }\n          }\n        });\n      });\n    });\n\n    if (options['dry-run']) {\n      main.captureAndExit(\"=> Dry run\", function () {\n          buildmessage.error(\n            \"This is not an error but it was just a validation\" +\n            \" and nothing was published. Remove --dry-run to publish.\");\n        }\n      )\n    }\n\n    // We now have an object of packages that have new versions on disk that\n    // don't exist in the server catalog. Publish them.\n    var unfinishedBuilds = {};\n    _.each(toPublish, function (packageName) {\n      main.captureAndExit(\n        \"=> Errors while publishing:\",\n        \"publishing package \" + packageName,\n        function () {\n          var isopk = projectContext.isopackCache.getIsopack(packageName);\n          if (! isopk) {\n            throw Error(\"no isopack for \" + packageName);\n          }\n          var packageSource = projectContext.localCatalog.getPackageSource(\n            packageName);\n          if (! packageSource) {\n            throw Error(\"no PackageSource for built package \" + packageName);\n          }\n\n          var binary = isopk.platformSpecific();\n          packageClient.publishPackage({\n            projectContext: projectContext,\n            packageSource: packageSource,\n            connection: conn,\n            new: ! catalog.official.getPackage(packageName),\n            doNotPublishBuild: binary\n          });\n          if (buildmessage.jobHasMessages()) {\n            return;\n          }\n\n          Console.info(\n            'Published ' + packageName + '@' + packageSource.version + '.');\n\n          if (binary) {\n            unfinishedBuilds[packageName] = packageSource.version;\n          }\n        });\n    });\n\n    // Set the remaining release information. For now, when we publish from\n    // checkout, we always set 'meteor-tool' as the tool. We don't include the\n    // tool in the packages list.\n    relConf.tool=\"meteor-tool@\" + relConf.packages[\"meteor-tool\"];\n    delete relConf.packages[\"meteor-tool\"];\n  }\n\n  main.captureAndExit(\n    \"=> Errors while publishing release:\",\n    \"publishing release\",\n    function () {\n      // Create the new track, if we have been told to.\n      if (options['create-track']) {\n        // XXX maybe this job title should be left on the screen too?  some sort\n        // of enterJob/progress option that lets you do that?\n        buildmessage.enterJob(\"creating a new release track\", function () {\n          packageClient.callPackageServerBM(\n            conn, 'createReleaseTrack', { name: relConf.track } );\n        });\n        if (buildmessage.jobHasMessages()) {\n          return;\n        }\n      }\n\n      buildmessage.enterJob(\"creating a new release version\", function () {\n        var record = {\n          track: relConf.track,\n          version: relConf.version,\n          orderKey: relConf.orderKey,\n          description: relConf.description,\n          recommended: !!relConf.recommended,\n          tool: relConf.tool,\n          packages: relConf.packages\n        };\n\n        if (relConf.patchFrom) {\n          packageClient.callPackageServerBM(\n            conn, 'createPatchReleaseVersion', record, relConf.patchFrom);\n        } else {\n          packageClient.callPackageServerBM(\n            conn, 'createReleaseVersion', record);\n        }\n      });\n    }\n  );\n\n  // Learn about it.\n  refreshOfficialCatalogOrDie();\n  Console.info(\"Done creating \" + relConf.track  + \"@\" + relConf.version + \"!\");\n  Console.info();\n\n  if (options['from-checkout']) {\n    // XXX maybe should discourage publishing if git status says we're dirty?\n    var gitTag = \"release/\" + relConf.track  + \"@\" + relConf.version;\n    if (config.getPackageServerFilePrefix() !== 'packages') {\n      // Only make a git tag if we're on the default branch.\n      Console.info(\"Skipping git tag: not using the main package server.\");\n    } else if (gitTag.indexOf(':') !== -1) {\n      // XXX could run `git check-ref-format --allow-onelevel $gitTag` like we\n      //     used to, instead of this simple check\n      // XXX could convert : to / ?\n      Console.info(\"Skipping git tag: bad format for git.\");\n    } else {\n      Console.info(\"Creating git tag \" + gitTag);\n      utils.runGitInCheckout('tag', gitTag);\n      var fail = false;\n      try {\n        Console.info(\n          \"Pushing git tag (this should fail if you are not from Meteor Software)\");\n        utils.runGitInCheckout('push', 'git@github.com:meteor/meteor.git',\n                             'refs/tags/' + gitTag);\n      } catch (err) {\n        Console.error(\n          \"Failed to push git tag. Please push git tag manually!\");\n        fail = true;\n      }\n    }\n\n    // We need to warn the user that we didn't publish some of their\n    // packages. Unlike publish, this is advanced functionality, so the user\n    // should be familiar with the concept.\n    if (! _.isEmpty(unfinishedBuilds)) {\n      Console.warn();\n      Console.labelWarn(\n        \"Some packages contain binary dependencies.\");\n      Console.warn(\n          \"Builds have not been published for the following packages:\");\n      _.each(unfinishedBuilds, function (version, name) {\n        Console.warn(name + \"@\" + version);\n      });\n      // Note: we don't actually enforce the proper build machine thing. You\n      // can't use publish-for-arch for meteor-tool, for example, you need to\n      // use publish --existing-version and to do it from checkout. Setting that\n      // up on a build machine for a one-off experimental release could be a\n      // pain. In that case, I guess, you can just run publish\n      // --existing-version: presumably you don't care about compatibility\n      // etc. If it is an official release, you ought to use a build machine\n      // though.\n      Console.warn(\n        \"Please publish the builds separately, from a proper build machine.\");\n    }\n  }\n\n  return 0;\n});\n\n///////////////////////////////////////////////////////////////////////////////\n// list\n///////////////////////////////////////////////////////////////////////////////\n\nmain.registerCommand({\n  name: 'list',\n  requiresApp: true,\n  options: {\n    'tree': { type: Boolean },\n    'json': { type: Boolean },\n    'weak': { type: Boolean },\n    'details': { type: Boolean },\n    'allow-incompatible-update': { type: Boolean }\n  },\n  catalogRefresh: new catalog.Refresh.OnceAtStart({ ignoreErrors: true })\n}, function (options) {\n  disableNativeWatcher();\n\n  var projectContext = new projectContextModule.ProjectContext({\n    projectDir: options.appDir,\n    allowIncompatibleUpdate: options['allow-incompatible-update']\n  });\n  main.captureAndExit(\"=> Errors while initializing project:\", function () {\n    projectContext.prepareProjectForBuild();\n  });\n  // No need to display the PackageMapDelta here, since we're about to list all\n  // of the packages anyway!\n\n  const showJson = !!options['json'];\n  const showTree = !!options['tree'];\n\n  const suffixes = {\n    topLevel: '(top level)',\n    expandedAbove: '(expanded above)',\n    weak: '[weak]',\n    skipped: 'package skipped',\n    missing: 'missing?'\n  }\n\n  if (showJson && showTree) {\n    throw new Error('can only run for one option,found --json and --tree');\n  }\n\n  if (showTree || showJson) {\n    const jsonOut = showJson && {};\n    const showWeak = !!options['weak'];\n    const showDetails = !!options['details'];\n    // Load package details of all used packages (inc. dependencies)\n    const packageDetails = new Map;\n    projectContext.packageMap.eachPackage(function (name, info) {\n      packageDetails.set(name, projectContext.projectCatalog.getVersion(name, info.version));\n    });\n\n    // Build a set of top level package names\n    const topLevelSet = new Set;\n    projectContext.projectConstraintsFile.eachConstraint(function (constraint) {\n      topLevelSet.add(constraint.package);\n    });\n\n    // Package that should not be expanded (top level or expanded already)\n    const dontExpand = new Set(topLevelSet.values());\n\n    // Recursive function that outputs each package\n    const printPackage = function ({ packageToPrint, isWeak, indent1, indent2, parent }) {\n      const packageName = packageToPrint.packageName;\n      const depsObj = packageToPrint.dependencies || {};\n      let deps = Object.keys(depsObj).sort();\n      // Ignore references to a meteor version or isobuild marker packages\n      deps = deps.filter(dep => {\n        return dep !== 'meteor' && !compiler.isIsobuildFeaturePackage(dep);\n      });\n\n      if (!showWeak) {\n        // Filter out any weakly referenced dependencies\n        deps = deps.filter(dep => {\n          let references = depsObj[dep].references || [];\n          let weakRef = references.length > 0 && references.every(r => r.weak);\n          return !weakRef;\n        });\n      }\n\n      const expandedAlready = (deps.length > 0 && dontExpand.has(packageName));\n      const shouldExpand = (deps.length > 0 && !expandedAlready && !isWeak);\n\n      // with normal tree display we send the current info to stdout\n      if (showTree) {\n        if (indent1 !== '') {\n          indent1 += (shouldExpand ? '┬' : '─') + ' ';\n        }\n\n        let suffix = (isWeak ? suffixes.weak : '');\n        if (expandedAlready) {\n          suffix += topLevelSet.has(packageName)\n            ? ` ${suffixes.topLevel}`\n            : ` ${suffixes.expandedAbove}`\n        }\n\n        Console.info(indent1 + packageName + '@' + packageToPrint.version + suffix);\n      }\n\n      // with json we add detailed info to the json object\n      if (showJson) {\n        if (expandedAlready) {\n          // on expanded packages we only want to add minimal information to\n          // keep the json file compact, so we make the value a stirng\n          if (topLevelSet.has(packageName)) {\n            parent[packageName] = `${packageToPrint.version}-${suffixes.topLevel}`\n          } else {\n            parent[packageName] = `${packageToPrint.version}-${suffixes.expandedAbove}`\n          }\n        } else {\n          // on non-expanded packages we want detailed information but we\n          // omit falsy values in order to keep the output minimal and readable\n          const entry = {};\n          parent[packageName] = entry;\n\n          const mapInfo = projectContext.packageMap.getInfo(packageName);\n          const isLocal = mapInfo && mapInfo.kind === 'local';\n\n          const infoSource = Object.assign({}, showDetails ? packageToPrint : {}, {\n            version: packageToPrint.version,\n            local: isLocal,\n            weak: isWeak,\n            newerVersion: !isLocal && getNewerVersion(packageName, packageToPrint.version, catalog.official)\n          });\n\n          Object.entries(infoSource).forEach(([key, value]) => {\n            if (value) {\n              entry[key] = value;\n            }\n          });\n\n          if (shouldExpand) {\n            entry.dependencies = {};\n          }\n        }\n      }\n\n      if (shouldExpand) {\n        dontExpand.add(packageName);\n        deps.forEach((dep, index) => {\n          const references = depsObj[dep].references || [];\n          const weakRef = references.length > 0 && references.every(r => r.weak);\n          const last = ((index + 1) === deps.length);\n          const child = packageDetails.get(dep);\n\n          // with normal tree display we increase indentation\n          if (showTree) {\n            const newIndent1 = indent2 + (last ? '└─' : '├─');\n            const newIndent2 = indent2 + (last ? '  ' : '│ ');\n            if (child) {\n              printPackage({\n                packageToPrint: child,\n                isWeak: weakRef,\n                indent1: newIndent1,\n                indent2: newIndent2\n              });\n            } else if (weakRef) {\n              Console.info(`${newIndent1}─ ${dep} ${suffixes.weak} ${suffixes.skipped}`);\n            } else {\n              Console.info(`${newIndent1}─ ${dep} ${suffixes.missing}`);\n            }\n          }\n\n          if (showJson) {\n            if (child) {\n              printPackage({\n                packageToPrint: child,\n                isWeak: weakRef,\n                parent: parent[packageName].dependencies\n              });\n            } else if (weakRef) {\n              parent[packageName].dependencies[dep] = `${suffixes.weak} ${suffixes.skipped}`;\n            } else {\n              parent[packageName].dependencies = suffixes.missing;\n            }\n          }\n        });\n      }\n    };\n\n    const topLevelNames = Array.from(topLevelSet.values()).sort();\n    topLevelNames.forEach((dep, index) => {\n      const topLevelPackage = packageDetails.get(dep);\n      if (topLevelPackage) {\n        // Force top level packages to be expanded\n        dontExpand.delete(topLevelPackage.packageName);\n        printPackage({\n          packageToPrint: topLevelPackage,\n          isWeak: false,\n          indent1: '',\n          indent2: '',\n          parent: jsonOut\n        })\n      }\n    });\n\n    if (showJson) {\n      // we can't use Console here, because it pretty prints the output with\n      // a wrap at 80 chars per line, which causes the json to break if details\n      // options is active and the package descriptions exceed the limit\n      console.info(JSON.stringify(jsonOut));\n    }\n\n    return 0;\n  }\n\n  var items = [];\n  var newVersionsAvailable = false;\n  var anyBuiltLocally = false;\n\n  // Iterate over packages that are used directly by this app (not indirect\n  // dependencies).\n  projectContext.projectConstraintsFile.eachConstraint(function (constraint) {\n    var packageName = constraint.package;\n\n    // Skip isobuild:* pseudo-packages.\n    if (compiler.isIsobuildFeaturePackage(packageName)) {\n      return;\n    }\n\n    var mapInfo = projectContext.packageMap.getInfo(packageName);\n    if (! mapInfo) {\n      throw Error(\"no version for used package \" + packageName);\n    }\n    var versionRecord = projectContext.projectCatalog.getVersion(\n      packageName, mapInfo.version);\n    if (! versionRecord) {\n      throw Error(\"no version record for \" + packageName + \"@\" +\n                  mapInfo.version);\n    }\n\n    var versionAddendum = \" \";\n    if (mapInfo.kind === 'local') {\n      versionAddendum = \"+\";\n      anyBuiltLocally = true;\n    } else if (mapInfo.kind === 'versioned') {\n      if (getNewerVersion(packageName, mapInfo.version, catalog.official)) {\n        versionAddendum = \"*\";\n        newVersionsAvailable = true;\n      }\n    } else {\n      throw Error(\"unknown kind \" + mapInfo.kind);\n    }\n    var description = mapInfo.version + versionAddendum;\n    if (versionRecord.description) {\n      description += \" \" + versionRecord.description;\n    }\n    items.push({ name: packageName, description: description });\n  });\n\n  // Append extra information about special packages such as Cordova plugins\n  // to the list.\n  _.each(\n    projectContext.cordovaPluginsFile.getPluginVersions(),\n    function (version, name) {\n      items.push({ name: 'cordova:' + name, description: version });\n    }\n  );\n\n  utils.printPackageList(items);\n\n  if (newVersionsAvailable) {\n    Console.info();\n    Console.info(\n      \"New versions of these packages are available! Run\",\n      Console.command(\"'meteor update'\"), \"to try to update those\",\n      \"packages to their latest versions. If your packages cannot be\",\n      \"updated further, try typing\",\n      Console.command(\"`meteor add <package>@<newVersion>`\"),\n      \"to see more information.\",\n      Console.options({ bulletPoint: \"* \" }));\n  }\n  if (anyBuiltLocally) {\n    Console.info();\n    Console.info(\n      \"These packages are built locally from source.\",\n      Console.options({ bulletPoint: \"+ \" }));\n  }\n  return 0;\n});\n\nvar getNewerVersion = function (packageName, curVersion, whichCatalog) {\n  // Check to see if there are later versions available, returning the\n  // latest version if there are.\n  //\n  // If we are not using an rc for this package, then we are not going to\n  // update to an rc. But if we are using a pre-release version, then we\n  // care about other pre-release versions, and might want to update to a\n  // newer one.\n  //\n  // We depend on the fact that `curVersion` is in the database to know\n  // that we'll find something when we look in the catalog.\n  var latest;\n  if (/-/.test(curVersion)) {\n    latest = whichCatalog.getLatestVersion(packageName);\n  } else {\n    latest = whichCatalog.getLatestMainlineVersion(packageName);\n  }\n  if (! latest) {\n    // Shouldn't happen: we've chosen a published version of this package,\n    // so there has to be at least one in our database!\n    throw Error(\"no latest record for package where we have a version? \" +\n                packageName);\n  }\n\n  var latestVersion = latest.version;\n  if (curVersion !== latestVersion &&\n      // If we're currently running a prerelease, \"latest\" may be older than\n      // what we're at, so don't tell us we're outdated!\n      packageVersionParser.lessThan(curVersion, latestVersion)) {\n    return latestVersion;\n  } else {\n    return null;\n  }\n};\n\n///////////////////////////////////////////////////////////////////////////////\n// update\n///////////////////////////////////////////////////////////////////////////////\n\n// Returns 0 if the operation went OK -- either we updated to a new release, or\n// decided not to with good reason. Returns something other than 0, if it is not\n// safe to proceed (ex: our release track is fundamentally unsafe or there is\n// weird catalog corruption).\nvar maybeUpdateRelease = function (options) {\n  // We are only updating packages, so we are not updating the release.\n  if (options[\"packages-only\"]) {\n     return 0;\n  }\n\n  // We are running from checkout, so we are not updating the release.\n  if (release.current && release.current.isCheckout()) {\n    Console.error(\n      \"You are running Meteor from a checkout, so we cannot update\",\n      \"the Meteor release. Checking to see if we can update your packages.\");\n    return 0;\n  }\n\n  // Looks like we are going to have to update the release. First, let's figure\n  // out the release track we'll end up on --- either because it's\n  // the explicitly specified (with --release) track; or because we didn't\n  // specify a release and it's the app's current release (if we're in an app\n  // dir), since non-forced updates don't change the track.\n\n  // XXX better error checking on release.current.name\n  // XXX add a method to release.current.\n  var releaseTrack = release.current ?\n        release.current.getReleaseTrack() : catalog.DEFAULT_TRACK;\n\n  // Unless --release was passed (in which case we ought to already have\n  // springboarded to that release), go get the latest release and switch to\n  // it. (We already know what the latest release is because we refreshed the\n  // catalog above.)  Note that after springboarding, we will hit this again.\n  // However, the override that's done by SpringboardToLatestRelease also sets\n  // release.forced (although it does not set release.explicit), so we won't\n  // double-springboard.  (We might miss an super recently published release,\n  // but that's probably OK.)\n  if (! release.forced) {\n    var latestRelease = release.latestKnown(releaseTrack);\n\n    // Are we on some track without ANY recommended releases at all,\n    // and the user ran 'meteor update' without specifying a release? We\n    // really can't do much here.\n    if (!latestRelease) {\n      Console.error(\n        \"There are no recommended releases on release track \" +\n          releaseTrack + \".\");\n      return 1;\n    }\n\n    if (release.current && ! release.current.isRecommended() &&\n        options.appDir && ! options.patch) {\n      var releaseVersion = release.current.getReleaseVersion();\n      var newerRecommendedReleases = getLaterReleaseVersions(\n        releaseTrack, releaseVersion);\n      if (!newerRecommendedReleases.length) {\n        // When running 'meteor update' without --release in an app,\n        // using a release that is not recommended and is newer than\n        // any recommended release, don't springboard backwards to\n        // an older, recommended release.  Don't update Meteor, or\n        // the app's release.  This makes it possible to type `meteor update`\n        // with no arguments from a new RC of Meteor, without performing\n        // the update (and subsequent constraint-solving, etc.) using\n        // the old tool.\n        //\n        // We'll still springboard forwards out of an RC, just not backwards.\n        // There still has a possibility of already on the latest.\n        if (release.current.name === latestRelease) {\n          Console.info(\"Already on the latest recommended release \" +\n                      \"(\" + latestRelease + \"). Not updating.\");\n        } else {\n          Console.info(\"Not updating the release, because this app is at a \" +\n                      \"newer release (\" + release.current.name + \") than \" +\n                      \"the latest recommended release \" +\n                      \"(\" + latestRelease + \").\");\n        }\n        return 0;\n      }\n    }\n\n    if (! release.current || release.current.name !== latestRelease) {\n      // The user asked for the latest release (well, they \"asked for it\" by not\n      // passing --release). We're not currently running the latest release on\n      // this track (we may have even just learned about it). #UpdateSpringboard\n      throw new main.SpringboardToLatestRelease(releaseTrack);\n    }\n  }\n\n  // At this point we should have a release. (If we didn't to start\n  // with, #UpdateSpringboard fixed that.) And it can't be a checkout,\n  // because we checked for that at the very beginning.\n  if (! release.current || ! release.current.isProperRelease()) {\n    throw new Error(\"don't have a proper release?\");\n  }\n\n  updateMeteorToolSymlink(true);\n\n  // If we're not in an app, then we're basically done. The only thing left to\n  // do is print out some messages explaining what happened (and advising the\n  // user to run update from an app).\n  if (! options.appDir) {\n    if (release.forced) {\n      // We get here if:\n      // 1) the user ran 'meteor update' and we found a new version\n      // 2) the user ran 'meteor update --release xyz' (regardless of\n      //    whether we found a new release)\n      //\n      // In case (1), we downloaded and installed the update and then\n      // we springboarded (at #UpdateSpringboard above), causing\n      // $METEOR_SPRINGBOARD_RELEASE to be true.\n      // XXX probably should have a better interface than looking directly\n      //     at the env var here\n      //\n      // In case (2), we downloaded, installed, and springboarded to\n      // the requested release in the initialization code, before the\n      // command even ran. They could equivalently have run 'meteor\n      // help --release xyz'.\n      Console.info(\n        \"Installed. Run\",\n        Console.command(\n          \"'meteor update --release \" +\n            release.current.getDisplayName({ noPrefix: true }) + \"'\"),\n        \"inside of a particular project directory to update that project to\",\n        release.current.getDisplayName() + \".\");\n    } else {\n      // We get here if the user ran 'meteor update' and we didn't\n      // find a new version.\n      Console.info(\n        \"The latest version of Meteor, \" + release.current.getReleaseVersion() +\n        \", is already installed on this computer. Run \" +\n        Console.command(\"'meteor update'\") + \" inside of a particular \" +\n        \"project directory to update that project to \" +\n        release.current.getDisplayName());\n    }\n    return 0;\n  }\n\n  // Otherwise, we have to upgrade the app too, if the release changed.  Read in\n  // the project metadata files.  (Don't resolve constraints yet --- if the\n  // current constraints don't resolve but we can update to a place where they\n  // do, that's great!)\n  var projectContext = new projectContextModule.ProjectContext({\n    projectDir: options.appDir,\n    alwaysWritePackageMap: true,\n    allowIncompatibleUpdate: true // disregard `.meteor/versions` if necessary\n  });\n  main.captureAndExit(\"=> Errors while initializing project:\", function () {\n    projectContext.readProjectMetadata();\n  });\n\n  if (projectContext.releaseFile.fullReleaseName === release.current.name) {\n    // release.explicit here means that the user actually typed `--release FOO`,\n    // so they weren't trying to go to the latest release. (This is different\n    // from release.forced, which might be set due to the\n    // SpringboardToLatestRelease above.)\n    var maybeTheLatestRelease = release.explicit ? \"\" : \", the latest release\";\n    Console.info(\n      \"This project is already at \" +\n      release.current.getDisplayName() + maybeTheLatestRelease + \".\");\n    return 0;\n  }\n\n  // XXX did we have to change some package versions? we should probably\n  //     mention that fact.\n  // XXX error handling.\n\n  // Previously we attempted to figure out the newest release that is compatible\n  // with the users non-core version constraints. Now we simply update them\n  // to the newest and if they get a conflict, they are left with a\n  // .meteor/packages to work on to get a resolution (with more useful info)\n\n  var releaseVersion;\n  if (options.patch) {\n    // Can't make a patch update if you are not running from a current\n    // release. In fact, you are doing something wrong, so we should tell you\n    // to stop.\n    if (! projectContext.releaseFile.normalReleaseSpecified()) {\n      Console.error(\n        \"Cannot patch update unless a release is set.\");\n      return 1;\n    }\n    var record = catalog.official.getReleaseVersion(\n      projectContext.releaseFile.releaseTrack,\n      projectContext.releaseFile.releaseVersion);\n    if (!record) {\n      Console.error(\n        \"Cannot update to a patch release from an old release.\");\n      return 1;\n    }\n    var updateTo = record.patchReleaseVersion;\n    if (!updateTo) {\n      Console.error(\n        \"You are at the latest patch version.\");\n      return 0;\n    }\n    var patchRecord = catalog.official.getReleaseVersion(\n      projectContext.releaseFile.releaseTrack, updateTo);\n    // It looks like you are not at the latest patch version,\n    // technically. But, in practice, we cannot update you to the latest patch\n    // version because something went wrong. For example, we can't find the\n    // record for your patch version (probably some sync\n    // failure). Alternatively, maybe we put out a patch release and found a\n    // bug in it -- since we tell you to always run update --patch, we should\n    // not try to patch you to an unfriendly release. So, either way, as far\n    // as we are concerned you are at the 'latest patch version'\n    if (!patchRecord || !patchRecord.recommended ) {\n      Console.error(\"You are at the latest patch version.\");\n      return 0;\n    }\n    // Great, we found a patch version. You can only have one latest patch for\n    // a string of releases, so there is just one release to try.\n    releaseVersion = updateTo;\n  } else if (release.explicit) {\n    // You have explicitly specified a release, and we have springboarded to\n    // it. So, we will use that release to update you to itself, if we can.\n    releaseVersion = release.current.getReleaseVersion();\n  } else {\n    // We are not doing a patch update, or a specific release update, so we need\n    // to try all recommended releases on our track, whose order key is greater\n    // than the app's.\n    releaseVersion = getLaterReleaseVersions(\n      projectContext.releaseFile.releaseTrack,\n      projectContext.releaseFile.releaseVersion)[0];\n\n    if (! releaseVersion) {\n      // We could not find any releases newer than the one that we are on, on\n      // that track, so we are done.\n      Console.info(\n        \"This project is already at \" +\n        Console.noWrap(projectContext.releaseFile.displayReleaseName) +\n        \", which is newer than the latest release.\");\n      return 0;\n    }\n  }\n\n  var releaseName = `${releaseTrack}@${releaseVersion}`;\n\n  // We could at this point springboard to solutionRelease (which is no newer\n  // than the release we are currently running), but there's no super-clear\n  // advantage to this yet. The main reason might be if we decide to delete some\n  // backward-compatibility code which knows how to deal with an older release,\n  // but if we actually do that, we can change this code to add the extra\n  // springboard at that time.\n  var upgraders = require('../upgraders.js');\n  var upgradersToRun = upgraders.upgradersToRun(projectContext);\n\n  // Update every package in .meteor/packages to be (semver)>= the version\n  // set for that package in the release we are updating to\n  var releaseRecord = catalog.official.getReleaseVersion(releaseTrack, releaseVersion);\n  projectContext.projectConstraintsFile.updateReleaseConstraints(releaseRecord);\n\n  // Download and build packages and write the new versions to .meteor/versions.\n  // XXX It's a little weird that we do a full preparation for build\n  //     (downloading packages, building packages, etc) when we might be about\n  //     to upgrade packages and have to do it again. Maybe we shouldn't? Note\n  //     that if we change this, that changes the upgraders interface, which\n  //     expects a projectContext that is fully prepared for build.\n  main.captureAndExit(\"=> Errors while initializing project:\", function () {\n    projectContext.prepareProjectForBuild();\n  });\n\n  projectContext.writeReleaseFileAndDevBundleLink(releaseName);\n\n  projectContext.packageMapDelta.displayOnConsole({\n    title: (\"Changes to your project's package version selections from \" +\n            \"updating the release:\")\n  });\n\n  Console.info(files.pathBasename(options.appDir) + \": updated to \" +\n               projectContext.releaseFile.displayReleaseName + \".\");\n\n  // Now run the upgraders.\n  // XXX should we also run upgraders on other random commands, in case there\n  // was a crash after changing .meteor/release but before running them?\n  _.each(upgradersToRun, function (upgrader) {\n    upgraders.runUpgrader(projectContext, upgrader);\n    projectContext.finishedUpgraders.appendUpgraders([upgrader]);\n  });\n\n  // We are done, and we should pass the release that we upgraded to, to the\n  // user.\n  return 0;\n};\n\nfunction getLaterReleaseVersions(releaseTrack, releaseVersion) {\n  var releaseInfo = catalog.official.getReleaseVersion(\n    releaseTrack, releaseVersion);\n  var orderKey = (releaseInfo && releaseInfo.orderKey) || null;\n\n  return catalog.official.getSortedRecommendedReleaseVersions(\n    releaseTrack, orderKey);\n}\n\nmain.registerCommand({\n  name: 'update',\n  options: {\n    patch: { type: Boolean },\n    \"packages-only\": { type: Boolean },\n    \"allow-incompatible-update\": { type: Boolean },\n    \"all-packages\": { type: Boolean }\n  },\n  // We have to be able to work without a release, since 'meteor\n  // update' is how you fix apps that don't have a release.\n  requiresRelease: false,\n  minArgs: 0,\n  maxArgs: Infinity,\n  catalogRefresh: new catalog.Refresh.OnceAtStart({ ignoreErrors: true })\n}, function (options) {\n  disableNativeWatcher();\n\n  // If you are specifying packages individually, you probably don't want to\n  // update the release.\n  if (options.args.length > 0) {\n    // In the case that user specified the package but not in a app.\n    if (! options.appDir) {\n      Console.error(\"You're not in a Meteor project directory.\");\n      return 1;\n    }\n    options[\"packages-only\"] = true;\n  }\n\n  // Some basic checks to make sure that this command is being used correctly.\n  if (options[\"packages-only\"] && options[\"patch\"]) {\n    Console.error(\n      \"The --patch option only applies to the release, not packages.\");\n    return 1;\n  }\n\n  if (release.explicit && options[\"patch\"]) {\n    Console.error(\"You cannot patch update to a specific release.\");\n    return 1;\n  }\n\n  var releaseUpdateStatus = maybeUpdateRelease(options);\n  // If we encountered an error and cannot proceed, return.\n  if (releaseUpdateStatus !== 0) {\n    return releaseUpdateStatus;\n  }\n\n  // The only thing left to do is update packages, and we don't update packages\n  // if we are making a patch update, updating specifically with a --release, or\n  // running outside a package directory. So, we are done, return.\n  if (options['patch'] || release.explicit || !options.appDir) {\n    return 0;\n  }\n\n  // Start a new project context and read in the project's release and other\n  // metadata. (We also want to make sure that we write the package map when\n  // we're done even if we're not on the matching release!)\n  var projectContext = new projectContextModule.ProjectContext({\n    projectDir: options.appDir,\n    alwaysWritePackageMap: true,\n    allowIncompatibleUpdate: options[\"allow-incompatible-update\"]\n  });\n  main.captureAndExit(\"=> Errors while initializing project:\", function () {\n    projectContext.readProjectMetadata();\n  });\n\n  // If no packages have been specified, then we will send in a request to\n  // update all direct dependencies. If a specific list of packages has been\n  // specified, then only upgrade those.\n  var upgradePackageNames = [];\n  // If no packages have been specified (`meteor update` with no positional\n  // args), take patches to indirect dependencies.\n  var upgradeIndirectDepPatchVersions = false;\n  if (options.args.length === 0) {\n    // \"all-packages\" means update every package we depend on. The default\n    // is to tend to leave indirect dependencies (i.e. things not listed in\n    // `.meteor/packages`) alone.\n    if (options[\"all-packages\"]) {\n      upgradePackageNames = _.filter(\n        Object.keys(projectContext.packageMapFile.getCachedVersions()),\n        packageName => ! compiler.isIsobuildFeaturePackage(packageName)\n      );\n    }\n\n    if (upgradePackageNames.length === 0) {\n      projectContext.projectConstraintsFile.eachConstraint(function (constraint) {\n        if (! compiler.isIsobuildFeaturePackage(constraint.package)) {\n          upgradePackageNames.push(constraint.package);\n        }\n      });\n    }\n\n    upgradeIndirectDepPatchVersions = true;\n\n  } else {\n    if (options[\"all-packages\"]) {\n      Console.error(\"You cannot both specify a list of packages to\"\n       + \" update and pass --all-packages.\");\n       exit(1)\n    }\n\n    upgradePackageNames = options.args;\n  }\n  // We want to use the project's release for constraints even if we are\n  // currently running a newer release (eg if we ran 'meteor update --patch' and\n  // updated to an older patch release).  (If the project has release 'none'\n  // because this is just 'updating packages', this can be null. Also, if we're\n  // running from a checkout this should be null even if the file doesn't say\n  // 'none'.)\n  var releaseRecordForConstraints = null;\n  if (! files.inCheckout() &&\n      projectContext.releaseFile.normalReleaseSpecified()) {\n    releaseRecordForConstraints = catalog.official.getReleaseVersion(\n      projectContext.releaseFile.releaseTrack,\n      projectContext.releaseFile.releaseVersion);\n    if (! releaseRecordForConstraints) {\n      throw Error(\"unknown release \" +\n                  projectContext.releaseFile.displayReleaseName);\n    }\n  }\n\n  const upgradePackagesWithoutCordova =\n    upgradePackageNames.filter(name => name.split(':')[0] !== 'cordova');\n  if (!_.isEqual(upgradePackagesWithoutCordova, upgradePackageNames)) {\n    // There are some cordova packages in the list to update.\n    // We should tell users how to update cordova packages.\n    Console.warn();\n    Console.warn(\"To add/upgrade a Cordova plugin in your Meteor project, run:\");\n    Console.warn();\n    Console.warn(\n      Console.command(\"meteor add cordova:PLUGIN-NAME@x.y.z\"),\n      Console.options({ indent: 2 }));\n    Console.warn();\n    Console.warn(\"The 'PLUGIN-NAME' should be an official plugin name\",\n      \"(e.g. cordova-plugin-media) and the 'x.y.z' should be an available version of\",\n      \"the plugin. The latest version can be found with the following command:\");\n    Console.warn();\n    Console.warn(\n      Console.command(\"meteor npm view PLUGIN-NAME version\"),\n      Console.options({ indent: 2 }));\n    if (upgradePackagesWithoutCordova.length !== 0) {\n      Console.warn();\n      Console.warn('The non-Cordova packages will now be updated...');\n    }\n    Console.warn();\n    // Exclude cordova packages\n    upgradePackageNames = upgradePackagesWithoutCordova;\n  }\n\n  // Try to resolve constraints, allowing the given packages to be upgraded.\n  projectContext.reset({\n    releaseForConstraints: releaseRecordForConstraints,\n    upgradePackageNames: upgradePackageNames,\n    upgradeIndirectDepPatchVersions: upgradeIndirectDepPatchVersions\n  });\n  main.captureAndExit(\n    \"=> Errors while upgrading packages:\", \"upgrading packages\", function () {\n      projectContext.resolveConstraints();\n      if (buildmessage.jobHasMessages()) {\n        return;\n      }\n\n      // If the user explicitly mentioned some packages to upgrade, they must\n      // actually end up in our solution!\n      if (options.args.length !== 0) {\n        _.each(upgradePackageNames, function (packageName) {\n          if (! projectContext.packageMap.getInfo(packageName)) {\n            buildmessage.error(packageName + ': package is not in the project');\n          }\n        });\n      }\n      if (buildmessage.jobHasMessages()) {\n        return;\n      }\n\n      // Finish preparing the project.\n      projectContext.prepareProjectForBuild();\n    }\n  );\n\n  if (projectContext.packageMapDelta.hasChanges()) {\n    projectContext.packageMapDelta.displayOnConsole({\n      title: (\"Changes to your project's package version selections from \" +\n              \"updating package versions:\")\n    });\n  } else if (options.args.length) {\n    Console.info(\n      \"The specified packages are at their latest compatible versions.\");\n  } else {\n    Console.info(\n      \"Your top-level dependencies are at their latest compatible versions.\");\n  }\n\n  if (!options.args.length) {\n    // Generate and print info about what is NOT at the latest version.\n\n    var topLevelPkgSet = {}; // direct dependencies (rather than indirect)\n    projectContext.projectConstraintsFile.eachConstraint(function (constraint) {\n      topLevelPkgSet[constraint.package] = true;\n    });\n\n    var nonlatestDirectDeps = [];\n    var nonlatestIndirectDeps = [];\n    var deprecatedDeps = [];\n    projectContext.packageMap.eachPackage(function (name, info) {\n      var selectedVersion = info.version;\n      var catalog = projectContext.projectCatalog;\n      var latestVersion = getNewerVersion(name, selectedVersion, catalog);\n      if (latestVersion) {\n        var rec = { name: name, selectedVersion: selectedVersion,\n                    latestVersion: latestVersion };\n        if (_.has(topLevelPkgSet, name)) {\n          nonlatestDirectDeps.push(rec);\n        } else {\n          nonlatestIndirectDeps.push(rec);\n        }\n      }\n      if (info.packageSource && info.packageSource.deprecated) {\n        deprecatedDeps.push({\n          name: name,\n          selectedVersion: selectedVersion,\n          deprecatedMessage: info.packageSource.deprecatedMessage\n        })\n      }\n    });\n    var printItem = function (rec) {\n      Console.info(\" * \" + rec.name + \" \" + rec.selectedVersion +\n                   \" (\" + rec.latestVersion + \" is available)\");\n    };\n    if (nonlatestDirectDeps.length) {\n      Console.info(\"\\nThe following top-level dependencies were not updated \" +\n                   \"to the very latest version available:\");\n      nonlatestDirectDeps.forEach(printItem);\n    }\n    if(deprecatedDeps.length) {\n      Console.info(\"\\nThe following packages have been DEPRECATED. Please consider finding replacements for them.\");\n      deprecatedDeps.forEach(function (item) {\n        Console.info(\" * \" +  item.name + \" \" + item.selectedVersion + \" \" + (item.deprecatedMessage ? \"(\" + item.deprecatedMessage + \")\" : \"\"));\n      })\n    }\n    if (nonlatestIndirectDeps.length) {\n      Console.info(\"\\nNewer versions of the following indirect dependencies\" +\n                   \" are available:\");\n      nonlatestIndirectDeps.forEach(printItem);\n      Console.info([\n        \"These versions may not be compatible with your project.\",\n        \"To update one or more of these packages to their latest\",\n        \"compatible versions, pass their names to `meteor update`,\",\n        \"or just run `meteor update --all-packages`.\",\n        \"If the packages do not upgrade after this, this could mean\",\n        \"that there is a newer version of Meteor which the package\",\n        \"requires, but it not yet recommended or that some package\",\n        \"dependencies are not up to date and don't allow you to get\",\n        \"the latest package version.\"\n      ].join(\"\\n\"));\n    }\n  }\n});\n\n///////////////////////////////////////////////////////////////////////////////\n// admin run-upgrader\n///////////////////////////////////////////////////////////////////////////////\n\n// For testing upgraders during development.\nmain.registerCommand({\n  name: 'admin run-upgrader',\n  hidden: true,\n  minArgs: 1,\n  maxArgs: 1,\n  requiresApp: true,\n  catalogRefresh: new catalog.Refresh.Never(),\n  'allow-incompatible-update': { type: Boolean }\n}, function (options) {\n  var projectContext = new projectContextModule.ProjectContext({\n    projectDir: options.appDir,\n    allowIncompatibleUpdate: options['allow-incompatible-update']\n  });\n  main.captureAndExit(\"=> Errors while initializing project:\", function () {\n    projectContext.prepareProjectForBuild();\n  });\n  projectContext.packageMapDelta.displayOnConsole();\n\n  var upgrader = options.args[0];\n\n  var upgraders = require('../upgraders.js');\n  console.log(\"%s: running upgrader %s.\",\n              files.pathBasename(options.appDir), upgrader);\n  upgraders.runUpgrader(projectContext, upgrader);\n});\n\n///////////////////////////////////////////////////////////////////////////////\n// admin run-background-updater\n///////////////////////////////////////////////////////////////////////////////\n\n// For testing the background updater during development.\nmain.registerCommand({\n  name: 'admin run-background-updater',\n  hidden: true,\n  catalogRefresh: new catalog.Refresh.Never()\n}, function (options) {\n  updater.tryToDownloadUpdate({\n    showBanner: true,\n    printErrors: true\n  });\n});\n\n///////////////////////////////////////////////////////////////////////////////\n// admin wipe-all-packages\n///////////////////////////////////////////////////////////////////////////////\n\n// For testing wipeAllPackages during development\nmain.registerCommand({\n  name: 'admin wipe-all-packages',\n  hidden: true,\n  catalogRefresh: new catalog.Refresh.Never()\n}, function (options) {\n  tropohouse.default.wipeAllPackages();\n});\n\n///////////////////////////////////////////////////////////////////////////////\n// admin check-package-versions\n///////////////////////////////////////////////////////////////////////////////\n\n// Run before publish-release --from-checkout to make sure that all of our\n// version numbers are up to date\nmain.registerCommand({\n  name: 'admin check-package-versions',\n  hidden: true,\n  catalogRefresh: new catalog.Refresh.OnceAtStart({ ignoreErrors: false })\n}, function (options) {\n  if (!files.inCheckout()) {\n    Console.error(\"Must run from checkout.\");\n    return 1;\n  };\n\n  // Set up a temporary project context and build everything.\n  var tempProjectDir = files.mkdtemp('meteor-release-build');\n  var projectContext = new projectContextModule.ProjectContext({\n    projectDir: tempProjectDir,  // won't have a packages dir, that's OK\n    // seriously, we only want checkout packages\n    ignorePackageDirsEnvVar: true,\n    // When we publish, we should always include web.cordova unibuilds, even\n    // though this temporary directory does not have any cordova platforms\n    forceIncludeCordovaUnibuild: true\n  });\n\n  // Read metadata and initialize catalog.\n  main.captureAndExit(\"=> Errors while building for release:\", function () {\n    projectContext.initializeCatalog();\n  });\n\n  var allPackages = projectContext.localCatalog.getAllNonTestPackageNames();\n\n  Console.info(\"Listing packages where the checkout version doesn't match the\",\n    \"latest version on the package server.\");\n\n  _.each(allPackages, function (packageName) {\n    var checkoutVersion = projectContext.localCatalog.getLatestVersion(packageName).version;\n    var remoteLatestVersion = catalog.official.getLatestVersion(packageName).version;\n\n    if (checkoutVersion !== remoteLatestVersion) {\n      Console.info(packageName, checkoutVersion, remoteLatestVersion);\n    }\n  });\n});\n\n///////////////////////////////////////////////////////////////////////////////\n// add\n///////////////////////////////////////////////////////////////////////////////\n\nmain.registerCommand({\n  name: 'add',\n  options: {\n    \"allow-incompatible-update\": { type: Boolean }\n  },\n  minArgs: 1,\n  maxArgs: Infinity,\n  requiresApp: true,\n  catalogRefresh: new catalog.Refresh.OnceAtStart({ ignoreErrors: true })\n}, function (options) {\n  disableNativeWatcher();\n\n  var projectContext = new projectContextModule.ProjectContext({\n    projectDir: options.appDir,\n    allowIncompatibleUpdate: options[\"allow-incompatible-update\"]\n  });\n\n  main.captureAndExit(\"=> Errors while initializing project:\", function () {\n    // We're just reading metadata here --- we're not going to resolve\n    // constraints until after we've made our changes.\n    projectContext.initializeCatalog();\n  });\n\n  let exitCode = 0;\n\n  // Split arguments into Cordova plugins and packages\n  const { plugins: pluginsToAdd, packages: packagesToAdd } =\n    splitPluginsAndPackages(options.args);\n\n  if (!_.isEmpty(pluginsToAdd)) {\n    function cordovaPluginAdd() {\n      const plugins = projectContext.cordovaPluginsFile.getPluginVersions();\n      let changed = false;\n\n      for (target of pluginsToAdd) {\n        const { id, version } =\n          require('../cordova/package-id-version-parser.js').parse(target);\n        const newId = newPluginId(id);\n\n        if (!(version && utils.isValidVersion(version, {forCordova: true}))) {\n          Console.error(`${id}: Meteor requires either an exact version \\\n  (e.g. ${id}@1.0.0), a Git URL with a SHA reference, or a local path.`);\n          exitCode = 1;\n        } else if (newId) {\n          plugins[newId] = version;\n          Console.info(`Added Cordova plugin ${newId}@${version} \\\n  (plugin has been renamed as part of moving to npm).`);\n          changed = true;\n        } else {\n          plugins[id] = version;\n          Console.info(`Added Cordova plugin ${id}@${version}.`);\n          changed = true;\n        }\n      }\n\n      changed && projectContext.cordovaPluginsFile.write(plugins);\n    }\n\n    ensureDevBundleDependencies();\n    cordovaPluginAdd();\n  }\n\n  if (_.isEmpty(packagesToAdd)) {\n    return exitCode;\n  }\n\n  // Messages that we should print if we make any changes, but that don't count\n  // as errors.\n  var infoMessages = [];\n  var constraintsToAdd = [];\n  // For every package name specified, add it to our list of package\n  // constraints. Don't run the constraint solver until you have added all of\n  // them -- add should be an atomic operation regardless of the package\n  // order.\n  var messages = buildmessage.capture(function () {\n    _.each(packagesToAdd, function (packageReq) {\n      buildmessage.enterJob(\"adding package \" + packageReq, function () {\n        var constraint = utils.parsePackageConstraint(packageReq, {\n          useBuildmessage: true\n        });\n        if (buildmessage.jobHasMessages()) {\n          return;\n        }\n\n        // It's OK to make errors based on looking at the catalog, because this\n        // is a OnceAtStart command.\n        var packageRecord = projectContext.projectCatalog.getPackage(\n          constraint.package);\n        if (! packageRecord) {\n          buildmessage.error(\"no such package\");\n          return;\n        }\n\n        _.each(constraint.versionConstraint.alternatives, function (subConstr) {\n          if (subConstr.versionString === null) {\n            return;\n          }\n          // Figure out if this version exists either in the official catalog or\n          // the local catalog. (This isn't the same as using the combined\n          // catalog, since it's OK to type \"meteor add foo@1.0.0\" if the local\n          // package is 1.1.0 as long as 1.0.0 exists.)\n          var versionRecord = projectContext.localCatalog.getVersion(\n            constraint.package, subConstr.versionString);\n          if (! versionRecord) {\n            // XXX #2846 here's an example of something that might require a\n            // refresh\n            versionRecord = catalog.official.getVersion(\n              constraint.package, subConstr.versionString);\n          }\n          if (! versionRecord) {\n            buildmessage.error(\"no such version \" + constraint.package + \"@\" +\n                               subConstr.versionString);\n          }\n        });\n        if (buildmessage.jobHasMessages()) {\n          return;\n        }\n\n        var current = projectContext.projectConstraintsFile.getConstraint(\n          constraint.package);\n\n        // Check that the constraint is new. If we are already using the package\n        // at the same constraint in the app, we will log an info message later\n        // (if there are no other errors), but don't fail. Rejecting the entire\n        // command because a part of it is a no-op is confusing.\n        if (! current) {\n          constraintsToAdd.push(constraint);\n        } else if (! current.constraintString &&\n                   ! constraint.constraintString) {\n          infoMessages.push(\n            constraint.package +\n              \" without a version constraint has already been added.\");\n        } else if (current.constraintString === constraint.constraintString) {\n          infoMessages.push(\n            constraint.package + \" with version constraint \" +\n              constraint.constraintString + \" has already been added.\");\n        } else {\n          // We are changing an existing constraint.\n          if (current.constraintString) {\n            infoMessages.push(\n              \"Currently using \" + constraint.package +\n                \" with version constraint \" + current.constraintString + \".\");\n          } else {\n            infoMessages.push(\n              \"Currently using \" +  constraint.package +\n                \" without any version constraint.\");\n          }\n          if (constraint.constraintString) {\n            infoMessages.push(\"The version constraint will be changed to \" +\n                              constraint.constraintString + \".\");\n          } else {\n            infoMessages.push(\"The version constraint will be removed.\");\n          }\n          constraintsToAdd.push(constraint);\n        }\n      });\n    });\n  });\n  if (messages.hasMessages()) {\n    Console.arrowError(\"Errors while parsing arguments:\", 1);\n    Console.printMessages(messages);\n    catalogUtils.explainIfRefreshFailed();  // this is why we're not using captureAndExit\n    return 1;\n  }\n\n  projectContext.projectConstraintsFile.addConstraints(constraintsToAdd);\n\n  // Run the constraint solver, download packages, etc.\n  messages = buildmessage.capture(function () {\n    projectContext.prepareProjectForBuild();\n  });\n  if (messages.hasMessages()) {\n    Console.arrowError(\"Errors while adding packages:\", 1);\n    Console.printMessages(messages);\n    catalogUtils.explainIfRefreshFailed();  // this is why we're not using captureAndExit\n    return 1;\n  }\n\n  _.each(infoMessages, function (message) {\n    Console.info(message);\n  });\n  projectContext.packageMapDelta.displayOnConsole();\n\n  // Show descriptions of directly added packages.\n  Console.info();\n  _.each(constraintsToAdd, function (constraint) {\n    var version = projectContext.packageMap.getInfo(constraint.package).version;\n    var versionRecord = projectContext.projectCatalog.getVersion(\n      constraint.package, version);\n    var deprecatedMessage = \"\"\n    if (versionRecord.deprecated) {\n      if (versionRecord.deprecatedMessage) {\n        deprecatedMessage = ` - DEPRECATED: ${versionRecord.deprecatedMessage}`\n      } else {\n        deprecatedMessage = ' - DEPRECATED'\n      }\n    }\n    Console.info(\n      constraint.package +\n        (versionRecord.description ? (\": \" + versionRecord.description) : \"\") + deprecatedMessage\n    );\n  });\n\n  return exitCode;\n});\n\n\n///////////////////////////////////////////////////////////////////////////////\n// remove\n///////////////////////////////////////////////////////////////////////////////\nmain.registerCommand({\n  name: 'remove',\n  options: {\n    \"allow-incompatible-update\": { type: Boolean }\n  },\n  minArgs: 1,\n  maxArgs: Infinity,\n  requiresApp: true,\n  catalogRefresh: new catalog.Refresh.Never()\n}, function (options) {\n  disableNativeWatcher();\n\n  var projectContext = new projectContextModule.ProjectContext({\n    projectDir: options.appDir,\n    allowIncompatibleUpdate: options[\"allow-incompatible-update\"]\n  });\n  main.captureAndExit(\"=> Errors while initializing project:\", function () {\n    // We're just reading metadata here --- we're not going to resolve\n    // constraints until after we've made our changes.\n    projectContext.readProjectMetadata();\n  });\n\n  let exitCode = 0;\n\n  // Split arguments into Cordova plugins and packages\n  const { plugins: pluginsToRemove, packages }  =\n    splitPluginsAndPackages(options.args);\n\n  if (!_.isEmpty(pluginsToRemove)) {\n    function cordovaPluginRemove() {\n      const plugins = projectContext.cordovaPluginsFile.getPluginVersions();\n      let changed = false;\n\n      for (id of pluginsToRemove) {\n        const newId = newPluginId(id);\n\n        if (/@/.test(id)) {\n          Console.error(`${id}: do not specify version constraints.`);\n          exitCode = 1;\n        } else if (_.has(plugins, id)) {\n          delete plugins[id];\n          Console.info(`Removed Cordova plugin ${id}.`);\n          changed = true;\n        } else if (newId && _.has(plugins, newId)) {\n          delete plugins[newId];\n          Console.info(`Removed Cordova plugin ${newId} \\\n  (plugin has been renamed as part of moving to npm).`);\n          changed = true;\n        } else {\n          Console.error(`Cordova plugin ${id} is not in this project.`);\n          exitCode = 1;\n        }\n      }\n\n      changed && projectContext.cordovaPluginsFile.write(plugins);\n    }\n\n    ensureDevBundleDependencies();\n    cordovaPluginRemove();\n  }\n\n  if (_.isEmpty(packages)) {\n    return exitCode;\n  }\n\n  // For each package name specified, check if we already have it and warn the\n  // user. Because removing each package is a completely atomic operation that\n  // has no chance of failure, this is just a warning message, it doesn't cause\n  // us to stop.\n  let packagesToRemove = [];\n  _.each(packages, function (packageName) {\n    if (/@/.test(packageName)) {\n      Console.error(packageName + \": do not specify version constraints.\");\n      exitCode = 1;\n    } else if (! projectContext.projectConstraintsFile.getConstraint(packageName)) {\n      // Check that we are using the package. We don't check if the package\n      // exists. You should be able to remove non-existent packages.\n      Console.error(packageName  + \" is not a direct dependency in this project.\");\n      exitCode = 1;\n    } else {\n      packagesToRemove.push(packageName);\n    }\n  });\n  if (! packagesToRemove.length) {\n    return exitCode;\n  }\n\n  // Remove the packages from the in-memory representation of .meteor/packages.\n  projectContext.projectConstraintsFile.removePackages(packagesToRemove);\n\n  // Run the constraint solver, rebuild local packages, etc. This will write\n  // our changes to .meteor/packages if it succeeds.\n  main.captureAndExit(\"=> Errors after removing packages\", function () {\n    projectContext.prepareProjectForBuild();\n  });\n  projectContext.packageMapDelta.displayOnConsole();\n\n  // Log that we removed the constraints. It is possible that there are\n  // constraints that we officially removed that the project still 'depends' on,\n  // which is why we do this in addition to dislpaying the PackageMapDelta.\n  _.each(packagesToRemove, function (packageName) {\n    Console.info(packageName + \": removed dependency\");\n  });\n\n  return exitCode;\n});\n\n\n///////////////////////////////////////////////////////////////////////////////\n// refresh\n///////////////////////////////////////////////////////////////////////////////\n\nmain.registerCommand({\n  name: 'refresh',\n  catalogRefresh: new catalog.Refresh.OnceAtStart({ ignoreErrors: false })\n}, function (options) {\n  // We already did it!\n  return 0;\n});\n\n\n///////////////////////////////////////////////////////////////////////////////\n// admin\n///////////////////////////////////////////////////////////////////////////////\n\n// For admin commands, at least in preview0.90, we can be kind of lazy and not bother\n// to pre-check if the command will succeed client-side. That's because we both\n// don't expect them to be called often and don't expect them to be called by\n// inexperienced users, so waiting to get rejected by the server is OK.\n\nmain.registerCommand({\n  name: 'admin maintainers',\n  minArgs: 1,\n  maxArgs: 1,\n  options: {\n    add: { type: String, short: \"a\" },\n    remove: { type: String, short: \"r\" },\n    list: { type: Boolean }\n  },\n  catalogRefresh: new catalog.Refresh.OnceAtStart({ ignoreErrors: false })\n}, function (options) {\n  var name = options.args[0];\n\n  // Yay, checking that options are correct.\n  if (options.add && options.remove) {\n    Console.error(\n      \"Sorry, you can only add or remove one user at a time.\");\n    return 1;\n  }\n  if ((options.add || options.remove) && options.list) {\n    Console.error(\n      \"Sorry, you can't change the users at the same time as you're\",\n      \"listing them.\");\n    return 1;\n  }\n\n  // Now let's get down to business! Fetching the thing.\n  var fullRecord = getReleaseOrPackageRecord(name);\n  var record = fullRecord.record;\n  if (!options.list) {\n\n    try {\n      var conn = packageClient.loggedInPackagesConnection();\n    } catch (err) {\n      packageClient.handlePackageServerConnectionError(err);\n      return 1;\n    }\n\n    try {\n      if (options.add) {\n        Console.info(\"Adding a maintainer to \" + name + \"...\");\n        if (fullRecord.release) {\n          packageClient.callPackageServer(\n            conn, 'addReleaseMaintainer', name, options.add);\n        } else {\n          packageClient.callPackageServer(\n            conn, 'addMaintainer', name, options.add);\n        }\n      } else if (options.remove) {\n        Console.info(\"Removing a maintainer from \" + name + \"...\");\n        if (fullRecord.release) {\n          packageClient.callPackageServer(\n            conn, 'removeReleaseMaintainer', name, options.remove);\n        } else {\n          packageClient.callPackageServer(\n            conn, 'removeMaintainer', name, options.remove);\n        }\n        Console.info(\"Success.\");\n      }\n    } catch (err) {\n      packageClient.handlePackageServerConnectionError(err);\n      return 1;\n    }\n    conn.close();\n\n    // Update the catalog so that we have this information, and find the record\n    // again so that the message below is correct.\n    refreshOfficialCatalogOrDie();\n    fullRecord = getReleaseOrPackageRecord(name);\n    record = fullRecord.record;\n  }\n\n  if (!record) {\n    Console.info(\n      \"Could not get list of maintainers:\",\n      \"package \" + name + \" does not exist.\");\n    return 1;\n  }\n\n  Console.info();\n  Console.info(\"The maintainers for \" + name + \" are:\");\n  _.each(record.maintainers, function (user) {\n    if (! user || !user.username) {\n      Console.rawInfo(\"<unknown>\" + \"\\n\");\n    } else {\n      Console.rawInfo(user.username + \"\\n\");\n    }\n  });\n  return 0;\n});\n\n ///////////////////////////////////////////////////////////////////////////////\n// admin make-bootstrap-tarballs\n///////////////////////////////////////////////////////////////////////////////\n\nmain.registerCommand({\n  name: 'admin make-bootstrap-tarballs',\n  minArgs: 2,\n  maxArgs: 2,\n  hidden: true,\n\n  options: {\n    // Copy the tarball contents to the output directory instead of making a\n    // tarball (useful for testing the release process)\n    \"unpacked\": { type: Boolean },\n    // Build a tarball only for a specific arch\n    \"target-arch\": { type: String }\n  },\n\n  // In this function, we want to use the official catalog everywhere, because\n  // we assume that all packages have been published (along with the release\n  // obviously) and we want to be sure to only bundle the published versions.\n  catalogRefresh: new catalog.Refresh.OnceAtStart({ ignoreErrors: false })\n}, function (options) {\n  var releaseNameAndVersion = options.args[0];\n\n  // We get this as an argument, so it is an OS path. Make it a standard path.\n  var outputDirectory = files.convertToStandardPath(options.args[1]);\n\n  var trackAndVersion = catalogUtils.splitReleaseName(releaseNameAndVersion);\n  var releaseTrack = trackAndVersion[0];\n  var releaseVersion = trackAndVersion[1];\n\n  var releaseRecord = catalog.official.getReleaseVersion(\n    releaseTrack, releaseVersion);\n  if (!releaseRecord) {\n    // XXX this could also mean package unknown.\n    Console.error('Release unknown: ' + releaseNameAndVersion + '');\n    return 1;\n  }\n\n  var toolPackageVersion = releaseRecord.tool &&\n        utils.parsePackageAndVersion(releaseRecord.tool);\n  if (!toolPackageVersion) {\n    throw new Error(\"bad tool in release: \" + releaseRecord.tool);\n  }\n  var toolPackage = toolPackageVersion.package;\n  var toolVersion = toolPackageVersion.version;\n\n  var toolPkgBuilds = catalog.official.getAllBuilds(\n    toolPackage, toolVersion);\n  if (!toolPkgBuilds) {\n    // XXX this could also mean package unknown.\n    Console.error('Tool version unknown: ' + releaseRecord.tool);\n    return 1;\n  }\n  if (!toolPkgBuilds.length) {\n    Console.error('Tool version has no builds: ' + releaseRecord.tool);\n    return 1;\n  }\n\n  // XXX check to make sure this is the three arches that we want? it's easier\n  // during 0.9.0 development to allow it to just decide \"ok, i just want to\n  // build the OSX tarball\" though.\n  var buildArches = _.pluck(toolPkgBuilds, 'buildArchitectures');\n  var osArches = _.map(buildArches, function (buildArch) {\n    var subArches = buildArch.split('+');\n    var osArches = _.filter(subArches, function (subArch) {\n      return subArch.substr(0, 3) === 'os.';\n    });\n    if (osArches.length !== 1) {\n      throw Error(\"build architecture \" + buildArch + \"  lacks unique os.*\");\n    }\n    return osArches[0];\n  });\n\n  if (options['target-arch']) {\n    // check if the passed arch is in the list\n    var arch = options['target-arch'];\n    if (! osArches.includes(arch)) {\n      throw new Error(\n        arch + \": the arch is not available for the release. Available arches: \"\n        + osArches.join(', '));\n    }\n\n    // build only for the selected arch\n    osArches = [arch];\n  }\n\n  Console.error(\n    'Building bootstrap tarballs for architectures ' + osArches.join(', '));\n\n  // Before downloading anything, check that the catalog contains everything we\n  // need for the OSes that the tool is built for.\n  main.captureAndExit(\"=> Errors finding builds:\", function () {\n    _.each(osArches, function (osArch) {\n      _.each(releaseRecord.packages, function (pkgVersion, pkgName) {\n        buildmessage.enterJob({\n          title: \"looking up \" + pkgName + \"@\" + pkgVersion + \" on \" + osArch\n        }, function () {\n          if (!catalog.official.getBuildsForArches(pkgName, pkgVersion, [osArch])) {\n            buildmessage.error(\"missing build of \" + pkgName + \"@\" + pkgVersion +\n                               \" for \" + osArch);\n          }\n        });\n      });\n    });\n  });\n\n  files.mkdir_p(outputDirectory);\n\n  // Get a copy of the data.json.\n  var dataTmpdir = files.mkdtemp();\n  var tmpDataFile = files.pathJoin(dataTmpdir, 'packages.data.db');\n\n  var tmpCatalog = new catalogRemote.RemoteCatalog();\n  tmpCatalog.initialize({\n    packageStorage: tmpDataFile\n  });\n  try {\n    packageClient.updateServerPackageData(tmpCatalog, null);\n  } catch (err) {\n    packageClient.handlePackageServerConnectionError(err);\n    return 2;\n  }\n\n  // Since we're making bootstrap tarballs, we intend to recommend this release,\n  // so we should ensure that once it is downloaded, it knows it is recommended\n  // rather than having a little identity crisis and thinking that a past\n  // release is the latest recommended until it manages to sync.\n  tmpCatalog.forceRecommendRelease(releaseTrack, releaseVersion);\n  tmpCatalog.closePermanently();\n  if (files.exists(tmpDataFile + '-wal')) {\n    throw Error(\"Write-ahead log still exists for \" + tmpDataFile\n                + \" so the data file will be incomplete!\");\n  }\n\n  var packageMap =\n        packageMapModule.PackageMap.fromReleaseVersion(releaseRecord);\n\n  _.each(osArches, function (osArch) {\n    var tmpdir = files.mkdtemp();\n    Console.info(\"Building tarball for \" + osArch);\n\n    // when building for Windows architectures, build Windows-specific\n    // tropohouse and bootstrap tarball\n    var targetPlatform;\n    if (/win/i.test(osArch)) {\n      targetPlatform = \"win32\";\n    }\n\n    // We're going to build and tar up a tropohouse in a temporary directory.\n    var tmpTropo = new tropohouse.Tropohouse(\n      files.pathJoin(tmpdir, '.meteor'),\n      { platform: targetPlatform });\n\n    main.captureAndExit(\n      \"=> Errors downloading packages for \" + osArch + \":\",\n      function () {\n        tmpTropo.downloadPackagesMissingFromMap(packageMap, {\n          serverArchitectures: [osArch]\n        });\n      }\n    );\n\n    // Install the sqlite DB file we synced earlier. We have previously\n    // confirmed that the \"-wal\" file (which could contain extra log entries\n    // that haven't been flushed to the main file yet) doesn't exist, so we\n    // don't have to copy it.\n    files.copyFile(tmpDataFile, config.getPackageStorage({\n      root: tmpTropo.root\n    }));\n\n    // Create the top-level 'meteor' symlink, which links to the latest tool's\n    // meteor shell script.\n    var toolIsopackPath =\n          tmpTropo.packagePath(toolPackage, toolVersion);\n    var toolIsopack = new isopack.Isopack;\n    toolIsopack.initFromPath(toolPackage, toolIsopackPath);\n    var toolRecord = _.findWhere(toolIsopack.toolsOnDisk, {arch: osArch});\n    if (!toolRecord) {\n      throw Error(\"missing tool for \" + osArch);\n    }\n\n    tmpTropo.linkToLatestMeteor(files.pathJoin(\n        tmpTropo.packagePath(toolPackage, toolVersion, true),\n        toolRecord.path,\n        'meteor'));\n\n    if (options.unpacked) {\n      files.cp_r(tmpTropo.root, outputDirectory);\n    } else {\n      files.createTarball(\n        tmpTropo.root,\n        files.pathJoin(outputDirectory,\n          'meteor-bootstrap-' + osArch + '.tar.gz'));\n    }\n  });\n\n  return 0;\n});\n\n// We will document how to set banners on things in a later release.\nmain.registerCommand({\n  name: 'admin set-banners',\n  minArgs: 1,\n  maxArgs: 1,\n  hidden: true,\n  catalogRefresh: new catalog.Refresh.OnceAtStart({ ignoreErrors: false })\n}, function (options) {\n  var bannersFile = options.args[0];\n  try {\n    var bannersData = files.readFile(bannersFile, 'utf8');\n    bannersData = JSON.parse(bannersData);\n  } catch (e) {\n    Console.error(\"Could not parse banners file: \" + e.message);\n    return 1;\n  }\n  if (!bannersData.track) {\n    Console.error(\"Banners file should have a 'track' key.\");\n    return 1;\n  }\n  if (!bannersData.banners) {\n    Console.error(\"Banners file should have a 'banners' key.\");\n    return 1;\n  }\n\n  try {\n    var conn = packageClient.loggedInPackagesConnection();\n  } catch (err) {\n    packageClient.handlePackageServerConnectionError(err);\n    return 1;\n  }\n\n  try {\n    packageClient.callPackageServer(\n      conn, 'setBannersOnReleases',\n      bannersData.track, bannersData.banners);\n  } catch (e) {\n    packageClient.handlePackageServerConnectionError(e);\n    return 1;\n  }\n\n  // Refresh afterwards.\n  refreshOfficialCatalogOrDie();\n  return 0;\n});\n\nmain.registerCommand({\n  name: 'admin recommend-release',\n  minArgs: 1,\n  maxArgs: 1,\n  options: {\n    unrecommend: { type: Boolean, short: \"u\" }\n  },\n  catalogRefresh: new catalog.Refresh.OnceAtStart({ ignoreErrors: false })\n}, function (options) {\n\n  // We want the most recent information.\n  //refreshOfficialCatalogOrDie();\n  var release = options.args[0].split('@');\n  var name = release[0];\n  var version = release[1];\n  if (!version) {\n    Console.error('Must specify release version (track@version)');\n    return 1;\n  }\n\n  // Now let's get down to business! Fetching the thing.\n  var record = catalog.official.getReleaseTrack(name);\n  if (!record) {\n    Console.error();\n    Console.error('There is no release track named ' + name);\n    return 1;\n  }\n\n  try {\n    var conn = packageClient.loggedInPackagesConnection();\n  } catch (err) {\n    packageClient.handlePackageServerConnectionError(err);\n    return 1;\n  }\n\n  try {\n    if (options.unrecommend) {\n      Console.info(\"Unrecommending \" + name + \"@\" + version + \"...\");\n      packageClient.callPackageServer(\n        conn, 'unrecommendVersion', name, version);\n      Console.info(\"Success.\");\n      Console.info(name + \"@\" + version, \"is no longer a recommended release\");\n    } else {\n      Console.info(\"Recommending \" + options.args[0] + \"...\");\n      packageClient.callPackageServer(conn, 'recommendVersion', name, version);\n      Console.info(\"Success.\");\n      Console.info(name + \"@\" + version, \"is now a recommended release\");\n    }\n  } catch (err) {\n    packageClient.handlePackageServerConnectionError(err);\n    return 1;\n  }\n  conn.close();\n  refreshOfficialCatalogOrDie();\n\n  return 0;\n});\n\n\nmain.registerCommand({\n  name: 'admin change-homepage',\n  minArgs: 2,\n  maxArgs: 2,\n  catalogRefresh: new catalog.Refresh.OnceAtStart({ ignoreErrors: false })\n}, function (options) {\n\n  // We want the most recent information.\n  //refreshOfficialCatalogOrDie();\n  var name = options.args[0];\n  var url = options.args[1];\n\n  // Now let's get down to business! Fetching the thing.\n  var record = catalog.official.getPackage(name);\n  if (!record) {\n    Console.error();\n    Console.error('There is no package named ' + name);\n    return 1;\n  }\n\n  try {\n    var conn = packageClient.loggedInPackagesConnection();\n  } catch (err) {\n    packageClient.handlePackageServerConnectionError(err);\n    return 1;\n  }\n\n  try {\n    Console.rawInfo(\n        \"Changing homepage on \"\n          + name + \" to \" + url + \"...\\n\");\n      packageClient.callPackageServer(conn,\n          '_changePackageHomepage', name, url);\n      Console.info(\" done\");\n  } catch (err) {\n    packageClient.handlePackageServerConnectionError(err);\n    return 1;\n  }\n  conn.close();\n  refreshOfficialCatalogOrDie();\n\n  return 0;\n});\n\n\nmain.registerCommand({\n  name: 'admin set-unmigrated',\n  minArgs: 1,\n  options: {\n    \"success\" : {type: Boolean}\n  },\n  hidden: true,\n  catalogRefresh: new catalog.Refresh.OnceAtStart({ ignoreErrors: false })\n}, function (options) {\n\n  // We don't care about having the most recent information, but we do want the\n  // option to either unmigrate a specific version, or to unmigrate an entire\n  // package. So, for an entire package, let's get all of its versions.\n  var name = options.args[0];\n  var versions = [];\n  var nSplit = name.split('@');\n  if (nSplit.length > 2) {\n    throw new main.ShowUsage;\n  } else if (nSplit.length == 2) {\n    versions = [nSplit[1]];\n    name = nSplit[0];\n  } else {\n    versions = catalog.official.getSortedVersions(name);\n  }\n\n  try {\n    var conn = packageClient.loggedInPackagesConnection();\n  } catch (err) {\n    packageClient.handlePackageServerConnectionError(err);\n    return 1;\n  }\n\n  try {\n    var status = options.success ? \"successfully\" : \"unsuccessfully\";\n    // XXX: This should probably use progress bars instead.\n    _.each(versions, function (version) {\n      Console.rawInfo(\n        \"Setting \" + name + \"@\" + version + \" as \" +\n         status + \" migrated ...\\n\");\n      packageClient.callPackageServer(\n        conn,\n        '_changeVersionMigrationStatus',\n        name, version, !options.success);\n      Console.info(\"done.\");\n    });\n  } catch (err) {\n    packageClient.handlePackageServerConnectionError(err);\n    return 1;\n  }\n  conn.close();\n  refreshOfficialCatalogOrDie();\n\n  return 0;\n});\n"],"file":"tools/cli/commands-packages.js.map"}