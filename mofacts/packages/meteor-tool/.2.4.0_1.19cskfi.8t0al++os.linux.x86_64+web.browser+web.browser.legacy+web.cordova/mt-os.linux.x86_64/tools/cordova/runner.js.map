{"version":3,"sources":["/tools/cordova/runner.js"],"names":["module","export","CordovaRunner","_","link","default","v","buildmessage","runLog","Console","main","displayNameForPlatform","prepareProjectForBuild","constructor","cordovaProject","runTargets","started","projectContext","platformsForRunTargets","uniq","map","runTarget","platform","checkPlatformsForRunTargets","ensurePlatformsAreSynchronized","satisfied","messages","capture","title","checkPlatformRequirements","hasMessages","printMessages","ExitWithCode","printWarningsIfNeeded","packageMap","getInfo","warn","labelWarn","url","findWhere","isDevice","prepareProject","bundlePath","pluginVersions","options","assertInCapture","enterJob","prepareFromAppBundle","jobHasMessages","prepareForPlatform","startRunTargets","Promise","await","start","log","arrow","havePlatformsChangedSinceLastRun","cordovaPlatformsInApp","isEqual","intersection","havePluginsChangedSinceLastRun"],"mappings":"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","sourcesContent":["import _ from 'underscore';\nimport buildmessage from '../utils/buildmessage.js';\nimport runLog from '../runners/run-log.js';\nimport { Console } from '../console/console.js';\nimport main from '../cli/main.js';\n\nimport { displayNameForPlatform, prepareProjectForBuild } from './index.js';\n\nexport class CordovaRunner {\n  constructor(cordovaProject, runTargets) {\n    this.cordovaProject = cordovaProject;\n    this.runTargets = runTargets;\n\n    this.started = false;\n  }\n\n  get projectContext() {\n    return this.cordovaProject.projectContext;\n  }\n\n  get platformsForRunTargets() {\n    return _.uniq(this.runTargets.map((runTarget) => runTarget.platform));\n  }\n\n  checkPlatformsForRunTargets() {\n    this.cordovaProject.ensurePlatformsAreSynchronized();\n\n    let satisfied = true;\n    const messages = buildmessage.capture(\n      { title: `checking platform requirements` }, () => {\n      for (const platform of this.platformsForRunTargets) {\n        satisfied =\n          this.cordovaProject.checkPlatformRequirements(platform) &&\n          satisfied;\n      }\n    });\n\n    if (messages.hasMessages()) {\n      Console.printMessages(messages);\n      throw new main.ExitWithCode(1);\n    } else if (!satisfied) {\n      throw new main.ExitWithCode(1);\n    };\n  }\n\n  printWarningsIfNeeded() {\n    // OAuth2 packages don't work so well with any mobile platform except the\n    // iOS Simulator. Print a warning and direct users to the wiki page for help.\n    if (this.projectContext.packageMap.getInfo('oauth2')) {\n      Console.warn();\n      Console.labelWarn(\n        \"It looks like you are using OAuth2 login in your app. \" +\n        \"Meteor's OAuth2 implementation does not currently work with \" +\n        \"mobile apps in local development mode, except in the iOS \" +\n        \"simulator. You can run the iOS simulator with 'meteor run ios'. \" +\n        \"For additional workarounds, see \" +\n        Console.url(\n          \"https://github.com/meteor/meteor/wiki/\" +\n          \"OAuth-for-mobile-Meteor-clients.\"));\n    }\n\n    // If we are targeting remote devices, warn about ports and same network.\n    if (_.findWhere(this.runTargets, { isDevice: true })) {\n      Console.warn();\n      Console.labelWarn(\n        \"You are testing your app on a remote device. \" +\n        \"For the mobile app to be able to connect to the local server, make \" +\n        \"sure your device is on the same network, and that the network \" +\n        \"configuration allows clients to talk to each other \" +\n        \"(no client isolation).\");\n    }\n  }\n\n  prepareProject(bundlePath, pluginVersions, options) {\n    buildmessage.assertInCapture();\n\n    buildmessage.enterJob({ title: \"preparing Cordova project\" }, () => {\n      this.cordovaProject.prepareFromAppBundle(bundlePath,\n        pluginVersions, options);\n\n      if (buildmessage.jobHasMessages()) {\n        return;\n      }\n\n      for (let platform of this.platformsForRunTargets) {\n        this.cordovaProject.prepareForPlatform(platform, options);\n      }\n    });\n\n    this.pluginVersions = pluginVersions;\n  }\n\n  startRunTargets() {\n    this.started = false;\n\n    for (let runTarget of this.runTargets) {\n      const messages = buildmessage.capture({ title: `starting ${runTarget.title}` }, () => {\n        Promise.await(runTarget.start(this.cordovaProject));\n      });\n      if (messages.hasMessages()) {\n        Console.printMessages(messages);\n      } else {\n        runLog.log(`Started ${runTarget.title}.`, { arrow: true });\n      }\n    }\n\n    this.started = true;\n  }\n\n  havePlatformsChangedSinceLastRun() {\n    const platformsForRunTargets = this.platformsForRunTargets;\n    if (!platformsForRunTargets) {\n      return false;\n    }\n\n    const cordovaPlatformsInApp = this.cordovaProject.cordovaPlatformsInApp;\n\n    return !_.isEqual(platformsForRunTargets,\n      _.intersection(platformsForRunTargets, cordovaPlatformsInApp));\n  }\n\n  havePluginsChangedSinceLastRun(pluginVersions) {\n    return this.pluginVersions &&\n      !_.isEqual(this.pluginVersions, pluginVersions);\n  }\n}\n"],"file":"tools/cordova/runner.js.map"}