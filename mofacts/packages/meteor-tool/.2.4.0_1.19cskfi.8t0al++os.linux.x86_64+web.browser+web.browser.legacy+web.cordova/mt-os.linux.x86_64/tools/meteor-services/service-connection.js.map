{"version":3,"sources":["/tools/meteor-services/service-connection.js"],"names":["loadIsopackage","module1","link","v","files","require","fiberHelpers","ServiceConnection","endpointUrl","options","self","ddpClient","Object","assign","connectTimeoutMs","heartbeatInterval","retry","onConnected","connected","currentPromise","Error","connectPromise","resolve","process","env","CAFILE","npmFayeOptions","ca","readFile","connection","DDP","connect","makeFulfillablePromise","_stream","on","error","errorType","promise","reject","ConnectionError","await","prototype","call","name","args","apply","push","err","result","subscribeAndWait","subPromise","onReady","onError","e","sub","subscribe","close","module","exports"],"mappings":"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","sourcesContent":["import { loadIsopackage } from '../tool-env/isopackets.js';\nvar files = require('../fs/files');\nvar fiberHelpers = require(\"../utils/fiber-helpers.js\");\n\n// Wrapper to manage a connection to a DDP service. The main difference between\n// it and a raw DDP connection is that the constructor blocks until a successful\n// connection is made; you can't call methods or subscribe asynchronously (ie,\n// there's always a wait); and if the connection disconnects (with or without\n// error) while we're waiting on a method call or subscription, the\n// apply/subscribeAndWait call throws the given error. This functionality should\n// eventually end up in the DDP client in one form or another.\n//\n// ServiceConnections never reconnect once they have successfully negotiated the\n// DDP protocol: other than perhaps some initial attempts with the wrong\n// protocol selected, they use just one underlying TCP connection, and fail\n// fast.\n//\n// - endpointUrl: the url to connect to\n// - options:\n//   - headers: an object containing extra headers to use when opening the\n//              DDP connection\n//   - _dontPrintErrors: boolean\n//   ...and anything else you'd normally pass as options to DDP.connect\n//\nvar ServiceConnection = function (endpointUrl, options) {\n  const self = this;\n  const ddpClient = loadIsopackage('ddp-client');\n\n  // ServiceConnection never should retry connections: just one TCP connection\n  // is enough, and any errors on it should be detected promptly.\n  options = Object.assign({}, options, {\n    // We found that this was likely to time out with the DDP default of 10s,\n    // especially if the CPU is churning on bundling (eg, for the stats\n    // connection which we start in parallel with bundling).\n    connectTimeoutMs: 30000,\n    // Disable client->server heartbeats for service connections.  Users with\n    // slow internet connections were seeing heartbeat timeouts because the\n    // heartbeats were buried behind large responses (eg\n    // https://github.com/meteor/meteor/issues/2777).\n    heartbeatInterval: 0,\n    retry: false,\n    onConnected: function () {\n      self.connected = true;\n      if (! self.currentPromise) {\n        throw Error(\"nobody waiting for connection?\");\n      }\n      if (self.currentPromise !== connectPromise) {\n        throw Error(\"waiting for something that isn't connection?\");\n      }\n      self.currentPromise = null;\n      connectPromise.resolve();\n      connectPromise.resolve = null;\n    }\n  });\n  if (process.env.CAFILE) {\n    options.npmFayeOptions = {\n      ca: files.readFile(process.env.CAFILE)\n    }\n  }\n\n  self.connection = ddpClient.DDP.connect(endpointUrl, options);\n\n  // Wait until we have some sort of initial connection or error (including the\n  // 10-second timeout built into our DDP client).\n\n  var connectPromise = self.currentPromise =\n    fiberHelpers.makeFulfillablePromise();\n\n  self.connection._stream.on('disconnect', function (error) {\n    self.connected = false;\n    if (error && error.errorType === \"DDP.ForcedReconnectError\") {\n      // OK, we requested this, probably due to version negotation failure.\n      //\n      // This ought to have happened before we successfully connect, unless\n      // somebody adds other calls to forced reconnect to Meteor...\n      if (! connectPromise.resolve) {\n        throw Error(\"disconnect before connect?\");\n      }\n      // Otherwise, ignore this error. We're going to reconnect!\n      return;\n    }\n    // Are we waiting to connect or for the result of a method apply or a\n    // subscribeAndWait? If so, disconnecting is a problem.\n    if (self.currentPromise) {\n      var promise = self.currentPromise;\n      self.currentPromise = null;\n      promise.reject(\n        error || new ddpClient.DDP.ConnectionError(\n          \"DDP disconnected while connection in progress\")\n      );\n    } else if (error) {\n      // We got some sort of error with nobody listening for it; handle it.\n      // XXX probably have a better way to handle it than this\n      throw error;\n    }\n  });\n\n  connectPromise.await();\n};\n\nObject.assign(ServiceConnection.prototype, {\n  call: function (name, ...args) {\n    return this.apply(name, args);\n  },\n\n  apply: function (...args) {\n    var self = this;\n\n    if (self.currentPromise) {\n      throw Error(\"Can't wait on two things at once!\");\n    }\n    self.currentPromise = fiberHelpers.makeFulfillablePromise();\n\n    args.push(function (err, result) {\n      if (!self.currentPromise) {\n        // We're not still waiting? That means we had a disconnect event. But\n        // then how did we actually get this result?\n        throw Error(\"nobody listening for result?\");\n      }\n      var promise = self.currentPromise;\n      self.currentPromise = null;\n      if (err) {\n        promise.reject(err);\n      } else {\n        promise.resolve(result);\n      }\n    });\n\n    self.connection.apply(...args);\n\n    return self.currentPromise.await();\n  },\n\n  // XXX derived from _subscribeAndWait in ddp_connection.js\n  // -- but with a different signature..\n  subscribeAndWait: function (...args) {\n    var self = this;\n\n    if (self.currentPromise) {\n      throw Error(\"Can't wait on two things at once!\");\n    }\n    var subPromise = self.currentPromise = fiberHelpers.makeFulfillablePromise();\n\n    args.push({\n      onReady: function () {\n        if (!self.currentPromise) {\n          // We're not still waiting? That means we had a disconnect event. But\n          // then how did we actually get this result?\n          throw Error(\"nobody listening for subscribe result?\");\n        }\n        var promise = self.currentPromise;\n        self.currentPromise = null;\n        promise.resolve();\n      },\n      onError: function (e) {\n        if (self.currentPromise === subPromise) {\n          // Error while waiting for this sub to become ready? Throw it.\n          self.currentPromise = null;\n          subPromise.reject(e);\n        }\n        // ... ok, this is a late error on the sub.\n        // XXX handle it somehow better\n        throw e;\n      }\n    });\n\n    var sub = self.connection.subscribe(...args);\n    subPromise.await();\n    return sub;\n  },\n\n  close: function () {\n    var self = this;\n    if (self.connection) {\n      self.connection.close();\n      self.connection = null;\n    }\n  }\n});\n\nmodule.exports = ServiceConnection;\n"],"file":"tools/meteor-services/service-connection.js.map"}