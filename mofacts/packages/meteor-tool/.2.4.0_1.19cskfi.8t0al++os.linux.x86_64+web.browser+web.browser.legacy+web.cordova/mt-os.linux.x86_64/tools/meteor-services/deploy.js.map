{"version":3,"sources":["/tools/meteor-services/deploy.js"],"names":["_objectSpread","module1","link","default","v","export","bundleAndDeploy","deleteApp","temporaryMongoUrl","listAuthorized","changeAuthorized","listSites","pathJoin","createTarGzStream","getSettings","mkdtemp","changeTempDirStatus","exists","findGitCommitHash","request","buildmessage","pollForRegistrationCompletion","doInteractivePasswordLogin","loggedInUsername","isLoggedIn","maybePrintRegistrationLink","recordPackages","Console","Profile","sleepForMilliseconds","millisecondsToWait","Promise","resolve","time","setTimeout","hasOwn","Object","prototype","hasOwnProperty","CAPABILITIES","deployRpc","options","assign","headers","cookie","Error","qs","capabilities","slice","deployWithTokenProps","waitForDeploy","push","deployURLBase","getDeployURL","site","await","printDeployURL","info","operand","result","url","operation","method","bodyStream","useAuthHeader","encoding","e","statusCode","errorMessage","message","response","body","ret","length","contentType","payload","JSON","parse","hasAllExpectedKeys","expectPayload","map","key","call","every","x","expectMessage","authedRpc","rpcOptions","preflight","infoResult","promptIfAuthFails","error","isInteractive","username","readLine","prompt","stream","process","stderr","loginOptions","suppressErrorMessage","protection","authorized","printUnauthorizedMessage","command","canonicalizeSite","match","parsed","require","hostname","pathname","hash","query","pollForDeploymentSuccess","versionId","deployPollTimeout","pollingState","PollingState","initialWaitTimeMs","deploymentPollResult","pollForDeploy","isActive","constructor","timeoutMs","pollIntervalMs","maxErrors","FIFTEEN_MINUTES_MS","MAX_ERRORS","deadline","Date","getTime","start","currentMessage","errors","versionStatusResult","warn","finishStatus","isFinished","galaxyUrl","recordPackageUsage","undefined","preflightPassword","isBuildOnly","noLogout","rawOptions","deployToken","owner","projectDir","projectContext","getProjectLocalDirectory","gitCommitHash","env","METEOR_GIT_COMMIT_HASH","buildCache","getBuildCache","isCacheBuildValid","isCacheBuildEnabled","buildDir","bundlePath","getBuildDirAndBundlePath","saveBuildCache","settings","messages","capture","title","rootPath","cwd","settingsFile","hasMessages","bundler","bundleResult","bundle","outputPath","buildOptions","formatMessages","what","enterJob","free","plan","mongo","timeout","newVersionId","deployPollingTimeoutMs","checkAuthThenSendRpc","loginResult","doUsernamePasswordLogin","retry","forEach","rawInfo","action","verbs","add","remove","transfer","sites","sort","addScheme","hostOrURL","galaxyDiscoveryCache","Map","DEPLOY_HOSTNAME","trim","defaultURL","has","get","p","discoverGalaxy","catch","set","scheme","discoveryURL","json","strictSSL","followRedirect","galaxyDiscoveryVersion","deployURL"],"mappings":"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","sourcesContent":["// URL parsing and validation\n// RPC to server (endpoint, arguments)\n// see if RPC requires password\n// prompt for password\n// send RPC with or without password as required\n\nimport {\n  pathJoin,\n  createTarGzStream,\n  getSettings,\n  mkdtemp,\n  changeTempDirStatus,\n  exists,\n  findGitCommitHash,\n} from '../fs/files';\nimport { request } from '../utils/http-helpers.js';\nimport buildmessage from '../utils/buildmessage.js';\nimport {\n  pollForRegistrationCompletion,\n  doInteractivePasswordLogin,\n  loggedInUsername,\n  isLoggedIn,\n  maybePrintRegistrationLink,\n} from './auth.js';\nimport { recordPackages } from './stats.js';\nimport { Console } from '../console/console.js';\nimport { Profile } from '../tool-env/profile';\n\nfunction sleepForMilliseconds(millisecondsToWait) {\n  return new Promise(function(resolve) {\n    let time = setTimeout(() => resolve(null), millisecondsToWait)\n  });\n}\n\nconst hasOwn = Object.prototype.hasOwnProperty;\n\nconst CAPABILITIES = ['showDeployMessages', 'canTransferAuthorization'];\n\n// Make a synchronous RPC to the \"classic\" Meteor Software deploy API. The\n// deploy API has the following contract:\n//\n// - Parameters are always sent in the query string.\n// - A tarball can be sent in the body (when deploying an app).\n// - On success, all calls return HTTP 200. Those that return a value\n//   either return a JSON payload or a plaintext payload and the\n//   Content-Type header is set appropriately.\n// - On failure, calls return some non-200 HTTP status code and\n//   provide a human-readable error message in the body.\n// - URLs are of the form \"/[operation]/[site]\".\n// - Body encodings are always utf8.\n// - Meteor Accounts auth is possible using first-party Meteor Software cookies\n//   (rather than OAuth).\n//\n// Options include:\n// - method: GET, POST, or DELETE. default GET\n// - operation: \"info\", \"logs\", \"mongo\", \"deploy\", \"authorized-apps\",\n//   \"version-status\"\n// - site: site name. Pass this even if the site isn't part of the URL\n//   so that Galaxy discovery works properly\n// - operand: the part of the URL after the operation. If not set,\n//   defaults to site\n// - expectPayload: an array of key names. if present, then we expect\n//   the server to return JSON content on success and to return an\n//   object with all of these key names.\n// - expectMessage: if true, then we expect the server to return text\n//   content on success.\n// - bodyStream: if provided, a stream to use as the request body\n// - any other parameters accepted by the node 'request' module, for example\n//   'qs' to set query string parameters\n// - printDeployURL: provided if we should show the deploy URL; set this\n//   for the first RPC of any user command\n//\n// Waits until server responds, then returns an object with the\n// following keys:\n//\n// - statusCode: HTTP status code, or null if the server couldn't be\n//   contacted\n// - payload: if successful, and the server returned a JSON body, the\n//   parsed JSON body\n// - message: if successful, and the server returned a text body, the\n//   body as a string\n// - errorMessage: if unsuccessful, a human-readable error message,\n//   derived from either a transport-level exception, the response\n//   body, or a generic 'try again later' message, as appropriate\n\nfunction deployRpc(options) {\n  options = Object.assign({}, options);\n  options.headers = Object.assign({}, options.headers || {});\n  if (options.headers.cookie) {\n    throw new Error(\"sorry, can't combine cookie headers yet\");\n  }\n  options.qs = Object.assign(\n    {},\n    options.qs,\n    { capabilities: CAPABILITIES.slice() },\n    options.deployWithTokenProps || {}\n  );\n  // If we are waiting for deploy, we let Galaxy know so it can\n  // use that information to send us the right deploy message response.\n  if (options.waitForDeploy) {\n    options.qs.capabilities.push('willPollVersionStatus');\n  }\n\n  const deployURLBase = getDeployURL(options.site).await();\n\n  if (options.printDeployURL) {\n    Console.info(\"Talking to Galaxy servers at \" + deployURLBase);\n  }\n\n  let operand = '';\n  if (options.operand) {\n    operand = `/${options.operand}`;\n  } else if (options.site) {\n    operand = `/${options.site}`;\n  }\n\n  // XXX: Reintroduce progress for upload\n  try {\n    var result = request(Object.assign(options, {\n      url: deployURLBase + '/' + options.operation +\n        operand,\n      method: options.method || 'GET',\n      bodyStream: options.bodyStream,\n      useAuthHeader: true,\n      encoding: 'utf8' // Hack, but good enough for the deploy server..\n    }));\n  } catch (e) {\n    return {\n      statusCode: null,\n      errorMessage: \"Connection error (\" + e.message + \")\"\n    };\n  }\n\n  var response = result.response;\n  var body = result.body;\n  var ret = { statusCode: response.statusCode };\n\n  if (response.statusCode !== 200) {\n    if (body.length > 0) {\n      ret.errorMessage = body;\n    } else {\n      ret.errorMessage = \"Server error \" + response.statusCode +\n        \" (please try again later)\";\n    }\n    return ret;\n  }\n\n  var contentType = response.headers[\"content-type\"] || '';\n  if (contentType === \"application/json; charset=utf-8\") {\n    try {\n      ret.payload = JSON.parse(body);\n    } catch (e) {\n      ret.errorMessage =\n        \"Server error (please try again later)\\n\"\n        + \"Invalid JSON: \" + body;\n      return ret;\n    }\n  } else if (contentType === \"text/plain; charset=utf-8\") {\n    ret.message = body;\n  }\n\n  const hasAllExpectedKeys =\n    (options.expectPayload || [])\n      .map(key => ret.payload && hasOwn.call(ret.payload, key))\n      .every(x => x);\n\n  if ((options.expectPayload && ! hasOwn.call(ret, 'payload')) ||\n      (options.expectMessage && ! hasOwn.call(ret, 'message')) ||\n      ! hasAllExpectedKeys) {\n    delete ret.payload;\n    delete ret.message;\n\n    ret.errorMessage = \"Server error (please try again later)\\n\" +\n      \"Response missing expected keys.\";\n  }\n\n  return ret;\n};\n\n// Just like deployRpc, but also presents authentication. It will\n// prompt the user for a password, or use a Meteor Accounts\n// credential, as necessary.\n//\n// Additional options (beyond deployRpc):\n//\n// - preflight: if true, do everything but the actual RPC. The only\n//   other necessary option is 'site'. On failure, returns an object\n//   with errorMessage (just like deployRpc). On success, returns an\n//   object without an errorMessage key and with possible keys\n//   'protection' (value either 'password' or 'account') and\n//   'authorized' (true if the current user is an authorized user on\n//   this app).\n// - promptIfAuthFails: if true, then we think we are logged in with the\n//   accounts server but our authentication actually fails, then prompt\n//   the user to log in with a username and password and then resend the\n//   RPC.\nfunction authedRpc(options) {\n  var rpcOptions = Object.assign({}, options);\n  var preflight = rpcOptions.preflight;\n  delete rpcOptions.preflight;\n\n  // Fetch auth info\n  var infoResult = deployRpc({\n    operation: 'info',\n    site: rpcOptions.site,\n    expectPayload: [],\n    qs: options.qs,\n    printDeployURL: options.printDeployURL,\n    waitForDeploy: options.waitForDeploy,\n  });\n  delete rpcOptions.printDeployURL;\n\n  if (infoResult.statusCode === 401 && rpcOptions.promptIfAuthFails) {\n    Console.error(\"Authentication failed or login token expired.\");\n\n    if (!Console.isInteractive()) {\n      return {\n        statusCode: 401,\n        errorMessage: \"login failed.\"\n      };\n    }\n\n    // Our authentication didn't validate, so prompt the user to log in\n    // again, and resend the RPC if the login succeeds.\n    var username = Console.readLine({\n      prompt: \"Username: \",\n      stream: process.stderr\n    });\n    var loginOptions = {\n      username: username,\n      suppressErrorMessage: true\n    };\n    if (doInteractivePasswordLogin(loginOptions)) {\n      return authedRpc(options);\n    } else {\n      return {\n        statusCode: 403,\n        errorMessage: \"login failed.\"\n      };\n    }\n  }\n\n  if (infoResult.statusCode === 404) {\n    // Doesn't exist, therefore not protected.\n    return preflight ? { } : deployRpc(rpcOptions);\n  }\n\n  if (infoResult.errorMessage) {\n    return infoResult;\n  }\n  var info = infoResult.payload;\n\n  if (! hasOwn.call(info, 'protection')) {\n    // Not protected.\n    //\n    // XXX should prompt the user to claim the app (only if deploying?)\n    return preflight ? { } : deployRpc(rpcOptions);\n  }\n\n  if (info.protection === \"account\") {\n    if (! hasOwn.call(info, 'authorized')) {\n      // Absence of this implies that we are not an authorized user on\n      // this app\n      if (preflight) {\n        return { protection: info.protection };\n      } else {\n        return {\n          statusCode: null,\n          errorMessage: isLoggedIn() ?\n            // XXX better error message (probably need to break out of\n            // the 'errorMessage printed with brief prefix' pattern)\n            \"Not an authorized user on this site\" :\n            \"Not logged in\"\n        };\n      }\n    }\n\n    // Sweet, we're an authorized user.\n    if (preflight) {\n      return {\n        protection: info.protection,\n        authorized: info.authorized\n      };\n    } else {\n      return deployRpc(rpcOptions);\n    }\n  }\n\n  return {\n    statusCode: null,\n    errorMessage: \"You need a newer version of Meteor to work with this site\"\n  };\n};\n\n// When the user is trying to do something with an app that they are not\n// authorized for, instruct them to get added via 'meteor authorized\n// --add' or switch accounts.\nfunction printUnauthorizedMessage() {\n  var username = loggedInUsername();\n  Console.error(\"Sorry, that site belongs to a different user.\");\n  if (username) {\n    Console.error(\"You are currently logged in as \" + username + \".\");\n  }\n  Console.error();\n  Console.error(\n    \"Either have the site owner use \" +\n    Console.command(\"'meteor authorized --add'\") + \" to add you as an \" +\n    \"authorized developer for the site, or switch to an authorized account \" +\n    \"with \" + Console.command(\"'meteor login'\") + \".\");\n};\n\n// Take a proposed sitename for deploying to. If it looks\n// syntactically good, canonicalize it (this essentially means\n// stripping 'http://' or a trailing '/' if present) and return it. If\n// not, print an error message to stderr and return null.\nfunction canonicalizeSite(site) {\n  // There are actually two different bugs here. One is that the meteor deploy\n  // server does not support apps whose total site length is greater than 63\n  // (because of how it generates Mongo database names); that can be fixed on\n  // the server. After that, this check will be too strong, but we still will\n  // want to check that each *component* of the hostname is at most 63\n  // characters (url.parse will do something very strange if a component is\n  // larger than 63, which is the maximum legal length).\n  if (site.length > 63) {\n    Console.error(\n      \"The maximum hostname length currently supported is 63 characters: \" +\n      site + \" is too long. \" +\n      \"Please try again with a shorter URL for your site.\");\n    return false;\n  }\n\n  var url = site;\n  if (!url.match(':\\/\\/')) {\n    url = 'http://' + url;\n  }\n\n  var parsed = require('url').parse(url);\n\n  if (! parsed.hostname) {\n    Console.info(\n      \"Please specify a domain to connect to, such as www.example.com or \" +\n      \"http://www.example.com/\");\n    return false;\n  }\n\n  if (parsed.pathname != '/' || parsed.hash || parsed.query) {\n    Console.info(\n      \"Sorry, Meteor does not yet support specific path URLs, such as \" +\n      Console.url(\"http://www.example.com/blog\") + \" .  Please specify the root of a domain.\");\n    return false;\n  }\n\n  return parsed.hostname;\n};\n\n// Executes the poll to check for deployment success and outputs proper messages\n// to user about the status of their app during the polling process\nasync function pollForDeploymentSuccess(versionId, deployPollTimeout, result, site, deployWithTokenProps) {\n  // Create a default polling configuration for polling for deploy / build\n  // In the future, we may change this to be user-configurable or smart\n  // The user can only currently configure the polling timeout via a flag\n  const pollingState = new PollingState(deployPollTimeout);\n  await sleepForMilliseconds(pollingState.initialWaitTimeMs);\n  const deploymentPollResult = await pollForDeploy(pollingState, versionId, site, deployWithTokenProps);\n  if (deploymentPollResult && deploymentPollResult.isActive) {\n    return 0;\n  }\n  return 1;\n}\n\n// Creates a polling configuration with defaults if fields left unset\n// Right now we only use the default unless timeout is specified\n// We envision potentially creating this configuration object in a programmatic\n// way or via user-specification in the future.\n// Default initialWaitTime is 10 seconds – this is the time to wait before checking at all\n// Default pollInterval is 700 milliseconds – this is the wait interval between polls\n// Default timeout is 15 minutes\n// `start` tracks the time when we started polling\n// `currentMessage` tracks what the current status message is for this version\nclass PollingState {\n  constructor(timeoutMs,\n    initialWaitTimeMs,\n    pollIntervalMs,\n    maxErrors) {\n      const FIFTEEN_MINUTES_MS = 15*60*1000;\n      const MAX_ERRORS = 5;\n      this.initialWaitTimeMs = initialWaitTimeMs || 10*1000;\n      this.pollIntervalMs = pollIntervalMs || 700;\n      this.deadline = timeoutMs ? new Date(new Date().getTime() + timeoutMs) :\n        new Date(new Date().getTime() + FIFTEEN_MINUTES_MS);\n      this.start = new Date();\n      this.currentMessage = '';\n      this.errors = 0;\n      this.maxErrors = maxErrors || MAX_ERRORS;\n  }\n}\n\n// Poll the \"version-status\" endpoint for the build and deploy status\n// of a specified version ID with a polling configuration.\n// This will only end successfully when the polling endpoint reports that\n// the version deployment is finished. The version-status endpoints will report\n// messages pertaining to the status of the version, which will then be reported\n// directly to the user. When the poll is complete, it will return an object\n// with information about the final state of the version and the app.\nasync function pollForDeploy(pollingState, versionId, site, deployWithTokenProps) {\n  const {\n    deadline,\n    pollIntervalMs,\n    currentMessage,\n  } = pollingState;\n\n  // Do a call to the version-status endpoint for the specified versionId\n  const versionStatusResult = deployRpc({\n    method: 'GET',\n    operation: 'version-status',\n    site,\n    operand: versionId,\n    expectPayload: ['message', 'finishStatus'],\n    printDeployURL: false,\n    deployWithTokenProps\n  });\n\n  // Check the details of the Version Status response and compare message to last call\n  if (versionStatusResult &&\n    versionStatusResult.payload &&\n    versionStatusResult.payload.message) {\n      const message = versionStatusResult.payload.message;\n      if (currentMessage !== message) {\n        Console.info(message);\n        pollingState.currentMessage = message;\n      }\n  } else {\n    // If we did not get a valid Version Status response, just fail silently and\n    // keep polling as per usual – this may have just been a whiff from Galaxy.\n    // We do the retry here because we might hit an error if we try to parse the\n    // result of the version-status call below.\n    pollingState.errors++;\n    const errorMessage = versionStatusResult.errorMessage || 'Unexpected error from Galaxy';\n    if (pollingState.errors >= pollingState.maxErrors) {\n      Console.error(`Error checking deploy status; giving up: ${errorMessage}`);\n      return 1;\n    } else if (new Date() < deadline) {\n      Console.warn(`Error checking deploy status; will retry: ${errorMessage}`);\n      await sleepForMilliseconds(pollIntervalMs);\n      return await pollForDeploy(pollingState, versionId, site, deployWithTokenProps);\n    }\n  }\n\n  const finishStatus = versionStatusResult.payload.finishStatus;\n  // Poll again if version isn't finished and we haven't exceeded the timeout\n  if(new Date() < deadline && !finishStatus.isFinished) {\n    // Wait for a set interval and then poll again\n    await sleepForMilliseconds(pollIntervalMs);\n    return await pollForDeploy(pollingState, versionId, site, deployWithTokenProps);\n  } else if (!finishStatus.isFinished) {\n    Console.info(`Polling timed out. To check the status of your app, visit\n    ${versionStatusResult.payload.galaxyUrl}. To wait longer, pass a timeout\n    in milliseconds to the '--deploy-polling-timeout' option of 'meteor deploy'.`);\n  }\n  return finishStatus;\n}\n\n\n// Run the bundler and deploy the result. Print progress\n// messages. Return a command exit code.\n//\n// Options:\n// - projectContext: the ProjectContext for the app\n// - site: site to deploy as\n// - settingsFile: file from which to read deploy settings (undefined\n//   to leave unchanged from previous deploy of the app, if any)\n// - recordPackageUsage: (defaults to true) if set to false, don't\n//   send information about packages used by this app to the package\n//   stats server.\n// - buildOptions: the 'buildOptions' argument to the bundler\n// - rawOptions: any unknown options that were passed to the command line tool\n// - waitForDeploy: whether to poll Galaxy after upload for deploy status\n// - isCacheBuildEnabled: Reuses the build already created if the git commit\n//   hash is the same\n// - deployPollingTimeoutMs: user overridden timeout for polling Galaxy\n//   for deploy status\nexport async function bundleAndDeploy(options) {\n  if (options.recordPackageUsage === undefined) {\n    options.recordPackageUsage = true;\n  }\n\n  // we don't need site for build-only\n  let site = null;\n  let preflightPassword = null;\n\n  if (options.isBuildOnly) {\n    Console.info('Skipping pre authentication as the option --build-only was provded.');\n  } else {\n    site = options.site && canonicalizeSite(options.site)\n    if (! site) {\n      Console.error(\"Error deploying application: site is required.\");\n      Console.error(\"Your deploy command should be like: meteor deploy <site>\");\n      Console.error(\n        \"For more help, see \" + Console.command(\"'meteor deploy --help'\") + \".\");\n      return 1;\n    }\n\n    // We should give a username/password prompt if the user was logged in\n    // but the credentials are expired, unless the user is logged in but\n    // doesn't have a username (in which case they should hit the email\n    // prompt -- a user without a username shouldn't be given a username\n    // prompt). There's an edge case where things happen in the following\n    // order: user creates account, user sets username, credential expires\n    // or is revoked, user comes back to deploy again. In that case,\n    // they'll get an email prompt instead of a username prompt because\n    // the command-line tool didn't have time to learn about their\n    // username before the credential was expired.\n    pollForRegistrationCompletion({\n      noLogout: true\n    });\n    const promptIfAuthFails = (loggedInUsername() !== null);\n\n    // Check auth up front, rather than after the (potentially lengthy)\n    // bundling process.\n    const preflight = authedRpc({\n      site: site,\n      preflight: true,\n      promptIfAuthFails: promptIfAuthFails,\n      qs: Object.assign(\n        {},\n        options.rawOptions,\n        {\n          deployToken: options.deployToken,\n          owner: options.owner,\n        }\n      ),\n      printDeployURL: true\n    });\n\n    if (preflight.errorMessage) {\n      Console.error(\"Error deploying application: \" + preflight.errorMessage);\n      return 1;\n    }\n\n    if (preflight.protection === \"account\" &&\n      !preflight.authorized) {\n      printUnauthorizedMessage();\n      return 1;\n    }\n\n    preflightPassword = preflight.preflightPassword;\n  }\n\n  const projectDir = options.projectContext.getProjectLocalDirectory('');\n  const gitCommitHash = process.env.METEOR_GIT_COMMIT_HASH || findGitCommitHash(projectDir);\n\n  const buildCache = options.projectContext.getBuildCache();\n  let isCacheBuildValid = options.isCacheBuildEnabled;\n  if (options.isCacheBuildEnabled) {\n    if (!buildCache ||\n      !exists(buildCache.buildDir) ||\n      !exists(buildCache.bundlePath) ||\n      !buildCache.gitCommitHash ||\n      !gitCommitHash ||\n      buildCache.gitCommitHash !== gitCommitHash) {\n      Console.warn(`We don't have a valid build cache so a new build will be performed.`);\n      isCacheBuildValid = false;\n    }\n  }\n\n  function getBuildDirAndBundlePath() {\n    if (isCacheBuildValid) {\n      return buildCache;\n    }\n\n    const buildDir = mkdtemp('build_tar');\n    if (options.isCacheBuildEnabled) {\n      changeTempDirStatus(buildDir, false);\n      Console.info(`The --cache-build was used so the build folder (${buildDir}) will not be deleted on exit...`);\n    }\n    const bundlePath = pathJoin(buildDir, 'bundle');\n    return { buildDir, bundlePath };\n  }\n\n  const {buildDir, bundlePath} = getBuildDirAndBundlePath();\n\n  if (options.isCacheBuildEnabled) {\n    Console.info('Saving build in cache (--cache-build)...');\n    options.projectContext.saveBuildCache({\n      buildDir,\n      bundlePath,\n      gitCommitHash\n    });\n  }\n\n  Console.info('Preparing to build your app...');\n\n  var settings = null;\n  var messages = buildmessage.capture({\n    title: \"preparing to deploy\",\n    rootPath: process.cwd()\n  }, function () {\n    if (options.settingsFile) {\n      settings = getSettings(options.settingsFile);\n    }\n  });\n\n  if (! messages.hasMessages()) {\n\n    if(isCacheBuildValid) {\n      Console.info('Skipping build (--cache-build)...');\n    } else {\n      const bundler = require('../isobuild/bundler.js');\n\n      const bundleResult = bundler.bundle({\n        projectContext: options.projectContext,\n        outputPath: bundlePath,\n        buildOptions: options.buildOptions,\n      });\n\n      if (bundleResult.errors) {\n        messages = bundleResult.errors;\n      }\n    }\n  }\n\n  if (messages.hasMessages()) {\n    Console.info(\"\\nErrors prevented deploying:\");\n    Console.info(messages.formatMessages());\n    return 1;\n  }\n\n  if (options.recordPackageUsage) {\n    recordPackages({\n      what: \"sdk.deploy\",\n      projectContext: options.projectContext,\n      site: site\n    });\n  }\n\n  if (options.isBuildOnly) {\n    Console.info(\n      '\\nYour build is ready. As you used the option --build-only the process finished after the build.'\n    );\n    return 0;\n  }\n\n  const deployWithTokenProps = {\n    deployToken: options.deployToken,\n    owner: options.owner\n  };\n\n  Console.info('Preparing to upload your app...');\n  const result = buildmessage.enterJob({\n    title: \"uploading\"\n  }, Profile(\"upload bundle\", function () {\n    return authedRpc({\n      method: 'POST',\n      operation: 'deploy',\n      site: site,\n      qs: Object.assign(\n        {},\n        options.rawOptions,\n        settings !== null ? {settings: settings} : {},\n        {\n          free: options.free,\n          plan: options.plan,\n          mongo: options.mongo,\n          ...deployWithTokenProps,\n        },\n      ),\n      bodyStream: createTarGzStream(pathJoin(buildDir, 'bundle')),\n      expectPayload: ['url'],\n      preflightPassword,\n      // Disable the HTTP timeout for this POST request.\n      timeout: null,\n      waitForDeploy: options.waitForDeploy,\n    });\n  }));\n\n  if (result.errorMessage) {\n    Console.error(\"\\nError deploying application: \" + result.errorMessage);\n    return 1;\n  }\n\n  // This will allow Galaxy to report messages to users ad-hoc\n  // Also if we are using the --no-wait flag, this will contain the message\n  // that Galaxy used to send after upload success.\n  if (result.payload.message) {\n    Console.info(result.payload.message);\n  }\n\n  // After an upload succeeds, we want to poll Galaxy to see if the\n  // build / deploy succeed. We indicate that Meteor should poll for version\n  // status by including a newVersionId in the payload.\n  if (options.waitForDeploy && result.payload.newVersionId) {\n    Console.info('Waiting for deployment updates from Galaxy...');\n    return await pollForDeploymentSuccess(\n      result.payload.newVersionId,\n      options.deployPollingTimeoutMs,\n      result,\n      site,\n      deployWithTokenProps,\n    );\n  }\n  return 0;\n};\n\nexport function deleteApp(site) {\n  site = canonicalizeSite(site);\n  if (! site) {\n    return 1;\n  }\n\n  var result = authedRpc({\n    method: 'DELETE',\n    operation: 'deploy',\n    site: site,\n    promptIfAuthFails: true,\n    printDeployURL: true\n  });\n\n  if (result.errorMessage) {\n    Console.error(\"Couldn't delete application: \" + result.errorMessage);\n    return 1;\n  }\n\n  Console.info(\"Deleted.\");\n  return 0;\n};\n\n// Helper that does a preflight request to check auth, and prints the\n// appropriate error message if auth fails or if this is a legacy\n// password-protected app. If auth succeeds, then it runs the actual\n// RPC. 'site' and 'operation' are the site and operation for the\n// RPC. 'what' is a string describing the operation, for use in error\n// messages.  Returns the result of the RPC if successful, or null\n// otherwise (including if auth failed or if the user is not authorized\n// for this site).\nfunction checkAuthThenSendRpc(site, operation, what) {\n  var preflight = authedRpc({\n    operation: operation,\n    site: site,\n    preflight: true,\n    promptIfAuthFails: true,\n    printDeployURL: true\n  });\n\n  if (preflight.errorMessage) {\n    Console.error(\"Couldn't \" + what + \": \" + preflight.errorMessage);\n    return null;\n  }\n\n  if (preflight.protection === \"account\" &&\n             ! preflight.authorized) {\n    if (! isLoggedIn()) {\n      // Maybe the user is authorized for this app but not logged in\n      // yet, so give them a login prompt.\n      var loginResult = doUsernamePasswordLogin({ retry: true });\n      if (loginResult) {\n        // Once we've logged in, retry the whole operation. We need to\n        // do the preflight request again instead of immediately moving\n        // on to the real RPC because we don't yet know if the newly\n        // logged-in user is authorized for this app, and if they\n        // aren't, then we want to print the nice unauthorized error\n        // message.\n        return checkAuthThenSendRpc(site, operation, what);\n      } else {\n        // Shouldn't ever get here because we set the retry flag on the\n        // login, but just in case.\n        Console.error(\n          \"\\nYou must be logged in to \" + what + \" for this app. Use \" +\n           Console.command(\"'meteor login'\") + \"to log in.\");\n        Console.error();\n        Console.error(\n          \"If you don't have a Meteor developer account yet, you can quickly \" +\n          \"create one at www.meteor.com.\");\n        return null;\n      }\n    } else { // User is logged in but not authorized for this app\n      Console.error();\n      printUnauthorizedMessage();\n      return null;\n    }\n  }\n\n  // User is authorized for the app; go ahead and do the actual RPC.\n\n  var result = authedRpc({\n    operation: operation,\n    site: site,\n    expectMessage: true,\n    promptIfAuthFails: true\n  });\n\n  if (result.errorMessage) {\n    Console.error(\"Couldn't \" + what + \": \" + result.errorMessage);\n    return null;\n  }\n\n  return result;\n};\n\n// On failure, prints a message to stderr and returns null. Otherwise,\n// returns a temporary authenticated Mongo URL allowing access to this\n// site's database.\nexport function temporaryMongoUrl(site) {\n  site = canonicalizeSite(site);\n  if (! site) {\n    // canonicalizeSite printed an error\n    return null;\n  }\n\n  var result = checkAuthThenSendRpc(site, 'mongo', 'open a mongo connection');\n\n  if (result !== null) {\n    return result.message;\n  } else {\n    return null;\n  }\n};\n\nexport function listAuthorized(site) {\n  site = canonicalizeSite(site);\n  if (! site) {\n    return 1;\n  }\n\n  var result = deployRpc({\n    operation: 'info',\n    site: site,\n    expectPayload: [],\n    printDeployURL: true\n  });\n  if (result.errorMessage) {\n    Console.error(\"Couldn't get authorized users list: \" + result.errorMessage);\n    return 1;\n  }\n  var info = result.payload;\n\n  if (! hasOwn.call(info, 'protection')) {\n    Console.info(\"<anyone>\");\n    return 0;\n  }\n\n  if (info.protection === \"account\") {\n    if (! hasOwn.call(info, 'authorized')) {\n      Console.error(\"Couldn't get authorized users list: \" +\n                    \"You are not authorized\");\n      return 1;\n    }\n\n    Console.info((loggedInUsername() || \"<you>\"));\n    info.authorized.forEach(username => {\n      if (username) {\n        // Current username rules don't let you register anything that we might\n        // want to split over multiple lines (ex: containing a space), but we\n        // don't want confusion if we ever change some implementation detail.\n        Console.rawInfo(username + \"\\n\");\n      }\n    });\n    return 0;\n  }\n};\n\n// action is \"add\", \"transfer\" or \"remove\"\nexport function changeAuthorized(site, action, username) {\n  site = canonicalizeSite(site);\n  if (! site) {\n    // canonicalizeSite will have already printed an error\n    return 1;\n  }\n\n  var result = authedRpc({\n    method: 'POST',\n    operation: 'authorized',\n    site: site,\n    qs: {[action]: username},\n    promptIfAuthFails: true,\n    printDeployURL: true\n  });\n\n  if (result.errorMessage) {\n    Console.error(\"Couldn't change authorized users: \" + result.errorMessage);\n    return 1;\n  }\n\n  const verbs = {\n    add: \"added to\",\n    remove: \"removed from\",\n    transfer: \"transferred to\"\n  };\n  Console.info(`${site}: ${verbs[action]} ${username}`);\n  return 0;\n};\n\nexport function listSites() {\n  var result = deployRpc({\n    method: \"GET\",\n    operation: \"authorized-apps\",\n    promptIfAuthFails: true,\n    expectPayload: [\"sites\"]\n  });\n\n  if (result.errorMessage) {\n    Console.error(\"Couldn't list sites: \" + result.errorMessage);\n    return 1;\n  }\n\n  if (! result.payload ||\n      ! result.payload.sites ||\n      ! result.payload.sites.length) {\n    Console.info(\"You don't have any sites yet.\");\n  } else {\n    result.payload.sites\n      .sort()\n      .forEach(site => Console.info(site));\n  }\n  return 0;\n};\n\n// Given a hostname, add \"http://\" or \"https://\" as\n// appropriate. (localhost gets http; anything else is always https.)\nfunction addScheme(hostOrURL) {\n  if (hostOrURL.match(/^http/)) {\n    return hostOrURL;\n  } else if (hostOrURL.match(/^localhost(:\\d+)?$/)) {\n    return \"http://\" + hostOrURL;\n  } else {\n    return \"https://\" + hostOrURL;\n  }\n};\n\n// Maps from \"site\" to Promise<deploy URL>, so we don't have to re-ping on each\n// RPC (even if the calls to getDeployURL overlap).\nconst galaxyDiscoveryCache = new Map;\n\n// getDeployURL returns the a Promise for the base deploy URL for the given app.\n// \"app\" may be falsey for certain RPCs (eg meteor list-sites).\nfunction getDeployURL(site) {\n  // Always trust explicitly configuration via env.\n  if (process.env.DEPLOY_HOSTNAME) {\n    return Promise.resolve(addScheme(process.env.DEPLOY_HOSTNAME.trim()));\n  }\n\n  const defaultURL = \"https://us-east-1.galaxy-deploy.meteor.com\";\n\n  // No site? Just use the default.\n  if (!site) {\n    return Promise.resolve(defaultURL);\n  }\n\n  // If we have a site, we can try to do Galaxy discovery.\n\n  // Do we already have an answer?\n  if (galaxyDiscoveryCache.has(site)) {\n    return galaxyDiscoveryCache.get(site);\n  }\n\n  // Otherwise, try https first, then http, then just use the default.\n  const p = discoverGalaxy(site, \"https\")\n          .catch(() => discoverGalaxy(site, \"http\"))\n          .catch(() => defaultURL);\n  galaxyDiscoveryCache.set(site, p);\n  return p;\n}\n\n// discoverGalaxy returns the URL to use for Galaxy discovery, or an error if it\n// couldn't be fetched.\nasync function discoverGalaxy(site, scheme) {\n  const discoveryURL =\n          scheme + \"://\" + site + \"/.well-known/meteor/deploy-url\";\n  // If httpHelpers.request throws, the returned Promise will reject, which is\n  // fine.\n  const { response, body } = request({\n    url: discoveryURL,\n    json: true,\n    strictSSL: true,\n    // We don't want to be confused by, eg, a non-Galaxy-hosted site which\n    // redirects to a Galaxy-hosted site.\n    followRedirect: false\n  });\n  if (response.statusCode !== 200) {\n    throw new Error(\"bad status code: \" + response.statusCode);\n  }\n  if (!body) {\n    throw new Error(\"response had no body\");\n  }\n  if (body.galaxyDiscoveryVersion !== \"galaxy-1\") {\n    throw new Error(\n      \"unexpected galaxyDiscoveryVersion: \" + body.galaxyDiscoveryVersion);\n  }\n  if (! hasOwn.call(body, \"deployURL\")) {\n    throw new Error(\"no deployURL\");\n  }\n  return body.deployURL;\n}\n"],"file":"tools/meteor-services/deploy.js.map"}