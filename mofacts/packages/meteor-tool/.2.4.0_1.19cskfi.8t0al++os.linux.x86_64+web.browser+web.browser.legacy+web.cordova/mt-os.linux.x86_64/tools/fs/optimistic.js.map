{"version":3,"sources":["tools/fs/optimistic.ts"],"names":[],"mappings":"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","sourcesContent":["import assert from \"assert\";\nimport { wrap, OptimisticWrapperFunction, dep } from \"optimism\";\nimport ignore from \"ignore\";\nimport { Profile } from \"../tool-env/profile\";\nimport { watch, SafeWatcher } from \"./safe-watcher\";\nimport { sha1 } from \"./watch\";\nimport {\n  pathSep,\n  pathBasename,\n  pathDirname,\n  pathIsAbsolute,\n  pathJoin,\n  statOrNull,\n  lstat,\n  readFile,\n  readdir,\n  dependOnPath,\n  findAppDir,\n} from \"./files\";\n\n// When in doubt, the optimistic caching system can be completely disabled\n// by setting this environment variable.\nconst ENABLED = ! process.env.METEOR_DISABLE_OPTIMISTIC_CACHING;\n\nfunction makeOptimistic<\n  TArgs extends any[],\n  TResult,\n>(\n  name: string,\n  fn: (...args: TArgs) => TResult,\n): OptimisticWrapperFunction<TArgs, TResult> {\n  fn = Profile(\"optimistic \" + name, fn);\n\n  const wrapper = wrap(ENABLED ? function (this: any) {\n    maybeDependOnPath(arguments[0]);\n    return fn.apply(this, arguments as any);\n  } as typeof fn : fn, {\n    makeCacheKey(...args: TArgs) {\n      if (! ENABLED) {\n        // Cache nothing when the optimistic caching system is disabled.\n        return;\n      }\n\n      const path = args[0];\n      if (! pathIsAbsolute(path)) {\n        return;\n      }\n\n      if (! args.every(arg => typeof arg === \"string\")) {\n        // If any of the arguments is not a string, then we won't cache the\n        // result of the corresponding file.* method invocation.\n        return;\n      }\n\n      return args.join(\"\\0\");\n    },\n\n    subscribe(...args: TArgs) {\n      const path = args[0];\n\n      if (! shouldWatch(path)) {\n        return;\n      }\n\n      assert.ok(pathIsAbsolute(path));\n\n      let watcher: SafeWatcher | null = watch(path, () => {\n        wrapper.dirty(...args);\n      });\n\n      return () => {\n        if (watcher) {\n          watcher.close();\n          watcher = null;\n        }\n      };\n    }\n  });\n\n  return wrapper;\n}\n\n// The Meteor application directory should never change during the lifetime\n// of the build process, so it should be safe to cache findAppDir without\n// subscribing to file changes.\nconst optimisticFindAppDir = wrap(findAppDir);\n\nconst shouldWatch = wrap(Profile(\"shouldWatch\", (path: string) => {\n  const parts = path.split(pathSep);\n  const nmi = parts.indexOf(\"node_modules\");\n\n  if (nmi < 0) {\n    // Watch everything not in a node_modules directory.\n    return true;\n  }\n\n  const dotMeteorIndex = parts.lastIndexOf(\".meteor\", nmi);\n  if (dotMeteorIndex >= 0) {\n    // Watch nothing inside of .meteor, at least for the purposes of the\n    // optimistic caching system. Meteor watches files inside .meteor/local\n    // via the WatchSet abstraction, unrelatedly.\n    return false;\n  }\n\n  if (nmi < parts.length - 1) {\n    const nmi2 = parts.indexOf(\"node_modules\", nmi + 1);\n    if (nmi2 > nmi) {\n      // If this path is nested inside more than one node_modules\n      // directory, then it isn't part of a linked npm package, so we\n      // should not watch it.\n      return false;\n    }\n\n    const parentDirParts = parts.slice(0, nmi);\n    const parentDir = parentDirParts.join(pathSep);\n    const appDir = optimisticFindAppDir(parentDir);\n    if (\n      appDir &&\n      parentDir.startsWith(appDir) &&\n      appDir.split(pathSep).length < parentDirParts.length\n    ) {\n      // If the given path is contained by the Meteor application directory,\n      // but the node_modules directory we're considering is not directly\n      // contained by the root application directory, watch the file. See\n      // discussion in issue https://github.com/meteor/meteor/issues/10664\n      return true;\n    }\n\n    const packageDirParts = parts.slice(0, nmi + 2);\n\n    if (parts[nmi + 1].startsWith(\"@\")) {\n      // For linked @scoped npm packages, the symlink is nested inside the\n      // @scoped directory (which is a child of node_modules).\n      packageDirParts.push(parts[nmi + 2]);\n    }\n\n    const packageDir = packageDirParts.join(pathSep);\n    if (optimisticIsSymbolicLink(packageDir)) {\n      // If this path is in a linked npm package, then it might be under\n      // active development, so we should watch it.\n      return true;\n    }\n  }\n\n  // Starting a watcher for every single file contained within a\n  // node_modules directory would be prohibitively expensive, so\n  // instead we rely on dependOnNodeModules to tell us when files in\n  // node_modules directories might have changed.\n  return false;\n}));\n\nfunction maybeDependOnPath(path: string) {\n  if (typeof path === \"string\") {\n    dependOnPath(path);\n    maybeDependOnNodeModules(path);\n  }\n}\n\nfunction maybeDependOnNodeModules(path: string) {\n  if (typeof path !== \"string\") {\n    return;\n  }\n\n  const parts = path.split(pathSep);\n\n  while (true) {\n    const index = parts.lastIndexOf(\"node_modules\");\n    if (index < 0) {\n      return;\n    }\n\n    parts.length = index + 1;\n    dependOnNodeModules(parts.join(pathSep));\n    assert.strictEqual(parts.pop(), \"node_modules\");\n  }\n}\n\nconst dependOnDirectory = dep({\n  subscribe(dir: string) {\n    let watcher: SafeWatcher | null = watch(\n      dir,\n      () => dependOnDirectory.dirty(dir),\n    );\n\n    return function () {\n      if (watcher) {\n        watcher.close();\n        watcher = null;\n      }\n    };\n  },\n});\n\n// Called when an optimistic function detects the given file does not\n// exist, but needs to return null or false rather than throwing an\n// exception. When/if the file is eventually created, we might only get a\n// file change notification for the parent directory, so it's important to\n// depend on the parent directory using this function, so that we don't\n// cache the unsuccessful result forever.\nfunction dependOnParentDirectory(path: string) {\n  const parentDir = pathDirname(path);\n  if (parentDir !== path) {\n    dependOnDirectory(parentDir);\n  }\n}\n\n// Called by any optimistic function that receives a */node_modules/* path\n// as its first argument, so that we can later bulk-invalidate the results\n// of those calls if the contents of the node_modules directory change.\n// Note that this strategy will not detect changes within subdirectories\n// of this node_modules directory, but that's ok because the use case we\n// care about is adding or removing npm packages.\nfunction dependOnNodeModules(nodeModulesDir: string) {\n  assert(pathIsAbsolute(nodeModulesDir), nodeModulesDir);\n  assert(nodeModulesDir.endsWith(pathSep + \"node_modules\"));\n  dependOnDirectory(nodeModulesDir);\n}\n\n// Invalidate all optimistic results derived from paths involving the\n// given node_modules directory.\nexport function dirtyNodeModulesDirectory(nodeModulesDir: string) {\n  dependOnDirectory.dirty(nodeModulesDir);\n}\n\nfunction makeCheapPathFunction<TResult>(\n  pathFunction: (path: string) => TResult,\n): typeof pathFunction {\n  if (! ENABLED) {\n    return pathFunction;\n  }\n  const wrapper = wrap(pathFunction, {\n    // The maximum LRU cache size is Math.pow(2, 16) by default, but it's\n    // important to prevent eviction churn for very-frequently-called\n    // functions like optimisticStatOrNull. While it's tempting to set\n    // this limit to Infinity, increasing it by 16x comes close enough.\n    max: Math.pow(2, 20),\n    subscribe(path) {\n      let watcher: SafeWatcher | null = watch(\n        path,\n        () => wrapper.dirty(path),\n      );\n      return function () {\n        if (watcher) {\n          watcher.close();\n          watcher = null;\n        }\n      };\n    }\n  });\n  return wrapper;\n}\n\nexport const optimisticStatOrNull = makeCheapPathFunction(\n  (path: string) => {\n    const result = statOrNull(path);\n    if (result === null) {\n      dependOnParentDirectory(path);\n    }\n    return result;\n  },\n);\n\nexport const optimisticLStat = makeOptimistic(\"lstat\", lstat);\nexport const optimisticLStatOrNull = makeCheapPathFunction(\n  (path: string) => {\n    try {\n      return optimisticLStat(path);\n    } catch (e) {\n      if (e.code !== \"ENOENT\") throw e;\n      dependOnParentDirectory(path);\n      return null;\n    }\n  },\n);\n\nexport const optimisticReadFile = makeOptimistic(\"readFile\", readFile);\nexport const optimisticReaddir = makeOptimistic(\"readdir\", readdir);\nexport const optimisticHashOrNull = makeOptimistic(\"hashOrNull\", (\n  path: string,\n  options?: Parameters<typeof optimisticReadFile>[1],\n) => {\n  try {\n    return sha1(optimisticReadFile(path, options)) as string;\n\n  } catch (e) {\n    if (e.code !== \"EISDIR\" &&\n        e.code !== \"ENOENT\") {\n      throw e;\n    }\n  }\n\n  dependOnParentDirectory(path);\n\n  return null;\n});\n\nconst riskyJsonWhitespacePattern =\n  // Turns out a lot of weird characters technically count as /\\s/ characters.\n  // This is all of them except for \" \", \"\\n\", and \"\\r\", which are safe:\n  /[\\t\\b\\f\\u1680\\u2000-\\u200a\\u2028\\u2029\\u202f\\u205f\\u3000\\ufeff]+/g;\n\nexport const optimisticReadJsonOrNull =\nmakeOptimistic(\"readJsonOrNull\", (\n  path: string,\n  options?: Parameters<typeof optimisticReadFile>[1] & {\n    allowSyntaxError?: boolean;\n  },\n): Record<string, any> | null => {\n  let contents: string | Buffer;\n  try {\n    contents = optimisticReadFile(path, options);\n  } catch (e) {\n    if (e.code === \"ENOENT\") {\n      dependOnParentDirectory(path);\n      return null;\n    }\n    throw e;\n  }\n\n  try {\n    return JSON.parse(contents);\n  } catch (e) {\n    if (e instanceof SyntaxError &&\n        options && options.allowSyntaxError) {\n      return null;\n    }\n\n    const stringContents: string = contents.toString(\"utf8\");\n    // Replace any risky whitespace characters with spaces, to address issue\n    // https://github.com/meteor/meteor/issues/10688\n    const cleanContents = stringContents.replace(riskyJsonWhitespacePattern, \" \");\n    if (cleanContents !== stringContents) {\n      // Try one last time to parse cleanContents before throwing.\n      return JSON.parse(cleanContents);\n    }\n\n    throw e;\n  }\n});\n\nexport const optimisticReadMeteorIgnore = wrap((dir: string) => {\n  const meteorIgnorePath = pathJoin(dir, \".meteorignore\");\n  const meteorIgnoreStat = optimisticStatOrNull(meteorIgnorePath);\n\n  if (meteorIgnoreStat &&\n      meteorIgnoreStat.isFile()) {\n    return ignore().add(\n      optimisticReadFile(meteorIgnorePath).toString(\"utf8\")\n    );\n  }\n\n  return null;\n});\n\ntype LookupPkgJsonType = OptimisticWrapperFunction<\n  [string, string],\n  ReturnType<typeof optimisticReadJsonOrNull>[]\n>;\n\n// Returns an array of package.json objects encountered in any directory\n// between relDir and absRootDir. If a package.json with a \"name\" property\n// is found, it will always be the first object in the array.\nexport const optimisticLookupPackageJsonArray: LookupPkgJsonType =\nwrap((absRootDir: string, relDir: string) => {\n  const absPkgJsonPath = pathJoin(absRootDir, relDir, \"package.json\");\n  const pkgJson = optimisticReadJsonOrNull(absPkgJsonPath);\n\n  // Named package.json files always terminate the search. This\n  // restriction was first introduced to fix #10547, before this function\n  // was updated to return an array instead of a single object, but\n  // returning here is still an important base case.\n  if (pkgJson && typeof pkgJson.name === \"string\") {\n    return [pkgJson];\n  }\n\n  const relParentDir = pathDirname(relDir);\n  if (relParentDir === relDir) {\n    return [];\n  }\n\n  // Stop searching if an ancestor node_modules directory is encountered.\n  if (pathBasename(relParentDir) === \"node_modules\") {\n    return [];\n  }\n\n  const parentArray =\n    optimisticLookupPackageJsonArray(absRootDir, relParentDir);\n\n  if (pkgJson) {\n    // If an intermediate package.json file was found, add its object to\n    // the array. Since these arrays are cached, we don't want to modify\n    // them using parentArray.push(pkgJson), hence concat.\n    return parentArray.concat(pkgJson);\n  }\n\n  return parentArray;\n});\n\nconst optimisticIsSymbolicLink = wrap((path: string) => {\n  try {\n    return lstat(path)?.isSymbolicLink();\n  } catch (e) {\n    if (e.code !== \"ENOENT\") throw e;\n    dependOnParentDirectory(path);\n    return false;\n  }\n}, {\n  subscribe(path) {\n    let watcher: SafeWatcher | null = watch(path, () => {\n      optimisticIsSymbolicLink.dirty(path);\n    });\n\n    return function () {\n      if (watcher) {\n        watcher.close();\n        watcher = null;\n      }\n    };\n  }\n});\n"],"sourceRoot":"","file":"tools/fs/optimistic.js.map"}