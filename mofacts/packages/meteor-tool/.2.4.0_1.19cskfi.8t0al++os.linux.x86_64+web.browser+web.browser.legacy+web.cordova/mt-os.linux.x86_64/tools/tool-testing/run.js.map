{"version":3,"sources":["/tools/tool-testing/run.js"],"names":["module","export","default","Run","spawn","link","v","files","parseStackParse","parse","Console","Matcher","OutputLog","randomPort","timeoutScaleFactor","sleepMs","TestFailure","execFileSync","markThrowingMethods","runningTest","constructor","execPath","options","cwd","convertToStandardPath","process","env","Object","assign","SELFTEST","METEOR_NO_WORDWRAP","_args","proc","baseTimeout","extraTime","client","stdoutMatcher","stderrMatcher","outputLog","matcherEndPromise","exitStatus","undefined","exitPromiseResolvers","opts","args","apply","fakeMongoPort","fakeMongoConnection","fakeMongo","METEOR_TEST_FAKE_MONGOD_CONTROL_PORT","onCleanup","_stopWithoutWaiting","Error","forEach","a","push","keys","key","value","connectClient","_ensureStarted","connect","matchBeforeExit","pattern","matchBeforeEnd","matchErrBeforeExit","_exited","status","stop","resolve","_endMatchers","Promise","all","endAsync","create","convertToOSPath","on","code","signal","err","stdout","setEncoding","data","write","stderr","match","_strict","timeout","simpleDebug","getMatcherFullBuffer","getFullBuffer","matchErr","read","strict","readErr","forbid","forbidErr","forbidAll","expectEnd","expectExit","matchEmpty","await","timer","failure","run","promise","reject","setTimeout","filter","r","clearTimeout","expected","actual","waitSecs","secs","string","stdin","_killProcess","platform","pid","kill","tellMongo","command","net","require","lastStartTime","attempts","Date","conn","setNoDelay","fail","JSON","stringify","exit","end","runTest","testList","test","testRunner","retries","startTime","e","cleanup","durationMs","checkmark","error","bulletPoint","frames","outsideFiber","toolsDir","getCurrentToolsDir","pathWithLineNumber","some","frame","absPath","pathJoin","file","exists","relPath","pathRelative","parts","split","line","rawError","reason","arrowError","details","s","lines","get","length","historyLines","slice","channel","text","bare","messages","formatMessages","stack","indent","notifyFailed","success","prototype"],"mappings":"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","sourcesContent":["// Represents a test run of the tool (except we also use it in\n// tests/old.js to run Node scripts). Typically created through the\n// run() method on Sandbox, but can also be created directly, say if\n// you want to do something other than invoke the 'meteor' command in\n// a nice sandbox.\n//\n// Options: args, cwd, env\n//\n// The 'execPath' argument and the 'cwd' option are assumed to be standard\n// paths.\n//\n// Arguments in the 'args' option are not assumed to be standard paths, so\n// calling any of the 'files.*' methods on them is not safe.\nimport { spawn } from 'child_process';\nimport * as files from '../fs/files';\nimport {\n  parse as parseStackParse,\n} from '../utils/parse-stack';\nimport { Console } from '../console/console.js';\nimport Matcher from './matcher.js';\nimport OutputLog from './output-log.js';\nimport { randomPort, timeoutScaleFactor, sleepMs } from '../utils/utils.js';\nimport TestFailure from './test-failure.js';\nimport { execFileSync } from '../utils/processes';\n\nlet runningTest = null;\n\nexport default class Run {\n  constructor(execPath, options) {\n    this.execPath = execPath;\n    this.cwd = options.cwd || files.convertToStandardPath(process.cwd());\n    // default env variables\n    this.env = Object.assign({ SELFTEST: \"t\", METEOR_NO_WORDWRAP: \"t\" }, options.env);\n    this._args = [];\n    this.proc = null;\n    this.baseTimeout = 20;\n    this.extraTime = 0;\n    this.client = options.client;\n\n    this.stdoutMatcher = new Matcher(this);\n    this.stderrMatcher = new Matcher(this);\n    this.outputLog = new OutputLog(this);\n\n    this.matcherEndPromise = null;\n\n    this.exitStatus = undefined; // 'null' means failed rather than exited\n    this.exitPromiseResolvers = [];\n    const opts = options.args || [];\n    this.args.apply(this, opts || []);\n\n    this.fakeMongoPort = null;\n    this.fakeMongoConnection = null;\n    if (options.fakeMongo) {\n      this.fakeMongoPort = randomPort();\n      this.env.METEOR_TEST_FAKE_MONGOD_CONTROL_PORT = this.fakeMongoPort;\n    }\n\n    runningTest.onCleanup(() => {\n      this._stopWithoutWaiting();\n    });\n  }\n\n  // Set command-line arguments. This may be called multiple times as\n  // long as the run has not yet started (the run starts after the\n  // first call to a function that requires it, like match()).\n  //\n  // Pass as many arguments as you want. Non-object values will be\n  // cast to string, and object values will be treated as maps from\n  // option names to values.\n  args(...args) {\n    if (this.proc) {\n      throw new Error(\"already started?\");\n    }\n\n    args.forEach((a) => {\n      if (typeof a !== \"object\") {\n        this._args.push(`${a}`);\n      } else {\n        Object.keys(a).forEach((key) => {\n          const value = a[key];\n          this._args.push(`--${key}`);\n          this._args.push(`${value}`);\n        });\n      }\n    });\n  }\n\n  connectClient() {\n    if (!this.client) {\n      throw new Error(\"Must create Run with a client to use connectClient().\");\n    }\n\n    this._ensureStarted();\n    this.client.connect();\n  }\n\n  // Useful for matching one-time patterns not sensitive to ordering.\n  matchBeforeExit(pattern) {\n    return this.stdoutMatcher.matchBeforeEnd(pattern);\n  }\n\n  matchErrBeforeExit(pattern) {\n    return this.stderrMatcher.matchBeforeEnd(pattern);\n  }\n\n  _exited(status) {\n    if (this.exitStatus !== undefined) {\n      throw new Error(\"already exited?\");\n    }\n\n    if (this.client) {\n      this.client.stop();\n    }\n\n    this.exitStatus = status;\n    const exitPromiseResolvers = this.exitPromiseResolvers;\n    this.exitPromiseResolvers = null;\n    exitPromiseResolvers.forEach((resolve) => {\n      resolve();\n    });\n\n    this._endMatchers();\n  }\n\n  _endMatchers() {\n    this.matcherEndPromise =\n      this.matcherEndPromise || Promise.all([\n        this.stdoutMatcher.endAsync(),\n        this.stderrMatcher.endAsync()\n      ]);\n    return this.matcherEndPromise;\n  }\n\n  _ensureStarted() {\n    if (this.proc) {\n      return;\n    }\n\n    const env = Object.assign(Object.create(null), process.env);\n    Object.assign(env, this.env);\n\n    this.proc = spawn(files.convertToOSPath(this.execPath),\n      this._args, {\n        cwd: files.convertToOSPath(this.cwd),\n        env,\n      });\n\n    this.proc.on('close', (code, signal) => {\n      if (this.exitStatus === undefined) {\n        this._exited({ code, signal });\n      }\n    });\n\n    this.proc.on('exit', (code, signal) => {\n      if (this.exitStatus === undefined) {\n        this._exited({ code, signal });\n      }\n    });\n\n    this.proc.on('error', (err) => {\n      if (this.exitStatus === undefined) {\n        this._exited(null);\n      }\n    });\n\n    this.proc.stdout.setEncoding('utf8');\n    this.proc.stdout.on('data', (data) => {\n      this.outputLog.write('stdout', data);\n      this.stdoutMatcher.write(data);\n    });\n\n    this.proc.stderr.setEncoding('utf8');\n    this.proc.stderr.on('data', (data) => {\n      this.outputLog.write('stderr', data);\n      this.stderrMatcher.write(data);\n    });\n  }\n\n  // Wait until we get text on stdout that matches 'pattern', which\n  // may be a regular expression or a string. Consume stdout up to\n  // that point. If this pattern does not appear after a timeout (or\n  // the program exits before emitting the pattern), fail.\n  match(pattern, _strict) {\n    this._ensureStarted();\n\n    let timeout = this.baseTimeout + this.extraTime;\n    timeout *= timeoutScaleFactor;\n    this.extraTime = 0;\n    Console.simpleDebug('match', pattern);\n    return this.stdoutMatcher.match(pattern, timeout, _strict);\n  }\n\n  getMatcherFullBuffer() {\n    return this.stdoutMatcher.getFullBuffer();\n  }\n\n  // As expect(), but for stderr instead of stdout.\n  matchErr(pattern, _strict) {\n    this._ensureStarted();\n\n    let timeout = this.baseTimeout + this.extraTime;\n    timeout *= timeoutScaleFactor;\n    this.extraTime = 0;\n    Console.simpleDebug('matchErr', pattern);\n    return this.stderrMatcher.match(pattern, timeout, _strict);\n  }\n\n  // Like match(), but won't skip ahead looking for a match. It must\n  // follow immediately after the last thing we matched or read.\n  read(pattern, strict = true) {\n    return this.match(pattern, strict);\n  }\n\n  // As read(), but for stderr instead of stdout.\n  readErr(pattern) {\n    return this.matchErr(pattern, true);\n  }\n\n  // Assert that 'pattern' (again, a regexp or string) has not\n  // occurred on stdout at any point so far in this run. Currently\n  // this works on complete lines, so unlike match() and read(),\n  // 'pattern' cannot span multiple lines, and furthermore if it is\n  // called before the end of the program, it may not see text on a\n  // partially read line. We could lift these restrictions easily, but\n  // there may not be any benefit since the usual way to use this is\n  // to call it after expectExit or expectEnd.\n  //\n  // Example:\n  // run = s.run(\"--help\");\n  // run.expectExit(1);  // <<-- important to actually run the command\n  // run.forbidErr(\"unwanted string\"); // <<-- important to run **after** the\n  //                                   // command ran the process.\n  forbid(pattern) {\n    this._ensureStarted();\n    this.outputLog.forbid(pattern, 'stdout');\n  }\n\n  // As forbid(), but for stderr instead of stdout.\n  forbidErr(pattern) {\n    this._ensureStarted();\n    this.outputLog.forbid(pattern, 'stderr');\n  }\n\n  // Combination of forbid() and forbidErr(). Forbids the pattern on\n  // both stdout and stderr.\n  forbidAll(pattern) {\n    this._ensureStarted();\n    this.outputLog.forbid(pattern);\n  }\n\n  // Expect the program to exit without anything further being\n  // printed on either stdout or stderr.\n  expectEnd() {\n    this._ensureStarted();\n\n    let timeout = this.baseTimeout + this.extraTime;\n    timeout *= timeoutScaleFactor;\n    this.extraTime = 0;\n    this.expectExit();\n\n    this.stdoutMatcher.matchEmpty();\n    this.stderrMatcher.matchEmpty();\n  }\n\n  // Expect the program to exit with the given (numeric) exit\n  // status. Fail if the process exits with a different code, or if\n  // the process does not exit after a timeout. You can also omit the\n  // argument to simply wait for the program to exit.\n  expectExit(code) {\n    this._ensureStarted();\n\n    this._endMatchers().await();\n\n    if (this.exitStatus === undefined) {\n      let timeout = this.baseTimeout + this.extraTime;\n      timeout *= timeoutScaleFactor;\n      this.extraTime = 0;\n\n      let timer;\n      const failure = new TestFailure('exit-timeout', { run: this });\n      const promise = new Promise((resolve, reject) => {\n        this.exitPromiseResolvers.push(resolve);\n        timer = setTimeout(() => {\n          this.exitPromiseResolvers =\n            this.exitPromiseResolvers.filter(r => r !== resolve);\n          reject(failure);\n        }, timeout * 1000);\n      });\n\n      try {\n        promise.await();\n      } finally {\n        clearTimeout(timer);\n      }\n    }\n\n    if (! this.exitStatus) {\n      throw new TestFailure('spawn-failure', { run: this });\n    }\n    if (code !== undefined && this.exitStatus.code !== code) {\n      throw new TestFailure('wrong-exit-code', {\n        expected: { code },\n        actual: this.exitStatus,\n        run: this,\n      });\n    }\n  }\n\n  // Extend the timeout for the next operation by 'secs' seconds.\n  waitSecs(secs) {\n    this.extraTime += secs;\n  }\n\n  // Send 'string' to the program on its stdin.\n  write(string) {\n    this._ensureStarted();\n    this.proc.stdin.write(string);\n  }\n\n  // Kill the program and then wait for it to actually exit.\n  stop() {\n    if (this.exitStatus === undefined) {\n      this._ensureStarted();\n      if (this.client) {\n        this.client.stop();\n      }\n      this._killProcess();\n      this.expectExit();\n    }\n  }\n\n  // Like stop, but doesn't wait for it to exit.\n  _stopWithoutWaiting() {\n    if (this.exitStatus === undefined && this.proc) {\n      if (this.client) {\n        this.client.stop();\n      }\n      this._killProcess();\n    }\n  }\n\n  // Kills the running process and it's child processes\n  _killProcess() {\n    if (!this.proc) {\n      throw new Error(\"Unexpected: `this.proc` undefined when calling _killProcess\");\n    }\n\n    if (process.platform === \"win32\") {\n      // looks like in Windows `this.proc.kill()` doesn't kill child\n      // processes.\n      execFileSync(\"taskkill\", [\"/pid\", this.proc.pid, '/f', '/t']);\n    } else {\n      this.proc.kill();\n    }\n  }\n\n  // If the fakeMongo option was set, sent a command to the stub\n  // mongod. Available commands currently are:\n  //\n  // - { stdout: \"xyz\" } to make fake-mongod write \"xyz\" to stdout\n  // - { stderr: \"xyz\" } likewise for stderr\n  // - { exit: 123 } to make fake-mongod exit with code 123\n  //\n  // Blocks until a connection to fake-mongod can be\n  // established. Throws a TestFailure if it cannot be established.\n  tellMongo(command) {\n    if (! this.fakeMongoPort) {\n      throw new Error(\"fakeMongo option on sandbox must be set\");\n    }\n\n    this._ensureStarted();\n\n    // If it's the first time we've called tellMongo on this sandbox,\n    // open a connection to fake-mongod. Wait up to 60 seconds for it\n    // to accept the connection, retrying every 100ms.\n    //\n    // XXX we never clean up this connection. Hopefully once\n    // fake-mongod has dropped its end of the connection, and we hold\n    // no reference to our end, it will get gc'd. If not, that's not\n    // great, but it probably doesn't actually create any practical\n    // problems since this is only for testing.\n    if (! this.fakeMongoConnection) {\n      const net = require('net');\n\n      let lastStartTime = 0;\n      for (\n        let attempts = 0;\n        !this.fakeMongoConnection && attempts < 600;\n        attempts++\n      ) {\n        // Throttle attempts to one every 100ms\n        sleepMs((lastStartTime + 100) - (+ new Date()));\n        lastStartTime = +(new Date());\n\n        new Promise((resolve) => {\n          // This is all arranged so that if a previous attempt\n          // belatedly succeeds, somehow, we ignore it.\n          const conn = net.connect(this.fakeMongoPort, () => {\n            if (resolve) {\n              this.fakeMongoConnection = conn;\n              resolve(true);\n              resolve = null;\n            }\n          });\n          conn.setNoDelay();\n          function fail() {\n            if (resolve) {\n              resolve(false);\n              resolve = null;\n            }\n          }\n          conn.on('error', fail);\n          setTimeout(fail, 100); // 100ms connection timeout\n        }).await();\n      }\n\n      if (!this.fakeMongoConnection) {\n        throw new TestFailure(\"mongo-not-running\", { run: this });\n      }\n    }\n\n    this.fakeMongoConnection.write(`${JSON.stringify(command)}\\n`);\n    // If we told it to exit, then we should close our end and connect again if\n    // asked to send more.\n    if (command.exit) {\n      this.fakeMongoConnection.end();\n      this.fakeMongoConnection = null;\n    }\n  }\n\n  static runTest(testList, test, testRunner, options = {}) {\n    options.retries = options.retries || 0;\n\n    let failure = null;\n    let startTime;\n    try {\n      runningTest = test;\n      startTime = +(new Date);\n      // ensure we mark the bottom of the stack each time we start a new test\n      testRunner();\n    } catch (e) {\n      failure = e;\n    } finally {\n      runningTest = null;\n      test.cleanup();\n    }\n\n    test.durationMs = +(new Date) - startTime;\n\n    if (failure) {\n      let checkmark;\n      if (process.platform === \"win32\") {\n        checkmark = 'FAIL';\n      } else {\n        checkmark = '\\u2717'; // CROSS\n      }\n\n      Console.error(`... fail! (${test.durationMs} ms)`, Console.options({ bulletPoint: `${checkmark} ` }));\n\n      if (failure instanceof TestFailure) {\n        const frames = parseStackParse(failure).outsideFiber;\n        const toolsDir = files.getCurrentToolsDir();\n        let pathWithLineNumber;\n        frames.some(frame => {\n          // The parsed stack trace will typically include frame.file\n          // strings of the form \"/tools/tests/whatever.js\", which can be\n          // made absolute by joining them with toolsDir. If the resulting\n          // absPath exists, then we know we interpreted the frame.file\n          // correctly, and we can normalize away the leading '/'\n          // character to get a safe relative path.\n          const absPath = files.pathJoin(toolsDir, frame.file);\n          if (files.exists(absPath)) {\n            const relPath = files.pathRelative(toolsDir, absPath);\n            const parts = relPath.split(\"/\");\n            if (parts[0] === \"tools\" &&\n                parts[1] === \"tool-testing\") {\n              // Ignore frames inside the /tools/tool-testing directory,\n              // like run.js and selftest.js.\n              return false;\n            }\n            pathWithLineNumber = `${relPath}:${frame.line}`;\n            return true;\n          }\n          // If frame.file was not joinable with toolsDir to obtain an\n          // absolute path that exists, show it to the user without trying\n          // to interpret what it means.\n          pathWithLineNumber = `${frame.file}:${frame.line}`;\n          return true;\n        });\n\n        Console.rawError(\n          ` => Failure Reason: \"${failure.reason}\" at \"${pathWithLineNumber}\"\\n`);\n        if (failure.reason === 'no-match' || failure.reason === 'junk-before' ||\n            failure.reason === 'match-timeout') {\n          Console.arrowError(`Pattern: \"${failure.details.pattern}\"`, 2);\n        }\n        if (failure.reason === \"wrong-exit-code\") {\n          const s = status => `${status.signal || status.code || \"???\"}`;\n\n          Console.rawError(\n            `  => Expected: \"${s(failure.details.expected)}\"` +\n            `; actual: \"${s(failure.details.actual)}\"\\n`);\n        }\n        if (failure.reason === 'expected-exception') {\n        }\n        if (failure.reason === 'not-equal') {\n          Console.rawError(\n            `  => Expected: \"${JSON.stringify(failure.details.expected)}\"; \n            actual: \"${JSON.stringify(failure.details.actual)}\"`);\n        }\n\n        if (failure.details.run) {\n          failure.details.run.outputLog.end();\n          const lines = failure.details.run.outputLog.get();\n          if (! lines.length) {\n            Console.arrowError(\"No output\", 2);\n          } else {\n            const historyLines = options.historyLines || 100;\n\n            Console.arrowError(`Last ${historyLines} lines:`, 2);\n            lines.slice(-historyLines).forEach((line) => {\n              Console.rawError(\"  \" +\n                               (line.channel === \"stderr\" ? \"2| \" : \"1| \") +\n                               line.text +\n                               (line.bare ? \"%\" : \"\") + \"\\n\");\n            });\n          }\n        }\n\n        if (failure.details.messages) {\n          Console.arrowError(\"Errors while building:\", 2);\n          Console.rawError(failure.details.messages.formatMessages() + \"\\n\");\n        }\n      } else {\n        Console.rawError(`  => Test threw exception: ${failure.stack}\\n`);\n      }\n\n      if (options.retries > 0) {\n        Console.error(\n          \"... retrying (\" +\n          options.retries +\n          (options.retries === 1 ? \" try\" : \" tries\") +\n          \" remaining) ...\",\n          Console.options({ indent: 2 })\n        );\n\n        options.retries--;\n\n        return this.runTest(testList, test, testRunner, options);\n      }\n\n      testList.notifyFailed(test, failure);\n    } else {\n      Console.success(`... ok! (${test.durationMs} ms)`);\n    }\n  }\n}\n\nimport { markThrowingMethods } from \"./test-utils.js\";\nmarkThrowingMethods(Run.prototype);\n"],"file":"tools/tool-testing/run.js.map"}