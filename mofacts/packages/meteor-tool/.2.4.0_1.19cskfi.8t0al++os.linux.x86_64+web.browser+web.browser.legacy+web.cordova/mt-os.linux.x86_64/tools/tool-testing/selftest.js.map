{"version":3,"sources":["/tools/tool-testing/selftest.js"],"names":["module","export","Run","markStack","parseStackMarkTop","fail","expectEqual","expectTrue","expectFalse","expectThrows","define","skip","listTests","runTests","inspect","link","v","files","createHash","parseStackMarkBottom","parseStackParse","markBottom","markTop","parse","Console","loadIsopackage","TestFailure","default","setRunningTest","reason","actual","expected","EJSON","equals","f","threw","e","Test","constructor","options","name","file","fileHash","tags","func","durationMs","cleanupHandlers","onCleanup","cleanupHandler","push","cleanup","forEach","allTests","fileBeingLoaded","fileBeingLoadedHash","getAllTests","testdir","pathJoin","__dirname","filenames","readdir","n","match","Error","pathBasename","fullPath","contents","readFile","update","digest","require","tagsList","slice","sort","selftestDefine","tagDescriptions","checkout","net","slow","galaxy","cordova","windows","unchanged","getFilteredTests","testState","length","readTestState","map","test","newTags","fileRegexp","testRegexp","onlyChanged","lastPassedHashes","excludeRegexp","includes","Object","assign","create","getPrototypeOf","concat","tagsToSkip","inCheckout","galaxyOnly","offline","includeSlowTests","process","platform","tagsToMatch","TestList","groupTestsByFile","tests","grouped","failedTests","skippedTags","skipCounts","tag","fileInfo","filteredTests","filter","hash","hasSkips","hasFailures","matches","some","notifyFailed","failureObject","failed","saveJUnitOutput","path","testSuites","attrSafe","attr","replace","durationForOutput","keys","testCases","countError","countFailure","testCaseAttrs","testCaseAttrsString","join","failureElement","details","depth","stack","testSuiteAttrs","testSuiteAttrsString","xmlHeader","testSuitesString","writeFile","saveTestState","info","writeTestState","generateSkipReport","result","count","noun","nounPhrase","parenthetical","getTestStateFilePath","getHomeDir","testStateFile","exists","JSON","version","stringify","testList","error","rawInfo","shouldSkipCurrentTest","currentTestIndex","limit","startTime","Date","totalRun","index","shouldSkip","skipMessage","preview","countMessage","testMessage","runTest","retries","endTime","junit","failureCount","disclaimers","rawError"],"mappings":"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","sourcesContent":["import { inspect } from 'util';\nimport * as files from '../fs/files';\nimport { createHash } from 'crypto';\nimport {\n  markBottom as parseStackMarkBottom,\n  markTop as parseStackMarkTop,\n  parse as parseStackParse,\n} from '../utils/parse-stack';\nimport { Console } from '../console/console.js';\nimport { loadIsopackage } from '../tool-env/isopackets.js';\nimport TestFailure from './test-failure.js';\nimport { setRunningTest } from './run.js';\nimport Run from './run.js';\n\n// These are accessed through selftest directly on many tests.\nexport { default as Sandbox } from './sandbox.js';\nexport { Run };\n\nimport \"../tool-env/install-runtime.js\";\n\n// Use this to decorate functions that throw TestFailure. Decorate the\n// first function that should not be included in the call stack shown\n// to the user.\nexport { parseStackMarkTop as markStack };\n\n// Call from a test to throw a TestFailure exception and bail out of the test\nexport const fail = parseStackMarkTop(function (reason) {\n  throw new TestFailure(reason);\n});\n\n// Call from a test to assert that 'actual' is equal to 'expected',\n// with 'actual' being the value that the test got and 'expected'\n// being the expected value\nexport const expectEqual = parseStackMarkTop(function (actual, expected) {\n  if (! loadIsopackage('ejson').EJSON.equals(actual, expected)) {\n    throw new TestFailure(\"not-equal\", {\n      expected,\n      actual,\n    });\n  }\n});\n\n// Call from a test to assert that 'actual' is truthy.\nexport const expectTrue = parseStackMarkTop(function (actual) {\n  if (! actual) {\n    throw new TestFailure('not-true');\n  }\n});\n\n// Call from a test to assert that 'actual' is falsey.\nexport const expectFalse = parseStackMarkTop(function (actual) {\n  if (actual) {\n    throw new TestFailure('not-false');\n  }\n});\n\nexport const expectThrows = parseStackMarkTop(function (f) {\n  let threw = false;\n  try {\n    f();\n  } catch (e) {\n    threw = true;\n  }\n\n  if (! threw) {\n    throw new TestFailure(\"expected-exception\");\n  }\n});\n\nclass Test {\n  constructor(options) {\n    this.name = options.name;\n    this.file = options.file;\n    this.fileHash = options.fileHash;\n    this.tags = options.tags || [];\n    this.f = options.func;\n    this.durationMs = null;\n    this.cleanupHandlers = [];\n  }\n\n  onCleanup(cleanupHandler) {\n    this.cleanupHandlers.push(cleanupHandler);\n  }\n\n  cleanup() {\n    this.cleanupHandlers.forEach((cleanupHandler) => {\n      cleanupHandler();\n    });\n    this.cleanupHandlers = [];\n  }\n}\n\nlet allTests = null;\nlet fileBeingLoaded = null;\nlet fileBeingLoadedHash = null;\n\nconst getAllTests = () => {\n  if (allTests) {\n    return allTests;\n  }\n  allTests = [];\n\n  // Load all files in the 'tests' directory that end in .js. They\n  // are supposed to then call define() to register their tests.\n  const testdir = files.pathJoin(__dirname, '..', 'tests');\n  const filenames = files.readdir(testdir);\n  filenames.forEach((n) => {\n    if (! n.match(/^[^.].*\\.js$/)) {\n      // ends in '.js', doesn't start with '.'\n      return;\n    }\n    try {\n      if (fileBeingLoaded) {\n        throw new Error(\"called recursively?\");\n      }\n      fileBeingLoaded = files.pathBasename(n, '.js');\n\n      const fullPath = files.pathJoin(testdir, n);\n      const contents = files.readFile(fullPath, 'utf8');\n      fileBeingLoadedHash = createHash('sha1').update(contents).digest('hex');\n\n      require(files.pathJoin(testdir, n));\n    } finally {\n      fileBeingLoaded = null;\n      fileBeingLoadedHash = null;\n    }\n  });\n\n  return allTests;\n};\n\nexport function define(name, tagsList, f) {\n  if (typeof tagsList === \"function\") {\n    // tagsList is optional\n    f = tagsList;\n    tagsList = [];\n  }\n\n  const tags = tagsList.slice();\n  tags.sort();\n\n  allTests.push(new Test({\n    name,\n    tags,\n    file: fileBeingLoaded,\n    fileHash: fileBeingLoadedHash,\n    func: f,\n  }));\n}\n\n// Prevent specific self-test's from being run.\n// e.g. `selftest.skip.define(\"some test\", ...` will skip running \"some test\".\nconst selftestDefine = define;\nexport const skip = {\n  define(name, tagsList, f) {\n    if (typeof tagsList === 'function') {\n      f = tagsList;\n    }\n    selftestDefine(name, ['manually-ignored'], f);\n  }\n};\n\n///////////////////////////////////////////////////////////////////////////////\n// Choosing tests\n///////////////////////////////////////////////////////////////////////////////\n\nconst tagDescriptions = {\n  checkout: 'can only run from checkouts',\n  net: 'require an internet connection',\n  slow: 'take quite a long time; use --slow to include',\n  galaxy: 'galaxy-specific test testing galaxy integration',\n  cordova: 'requires Cordova support in tool (eg not on Windows)',\n  windows: 'runs only on Windows',\n  // these are pseudo-tags, assigned to tests when you specify\n  // --changed, --file, or a pattern argument\n  unchanged: 'unchanged since last pass',\n  'non-matching': \"don't match specified pattern\",\n  'in other files': \"\",\n  // These tests require a setup step which can be amortized across multiple\n  // similar tests, so it makes sense to segregate them\n  'custom-warehouse': \"requires a custom warehouse\",\n  'manually-ignored': 'excluded by selftest.skip'\n};\n\n// Returns a TestList object representing a filtered list of tests,\n// according to the options given (which are based closely on the\n// command-line arguments).  Used as the first step of both listTests\n// and runTests.\n//\n// Options: testRegexp, fileRegexp, onlyChanged, offline, includeSlowTests, galaxyOnly\nfunction getFilteredTests(options) {\n  options = options || {};\n  let allTests = getAllTests();\n  let testState;\n\n  if (allTests.length) {\n    testState = readTestState();\n\n    // Add pseudo-tags 'non-matching', 'unchanged', 'non-galaxy' and 'in other\n    // files' (but only so that we can then skip tests with those tags)\n    allTests = allTests.map((test) => {\n      const newTags = [];\n\n      if (options.fileRegexp && ! options.fileRegexp.test(test.file)) {\n        newTags.push('in other files');\n      } else if (options.testRegexp && ! options.testRegexp.test(test.name)) {\n        newTags.push('non-matching');\n      } else if (options.onlyChanged &&\n                 test.fileHash === testState.lastPassedHashes[test.file]) {\n        newTags.push('unchanged');\n      } else if (options.excludeRegexp &&\n                 options.excludeRegexp.test(test.name)) {\n        newTags.push('excluded');\n      }\n\n      // We make sure to not run galaxy tests unless the user explicitly asks us\n      // to. Someday, this might not be the case.\n      if (! test.tags.includes(\"galaxy\")) {\n        newTags.push('non-galaxy');\n      }\n\n      if (! newTags.length) {\n        return test;\n      }\n\n      return Object.assign(\n        Object.create(Object.getPrototypeOf(test)),\n        test,\n        {\n          tags: test.tags.concat(newTags),\n        }\n      );\n    });\n  }\n\n  // (order of tags is significant to the \"skip counts\" that are displayed)\n  const tagsToSkip = [];\n  if (options.fileRegexp) {\n    tagsToSkip.push('in other files');\n  }\n  if (options.testRegexp) {\n    tagsToSkip.push('non-matching');\n  }\n  if (options.excludeRegexp) {\n    tagsToSkip.push('excluded');\n  }\n  if (options.onlyChanged) {\n    tagsToSkip.push('unchanged');\n  }\n  if (! files.inCheckout()) {\n    tagsToSkip.push('checkout');\n  }\n  if (options.galaxyOnly) {\n    // We consider `galaxy` to imply `slow` and `net` since almost all galaxy\n    // tests involve deploying an app to a (probably) remote server.\n    tagsToSkip.push('non-galaxy');\n  } else {\n    tagsToSkip.push('galaxy');\n    if (options.offline) {\n      tagsToSkip.push('net');\n    }\n    if (! options.includeSlowTests) {\n      tagsToSkip.push('slow');\n    }\n  }\n\n  if (options['without-tag']) {\n    tagsToSkip.push(options['without-tag']);\n  }\n\n  if (process.platform === \"win32\") {\n    tagsToSkip.push(\"cordova\");\n    tagsToSkip.push(\"yet-unsolved-windows-failure\");\n  } else {\n    tagsToSkip.push(\"windows\");\n  }\n\n  tagsToSkip.push('manually-ignored');\n\n  const tagsToMatch = options['with-tag'] ? [options['with-tag']] : [];\n  return new TestList(allTests, tagsToSkip, tagsToMatch, testState);\n}\n\nfunction groupTestsByFile(tests) {\n  const grouped = {};\n  tests.forEach((test) => {\n    grouped[test.file] = grouped[test.file] || [];\n    grouped[test.file].push(test);\n  });\n\n  return grouped;\n}\n\n// A TestList is the result of getFilteredTests.  It holds the original\n// list of all tests, the filtered list, and stats on how many tests\n// were skipped (see generateSkipReport).\n//\n// TestList also has code to save the hashes of files where all tests\n// ran and passed (for the `--changed` option).  If a testState is\n// provided, the notifyFailed and saveTestState can be used to modify\n// the testState appropriately and write it out.\nclass TestList {\n  constructor(allTests, tagsToSkip, tagsToMatch, testState) {\n    tagsToSkip = (tagsToSkip || []);\n    testState = (testState || null); // optional\n    this.allTests = allTests;\n    this.failedTests = [];\n    this.skippedTags = tagsToSkip;\n    this.skipCounts = {};\n    this.testState = testState;\n\n    tagsToSkip.forEach((tag) => {\n      this.skipCounts[tag] = 0;\n    });\n\n    this.fileInfo = {}; // path -> {hash, hasSkips, hasFailures}\n\n    this.filteredTests = allTests.filter((test) => {\n      if (! this.fileInfo[test.file]) {\n        this.fileInfo[test.file] = {\n          hash: test.fileHash,\n          hasSkips: false,\n          hasFailures: false\n        };\n      }\n\n      const fileInfo = this.fileInfo[test.file];\n\n      if (tagsToMatch.length) {\n        const matches = tagsToMatch.some((tag) => test.tags.includes(tag));\n        if (!matches) {\n          return false;\n        }\n      }\n\n      // We look for tagsToSkip *in order*, and when we decide to\n      // skip a test, we don't keep looking at more tags, and we don't\n      // add the test to any further \"skip counts\".\n      return !tagsToSkip.some((tag) => {\n        if (test.tags.includes(tag)) {\n          this.skipCounts[tag]++;\n          fileInfo.hasSkips = true;\n          return true;\n        } else {\n          return false;\n        }\n      });\n    });\n  }\n\n  // Mark a test's file as having failures.  This prevents\n  // saveTestState from saving its hash as a potentially\n  // \"unchanged\" file to be skipped in a future run.\n  notifyFailed(test, failureObject) {\n    // Mark the file that this test lives in as having failures.\n    this.fileInfo[test.file].hasFailures = true;\n\n    this.failedTests.push(test);\n\n    // Mark that the specific test failed.\n    test.failed = true;\n\n    // If there is a failure object, store that for potential output.\n    if (failureObject) {\n      test.failureObject = failureObject;\n    }\n  }\n\n  saveJUnitOutput(path) {\n    const grouped = groupTestsByFile(this.filteredTests);\n\n    // We'll form an collection of \"testsuites\"\n    const testSuites = [];\n\n    const attrSafe = attr => (attr || \"\").replace('\"', \"&quot;\");\n    const durationForOutput = durationMs => durationMs / 1000;\n\n    // Each file is a testsuite.\n    Object.keys(grouped).forEach((file) => {\n      const testCases = [];\n\n      let countError = 0;\n      let countFailure = 0;\n\n      // Each test is a \"testcase\".\n      grouped[file].forEach((test) => {\n        const testCaseAttrs = [\n          `name=\"${attrSafe(test.name)}\"`,\n        ];\n\n        if (test.durationMs) {\n          testCaseAttrs.push(`time=\"${durationForOutput(test.durationMs)}\"`);\n        }\n\n        const testCaseAttrsString = testCaseAttrs.join(' ');\n\n        if (test.failed) {\n          let failureElement = \"\";\n\n          if (test.failureObject instanceof TestFailure) {\n            countFailure++;\n\n            failureElement = [\n              `<error type=\"${test.failureObject.reason}\">`,\n              '<![CDATA[',\n              inspect(test.failureObject.details, { depth: 4 }),\n              ']]>',\n              '</error>',\n            ].join('\\n');\n          } else if (test.failureObject && test.failureObject.stack) {\n            countError++;\n\n            failureElement = [\n              '<failure>',\n              '<![CDATA[',\n              test.failureObject.stack,\n              ']]>',\n              '</failure>',\n            ].join('\\n');\n          } else {\n            countError++;\n\n            failureElement = '<failure />';\n          }\n\n          testCases.push(\n            [\n              `<testcase ${testCaseAttrsString}>`,\n              failureElement,\n              '</testcase>',\n            ].join('\\n'),\n          );\n        } else {\n          testCases.push(`<testcase ${testCaseAttrsString}/>`);\n        }\n      });\n\n      const testSuiteAttrs = [\n        `name=\"${file}\"`,\n        `tests=\"${testCases.length}\"`,\n        `failures=\"${countFailure}\"`,\n        `errors=\"${countError}\"`,\n        `time=\"${durationForOutput(this.durationMs)}\"`,\n      ];\n\n      const testSuiteAttrsString = testSuiteAttrs.join(' ');\n\n      testSuites.push(\n        [\n          `<testsuite ${testSuiteAttrsString}>`,\n          testCases.join('\\n'),\n          '</testsuite>',\n        ].join('\\n'),\n      );\n    });\n\n    const xmlHeader = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n\n    const testSuitesString = testSuites.join('\\n');\n\n    files.writeFile(path,\n      [\n        xmlHeader,\n        `<testsuites>`,\n        testSuitesString,\n        `</testsuites>`,\n      ].join('\\n'),\n      'utf8',\n    );\n  }\n\n  // If this TestList was constructed with a testState,\n  // modify it and write it out based on which tests\n  // were skipped and which tests had failures.\n  saveTestState() {\n    const testState = this.testState;\n    if (! (testState && this.filteredTests.length)) {\n      return;\n    }\n\n    Object.keys(this.fileInfo).forEach((f) => {\n      const info = this.fileInfo[f];\n      if (info.hasFailures) {\n        delete testState.lastPassedHashes[f];\n      } else if (! info.hasSkips) {\n        testState.lastPassedHashes[f] = info.hash;\n      }\n    });\n\n    writeTestState(testState);\n  }\n\n  // Return a string like \"Skipped 1 foo test\\nSkipped 5 bar tests\\n\"\n  generateSkipReport() {\n    let result = '';\n\n    this.skippedTags.forEach((tag) => {\n      const count = this.skipCounts[tag];\n      if (count) {\n        const noun = \"test\" + (count > 1 ? \"s\" : \"\"); // \"test\" or \"tests\"\n        // \"non-matching tests\" or \"tests in other files\"\n        const nounPhrase = (/ /.test(tag) ?\n                          (noun + \" \" + tag) : (tag + \" \" + noun));\n        // \" (foo)\" or \"\"\n        const parenthetical = (tagDescriptions[tag] ? \" (\" +\n                            tagDescriptions[tag] + \")\" : '');\n        result += (\"Skipped \" + count + \" \" + nounPhrase + parenthetical + '\\n');\n      }\n    });\n\n    return result;\n  }\n}\n\nfunction getTestStateFilePath() {\n  return files.pathJoin(files.getHomeDir(), '.meteortest');\n}\n\nfunction readTestState() {\n  const testStateFile = getTestStateFilePath();\n  let testState;\n  if (files.exists(testStateFile)) {\n    testState = JSON.parse(files.readFile(testStateFile, 'utf8'));\n  }\n  if (! testState || testState.version !== 1) {\n    testState = { version: 1, lastPassedHashes: {} };\n  }\n  return testState;\n}\n\nfunction writeTestState(testState) {\n  const testStateFile = getTestStateFilePath();\n  files.writeFile(testStateFile, JSON.stringify(testState), 'utf8');\n}\n\n// Same options as getFilteredTests.  Writes to stdout and stderr.\nexport function listTests(options) {\n  const testList = getFilteredTests(options);\n\n  if (! testList.allTests.length) {\n    Console.error(\"No tests defined.\\n\");\n    return;\n  }\n\n  const grouped = groupTestsByFile(testList.filteredTests);\n\n  Object.keys(grouped).forEach((file) => {\n    Console.rawInfo(`${file}.js\\n`);\n    grouped[file].forEach((test) => {\n      Console.rawInfo('  - test:' + test.name +\n                      (test.tags.length ? ' [' + test.tags.join(' ') + ']'\n                      : '') + '\\n');\n    });\n  });\n\n  Console.error();\n  Console.error(testList.filteredTests.length + \" tests listed.\");\n  Console.error(testList.generateSkipReport());\n}\n\nconst shouldSkipCurrentTest = ({currentTestIndex, options: {skip, limit} = {}}) => {\n  if (!skip && !limit) {\n    return false;\n  }\n  if (limit && skip) {\n    return currentTestIndex < skip || (currentTestIndex - skip) >= limit;\n  }\n  if (limit) {\n    return currentTestIndex >= limit;\n  }\n  if (skip) {\n    return currentTestIndex < skip;\n  }\n  return false;\n};\n\n///////////////////////////////////////////////////////////////////////////////\n// Running tests\n///////////////////////////////////////////////////////////////////////////////\n\n// options: onlyChanged, offline, includeSlowTests, historyLines, testRegexp,\n//          fileRegexp,\n//          clients:\n//             - browserstack (need s3cmd credentials)\nexport function runTests(options) {\n  const testList = getFilteredTests(options);\n\n  if (! testList.allTests.length) {\n    Console.error(\"No tests defined.\");\n    return 0;\n  }\n\n  testList.startTime = new Date;\n\n  let totalRun = 0;\n\n  testList.filteredTests.forEach((test, index) => {\n    totalRun++;\n    const shouldSkip = shouldSkipCurrentTest({\n      currentTestIndex: index,\n      options,\n    });\n    const skipMessage = shouldSkip\n      ? options.preview\n        ? 'will skip'\n        : 'skipped'\n      : options.preview\n      ? 'will run'\n      : 'running';\n    const countMessage = `(${index + 1}/${testList.filteredTests.length})`;\n    const testMessage = `${test.file}.js test:${test.name} ...`;\n    Console.info(`${skipMessage} ${countMessage} ${testMessage}`);\n\n    if (shouldSkip || options.preview) {\n      return;\n    }\n\n    Run.runTest(\n      testList,\n      test,\n      parseStackMarkBottom(() => {\n        test.f(options);\n      }),\n      {\n        retries: options.retries,\n      }\n    );\n  });\n\n  testList.endTime = new Date;\n  testList.durationMs = testList.endTime - testList.startTime;\n\n  testList.saveTestState();\n\n  if (options.junit) {\n    testList.saveJUnitOutput(options.junit);\n  }\n\n  if (totalRun > 0) {\n    Console.error();\n  }\n\n  Console.error(testList.generateSkipReport());\n\n  const failureCount = testList.failedTests.length;\n\n  if (!totalRun) {\n    Console.error(\"No tests run.\");\n    return 0;\n  } else if (!failureCount) {\n    let disclaimers = '';\n    if (totalRun < testList.allTests.length) {\n      disclaimers += \" other\";\n    }\n    Console.error(\"All\" + disclaimers + \" tests passed.\");\n    return 0;\n  } else {\n    Console.error(failureCount + \" failure\" +\n                  (failureCount > 1 ? \"s\" : \"\") + \":\");\n    testList.failedTests.forEach((test) => {\n      Console.rawError(`  - ${test.file}.js: test:${test.name}\\n`);\n    });\n    return 1;\n  }\n};\n\n// To create self-tests:\n//\n// Create a new .js file in the tests directory. It will be picked\n// up automatically.\n//\n// Start your file with something like:\n//   var selftest = require('./selftest.js');\n//   var Sandbox = selftest.Sandbox;\n//\n// Define tests with:\n//   selftest.define(\"test-name\", ['tag1', 'tag2'], function () {\n//     ...\n//   });\n//\n// The tags are used to group tests. Currently used tags:\n//   - 'checkout': should only be run when we're running from a\n//     checkout as opposed to a released copy.\n//   - 'net': test requires an internet connection. Not going to work\n//     if you're on a plane; will be skipped if we appear to be\n//     offline unless run with 'self-test --force-online'.\n//   - 'slow': test is slow enough that you don't want to run it\n//     except on purpose. Won't run unless you say 'self-test --slow'.\n//\n// If you don't want to set any tags, you can omit that parameter\n// entirely.\n//\n// Inside your test function, first create a Sandbox object, then call\n// the run() method on the sandbox to set up a new run of meteor with\n// arguments of your choice, and then use functions like match(),\n// write(), and expectExit() to script that run.\n"],"file":"tools/tool-testing/selftest.js.map"}