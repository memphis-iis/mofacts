{"version":3,"sources":["/tools/packaging/tropohouse.js"],"names":["_","require","files","utils","httpHelpers","archinfo","catalog","Isopack","config","buildmessage","Console","colonConverter","exports","Tropohouse","root","options","self","platform","process","defaultWarehouseDir","env","METEOR_WAREHOUSE_DIR","warehouseBase","inCheckout","getCurrentToolsDir","getHomeDir","pathJoin","default","_extractAndConvert","packageTarball","forceConvert","targetDirectory","mkdtemp","extractTarGz","metadata","originalVersion","readMetadataFromDirectory","convertedMetadata","convertIsopack","isopackFileData","isopackJsonPath","exists","chmod","writeFile","Buffer","from","JSON","stringify","mode","unlink","each","builds","unibuildMeta","unibuildJsonPath","path","unibuildJson","parse","readFile","format","Error","convertedUnibuild","convertUnibuild","plugins","pluginMeta","programJsonPath","programJson","convertedPlugin","convertJSImage","Object","assign","prototype","packagePath","packageName","version","relative","isValidPackageName","relativePath","getPackagesDirectoryName","convert","wipeAllPackages","packagesDirectoryName","packageRootDir","escapedPackages","readdir","e","code","latestToolPackageEscaped","latestToolVersion","currentToolPackageEscaped","currentToolVersion","toolsDir","pathBasename","pathDirname","toolVersionDir","toolVersionWithDotAndRandomBit","split","pieces","shift","pop","join","latestMeteorSymlink","startsWith","pathSep","rest","substr","length","packageEscaped","packageDir","versions","test","rm_recursive","installed","architectures","host","downloaded","_alreadyDownloaded","every","requiredArch","mostSpecificMatch","downloadedArches","packageMetadata","pluck","_saveIsopack","isopack","saveToPath","includePreCompilerPluginIsopackVersions","newPackageLinkTarget","randomToken","buildArchitectures","combinedDirectory","symlinkOverSync","_makeDownloader","assertInJob","archesToDownload","filter","debug","buildsToDownload","official","getBuildsForArches","error","tags","refreshCouldHelp","download","assertInCapture","enterJob","title","buildInputDirs","buildTempDirs","packageLinkTarget","push","readlink","pathResolve","build","url","METEOR_WAREHOUSE_URLBASE","replace","getUrlWithResuming","encoding","progress","getCurrentProgressTracker","wait","OfflineError","message","jobHasMessages","buildTempDir","i","_loadUnibuildsFromPath","firstIsopack","freeTempDir","downloadPackagesMissingFromMap","packageMap","serverArchs","serverArchitectures","downloader","downloaders","eachPackage","info","kind","forkJoin","parallel","linkPath","readLinkToMeteorScript","linkToLatestMeteor","scriptLocation","linkToMeteorScript","_getPlatform"],"mappings":"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","sourcesContent":["var _ = require(\"underscore\");\nvar files = require('../fs/files');\nvar utils = require('../utils/utils.js');\nvar httpHelpers = require('../utils/http-helpers.js');\nvar archinfo = require('../utils/archinfo');\nvar catalog = require('./catalog/catalog.js');\nvar Isopack = require('../isobuild/isopack.js').Isopack;\nvar config = require('../meteor-services/config.js');\nvar buildmessage = require('../utils/buildmessage.js');\nvar Console = require('../console/console.js').Console;\nvar colonConverter = require('../utils/colon-converter.js');\n\nexports.Tropohouse = function (root, options) {\n  var self = this;\n  options = options || {};\n\n  self.root = root;\n  self.platform = options.platform || process.platform;\n};\n\n// Return the directory containing our loaded collection of tools, releases and\n// packages. If we're running an installed version, found at $HOME/.meteor, if\n// we are running form a checkout, probably at $CHECKOUT_DIR/.meteor.\nvar defaultWarehouseDir = function () {\n  // a hook for tests, or i guess for users.\n  if (process.env.METEOR_WAREHOUSE_DIR) {\n    return process.env.METEOR_WAREHOUSE_DIR;\n  }\n\n  var warehouseBase = files.inCheckout()\n     ? files.getCurrentToolsDir() : files.getHomeDir();\n  // XXX This will be `.meteor` soon, once we've written the code to make the\n  // tropohouse and warehouse live together in harmony (eg, allowing tropohouse\n  // tools to springboard to warehouse tools).\n  return files.pathJoin(warehouseBase, \".meteor\");\n};\n\n// The default tropohouse is on disk at defaultWarehouseDir(); you can make your\n// own Tropohouse to override these things.\nexports.default = new exports.Tropohouse(defaultWarehouseDir());\n\n/**\n * Extract a package tarball, and on Windows convert file paths and metadata\n * @param  {String} packageTarball path to tarball\n * @param {Boolean} forceConvert Convert paths even on unix, for testing\n * @return {String}                Temporary directory with contents of package\n */\nexports._extractAndConvert = function (packageTarball, forceConvert) {\n  var targetDirectory = files.mkdtemp();\n  files.extractTarGz(packageTarball, targetDirectory, {\n    forceConvert: forceConvert\n  });\n\n  if (process.platform === \"win32\" || forceConvert) {\n    // Packages published before the Windows release might have colons or\n    // other unsavory characters in path names. In hopes of making most of\n    // these packages work on Windows, we will try to automatically convert\n    // them.\n    //\n    // At this location in the code, the metadata inside the isopack is\n    // inconsistent with the actual file paths, since we convert some file\n    // paths inside extractTarGz. Now we need to convert the metadata to match\n    // the files.\n\n    // Step 1. Load the metadata from isopack.json and convert colons in the\n    // file paths. We have already converted the colons in the actual files\n    // while untarring.\n    var {metadata, originalVersion} =\n          Isopack.readMetadataFromDirectory(targetDirectory);\n\n    // By the time that isopack-2 came out (around Meteor 1.2) nobody should be\n    // making colon packages anyway, so let's not waste effort converting (and\n    // moreover, not bother to make sure the code below works for isopack-2).\n    if (originalVersion === 'unipackage-pre2' ||\n        originalVersion === 'isopack-1') {\n      var convertedMetadata = colonConverter.convertIsopack(metadata);\n\n      // Step 2. Write the isopack.json file.  Keep it as isopack-1;\n      // _saveIsopack later will upgrade to isopack-2.\n      var isopackFileData = {};\n      isopackFileData['isopack-1'] = convertedMetadata;\n\n      var isopackJsonPath = files.pathJoin(targetDirectory, \"isopack.json\");\n\n      if (files.exists(isopackJsonPath)) {\n        files.chmod(isopackJsonPath, 0o777);\n      }\n\n      files.writeFile(\n        isopackJsonPath,\n        Buffer.from(JSON.stringify(isopackFileData, null, 2), 'utf8'),\n        {mode: 0o444});\n\n      // Step 3. Clean up old unipackage.json file if it exists\n      files.unlink(files.pathJoin(targetDirectory, \"unipackage.json\"));\n\n      // Result: Now we are in a state where the isopack.json file paths are\n      // consistent with the paths in the downloaded tarball.\n\n      // Now, we have to convert the unibuild files in the same way.\n      _.each(convertedMetadata.builds, function (unibuildMeta) {\n        var unibuildJsonPath = files.pathJoin(targetDirectory,\n                                              unibuildMeta.path);\n        var unibuildJson = JSON.parse(files.readFile(unibuildJsonPath));\n\n        if (unibuildJson.format !== \"unipackage-unibuild-pre1\") {\n          throw new Error(\"Unsupported isopack unibuild format: \" +\n                          JSON.stringify(unibuildJson.format));\n        }\n\n        var convertedUnibuild = colonConverter.convertUnibuild(unibuildJson);\n\n        files.chmod(unibuildJsonPath, 0o777);\n        files.writeFile(\n          unibuildJsonPath,\n          Buffer.from(JSON.stringify(convertedUnibuild, null, 2), 'utf8'),\n          {mode: 0o444});\n        // Result: Now we are in a state where the unibuild file paths are\n        // consistent with the paths in the downloaded tarball.\n      });\n\n      // Lastly, convert the build plugins, which are in the JSImage format\n      _.each(convertedMetadata.plugins, function (pluginMeta) {\n        var programJsonPath = files.pathJoin(targetDirectory, pluginMeta.path);\n        var programJson = JSON.parse(files.readFile(programJsonPath));\n\n        if (programJson.format !== \"javascript-image-pre1\") {\n          throw new Error(\"Unsupported plugin format: \" +\n                          JSON.stringify(programJson.format));\n        }\n\n        var convertedPlugin = colonConverter.convertJSImage(programJson);\n\n        files.chmod(programJsonPath, 0o777);\n        files.writeFile(\n          programJsonPath,\n          Buffer.from(JSON.stringify(convertedPlugin, null, 2), 'utf8'),\n          {mode: 0o444});\n        // Result: Now we are in a state where the build plugin file paths are\n        // consistent with the paths in the downloaded tarball.\n      });\n    }\n  }\n\n  return targetDirectory;\n};\n\nObject.assign(exports.Tropohouse.prototype, {\n  // Returns the load path where one can expect to find the package, at a given\n  // version, if we have already downloaded from the package server. Does not\n  // check for contents.\n  //\n  // Returns null if the package name is lexographically invalid.\n  packagePath: function (packageName, version, relative) {\n    var self = this;\n    if (! utils.isValidPackageName(packageName)) {\n      return null;\n    }\n\n    var relativePath = files.pathJoin(\n      config.getPackagesDirectoryName(),\n      colonConverter.convert(packageName),\n      version);\n\n    return relative ? relativePath : files.pathJoin(self.root, relativePath);\n  },\n\n  // Pretty extreme! We call this when we learn that something has changed on\n  // the server in a way that our sync protocol doesn't understand well.\n  wipeAllPackages: function () {\n    var self = this;\n    var packagesDirectoryName = config.getPackagesDirectoryName();\n    var packageRootDir = files.pathJoin(self.root, packagesDirectoryName);\n    var escapedPackages;\n\n    try {\n      // XXX this variable actually can't be accessed from outside this\n      // line, this is definitely a bug\n      escapedPackages = files.readdir(packageRootDir);\n    } catch (e) {\n      // No packages at all? We're done.\n      if (e.code === 'ENOENT') {\n        return;\n      }\n      throw e;\n    }\n\n    // We want to be careful not to break the 'meteor' symlink inside the\n    // tropohouse. Hopefully nobody deleted/modified that package!\n    var latestToolPackageEscaped = null;\n    var latestToolVersion = null;\n    var currentToolPackageEscaped = null;\n    var currentToolVersion = null;\n    // Warning: we can't examine release.current here, because we might be\n    // currently processing release.load!\n    if (!files.inCheckout()) {\n      // toolsDir is something like:\n      // /home/user/.meteor/packages/meteor-tool/.1.0.17.ut200e++os.osx.x86_64+web.browser+web.cordova/meteor-tool-os.osx.x86_64\n      // or /C/Users/user/AppData/Local/Temp/mt-17618kk/tropohouse/packages/meteor-tool/33.0.1/mt-os.windows.x86_32 on Windows\n      var toolsDir = files.getCurrentToolsDir();\n      // eg, 'meteor-tool'\n      currentToolPackageEscaped =\n        files.pathBasename(files.pathDirname(files.pathDirname(toolsDir)));\n      // eg, '.1.0.17-xyz1.2.ut200e++os.osx.x86_64+web.browser+web.cordova' on Unix\n      // or '33.0.1' on Windows\n      var toolVersionDir = files.pathBasename(files.pathDirname(toolsDir));\n\n      if (process.platform !== 'win32') {\n        var toolVersionWithDotAndRandomBit = toolVersionDir.split('++')[0];\n        var pieces = toolVersionWithDotAndRandomBit.split('.');\n        pieces.shift();\n        pieces.pop();\n        currentToolVersion = pieces.join('.');\n      } else {\n        currentToolVersion = toolVersionDir;\n      }\n\n      var latestMeteorSymlink = self.latestMeteorSymlink();\n      if (latestMeteorSymlink.startsWith(packagesDirectoryName +\n                                         files.pathSep)) {\n        var rest = latestMeteorSymlink.substr(\n          packagesDirectoryName.length + files.pathSep.length);\n\n        pieces = rest.split(files.pathSep);\n        latestToolPackageEscaped = pieces[0];\n        latestToolVersion = pieces[1];\n      }\n    }\n\n    _.each(escapedPackages, function (packageEscaped) {\n      var packageDir = files.pathJoin(packageRootDir, packageEscaped);\n      var versions;\n\n      try {\n        versions = files.readdir(packageDir);\n      } catch (e) {\n        // Somebody put a file in here or something? Whatever, ignore.\n        if (e.code === 'ENOENT' || e.code === 'ENOTDIR') {\n          return;\n        }\n        throw e;\n      }\n      _.each(versions, function (version) {\n        // Is this a pre-0.9.0 \"warehouse\" version with a hash name?\n        if (/^[a-f0-9]{3,}$/.test(version)) {\n          return;\n        }\n\n        // Skip the currently-latest tool (ie, don't break top-level meteor\n        // symlink). This includes both the symlink with its name and the thing\n        // it points to.\n        if (packageEscaped === latestToolPackageEscaped &&\n            (version === latestToolVersion ||\n             version.startsWith('.' + latestToolVersion + '.'))) {\n          return;\n        }\n\n        // Skip the currently-executing tool (ie, don't break the current\n        // operation).\n        if (packageEscaped === currentToolPackageEscaped &&\n            (version === currentToolVersion ||\n             version.startsWith('.' + currentToolVersion + '.'))) {\n          return;\n        }\n\n        files.rm_recursive(files.pathJoin(packageDir, version));\n      });\n    });\n  },\n  // Returns true if the given package at the given version exists on disk, or\n  // false otherwise. Takes in the following:\n  //  - packageName: name of the package\n  //  - version: version\n  //  - architectures: (optional) array of architectures. Defaults to\n  //    archinfo.host().\n  installed: function (options) {\n    var self = this;\n    if (!options.packageName) {\n      throw Error(\"Missing required argument: packageName\");\n    }\n    if (!options.version) {\n      throw Error(\"Missing required argument: version\");\n    }\n    var architectures = options.architectures || [archinfo.host()];\n\n    var downloaded = self._alreadyDownloaded({\n      packageName: options.packageName,\n      version: options.version\n    });\n\n    return _.every(architectures, function (requiredArch) {\n      return archinfo.mostSpecificMatch(requiredArch, downloaded);\n    });\n  },\n\n  // Given a package name and version, returns the architectures for\n  // which we have downloaded this package\n  //\n  // Throws if the symlink cannot be read for any reason other than\n  // ENOENT/\n  _alreadyDownloaded: function (options) {\n    var self = this;\n    var packageName = options.packageName;\n    var version = options.version;\n    if (!options.packageName) {\n      throw Error(\"Missing required argument: packageName\");\n    }\n    if (!options.version) {\n      throw Error(\"Missing required argument: version\");\n    }\n\n\n    // Figure out what arches (if any) we have loaded for this package version\n    // already.\n    var packagePath = self.packagePath(packageName, version);\n    var downloadedArches = [];\n\n    // Find out which arches we have by reading the isopack metadata\n    var {metadata: packageMetadata} =\n          Isopack.readMetadataFromDirectory(packagePath);\n\n    // packageMetadata is null if there is no package at packagePath\n    if (packageMetadata) {\n      downloadedArches = _.pluck(packageMetadata.builds, \"arch\");\n    }\n\n    return downloadedArches;\n  },\n\n  _saveIsopack: function (isopack, packageName) {\n    // XXX does this actually need the name as an argument or can we just get\n    // it from isopack?\n\n    var self = this;\n\n    if (self.platform === \"win32\") {\n      isopack.saveToPath(self.packagePath(packageName, isopack.version), {\n        includePreCompilerPluginIsopackVersions: true\n      });\n    } else {\n      // Note: wipeAllPackages depends on this filename structure\n      // On Mac and Linux, we used to use a filename structure that used the\n      // names of symlinks to determine which builds we have downloaded. We no\n      // longer need this because we now parse package metadata, but we still\n      // need to write the symlinks correctly so that old meteor tools can\n      // still read newly downloaded packages.\n      var newPackageLinkTarget = '.' + isopack.version + '.' +\n        utils.randomToken() + '++' + isopack.buildArchitectures();\n\n      var combinedDirectory = self.packagePath(\n        packageName, newPackageLinkTarget);\n\n      isopack.saveToPath(combinedDirectory, {\n        includePreCompilerPluginIsopackVersions: true\n      });\n\n      files.symlinkOverSync(newPackageLinkTarget,\n        self.packagePath(packageName, isopack.version));\n    }\n  },\n\n  // Given a package name, version, and required architectures, checks to make\n  // sure that we have the package downloaded at the requested arch. If we do,\n  // returns null.\n  //\n  // Otherwise, if the catalog has no information about appropriate builds,\n  // registers a buildmessage error and returns null.\n  //\n  // Otherwise, returns a 'downloader' object with keys packageName, version,\n  // and download; download is a method which should be called in a buildmessage\n  // capture which actually downloads the package (registering any errors with\n  // buildmessage).\n  _makeDownloader: function (options) {\n    var self = this;\n    buildmessage.assertInJob();\n\n    if (!options.packageName) {\n      throw Error(\"Missing required argument: packageName\");\n    }\n    if (!options.version) {\n      throw Error(\"Missing required argument: version\");\n    }\n    if (!options.architectures) {\n      throw Error(\"Missing required argument: architectures\");\n    }\n\n    var packageName = options.packageName;\n    var version = options.version;\n\n    // Look up which arches we have already downloaded\n    var downloadedArches = self._alreadyDownloaded({\n      packageName: packageName,\n      version: version\n    });\n\n    var archesToDownload = options.architectures.filter(function (requiredArch) {\n      return !archinfo.mostSpecificMatch(requiredArch, downloadedArches);\n    });\n\n    // Have everything we need? Great.\n    if (!archesToDownload.length) {\n      Console.debug(\"Local package version is up-to-date:\", packageName + \"@\" + version);\n      return null;\n    }\n\n    // Since we are downloading from the server (and we've already done the\n    // local package check), we can use the official catalog here. (This is\n    // important, since springboarding calls this function before the complete\n    // catalog is ready!)\n    var buildsToDownload = catalog.official.getBuildsForArches(\n      packageName, version, archesToDownload);\n    if (! buildsToDownload) {\n      buildmessage.error(\n        \"No compatible binary build found for this package. \" +\n        \"Contact the package author and ask them to publish it \" +\n        \"for your platform.\", {tags: { refreshCouldHelp: true }});\n      return null;\n    }\n\n    var packagePath = self.packagePath(packageName, version);\n    var download = function download () {\n      buildmessage.assertInCapture();\n\n      Console.debug(\"Downloading missing local versions of package\",\n                    packageName + \"@\" + version, \":\", archesToDownload);\n\n      buildmessage.enterJob({\n        title: \"downloading \" + packageName + \"@\" + version + \"...\"\n      }, function() {\n        var buildInputDirs = [];\n        var buildTempDirs = [];\n        var packageLinkTarget = null;\n\n        // Find the previous actual directory of the package\n        if (self.platform === \"win32\") {\n          // On Windows, we don't use symlinks.\n          // If there's already a package in the tropohouse, start with it.\n          if (files.exists(packagePath)) {\n            buildInputDirs.push(packagePath);\n          }\n        } else {\n          // On posix, we have a symlink structure. Get the target of the\n          // symlink so that we can delete it later.\n          try {\n            packageLinkTarget = files.readlink(packagePath);\n          } catch (e) {\n            // Complain about anything other than \"we don't have it at all\".\n            // This includes \"not a symlink\": The main reason this would not be\n            // a symlink is if it's a directory containing a pre-0.9.0 package\n            // (ie, this is a warehouse package not a tropohouse package). But\n            // the versions should not overlap: warehouse versions are truncated\n            // SHAs whereas tropohouse versions should be semver-like.\n            if (e.code !== 'ENOENT') {\n              throw e;\n            }\n          }\n\n          // If there's already a package in the tropohouse, start with it.\n          if (packageLinkTarget) {\n            buildInputDirs.push(\n              files.pathResolve(files.pathDirname(packagePath),\n                                packageLinkTarget));\n          }\n        }\n\n        // XXX how does concurrency work here?  we could just get errors if we\n        // try to rename over the other thing?  but that's the same as in\n        // warehouse?\n        _.each(buildsToDownload, ({ build: { url }}) => {\n          const packageTarball = buildmessage.enterJob({\n            title: \"downloading \" + packageName + \"@\" + version + \"...\"\n          }, () => {\n            try {\n              // Override the download domain name and protocol if METEOR_WAREHOUSE_URLBASE\n              // provided.\n              if (process.env.METEOR_WAREHOUSE_URLBASE) {\n                url = url.replace(\n                  /^[a-zA-Z]+:\\/\\/[^\\/]+/,\n                  process.env.METEOR_WAREHOUSE_URLBASE\n                );\n              }\n\n              return httpHelpers.getUrlWithResuming({\n                url: url,\n                encoding: null,\n                progress: buildmessage.getCurrentProgressTracker(),\n                wait: false\n              });\n\n            } catch (e) {\n              if (! (e instanceof files.OfflineError)) {\n                throw e;\n              }\n              buildmessage.error(e.error.message);\n            }\n          });\n\n          if (buildmessage.jobHasMessages()) {\n            return;\n          }\n\n          buildmessage.enterJob({\n            title: \"extracting \" + packageName + \"@\" + version + \"...\"\n          }, () => {\n            const buildTempDir = exports._extractAndConvert(packageTarball);\n            buildInputDirs.push(buildTempDir);\n            buildTempDirs.push(buildTempDir);\n          });\n        });\n\n        if (buildmessage.jobHasMessages()) {\n          return;\n        }\n\n        buildmessage.enterJob({\n          title: \"loading \" + packageName + \"@\" + version + \"...\"\n        }, () => {\n          // We need to turn our builds into a single isopack.\n          var isopack = new Isopack();\n          _.each(buildInputDirs, (buildTempDir, i) => {\n            isopack._loadUnibuildsFromPath(packageName, buildTempDir, {\n              firstIsopack: i === 0,\n            });\n          });\n\n          self._saveIsopack(isopack, packageName, version);\n        });\n\n        // Delete temp directories now (asynchronously).\n        _.each(buildTempDirs, function (buildTempDir) {\n          files.freeTempDir(buildTempDir);\n        });\n\n        // Clean up old version.\n        if (packageLinkTarget) {\n          files.rm_recursive(self.packagePath(packageName, packageLinkTarget));\n        }\n      });\n    };\n\n    return {\n      packageName: packageName,\n      version: version,\n      download: download\n    };\n  },\n\n\n  // Takes in a PackageMap object. Downloads any versioned packages we don't\n  // already have.\n  //\n  // Reports errors via buildmessage.\n  downloadPackagesMissingFromMap: function (packageMap, options) {\n    var self = this;\n    buildmessage.assertInCapture();\n    options = options || {};\n    var serverArchs = options.serverArchitectures || [archinfo.host()];\n\n    var downloader;\n    var downloaders = [];\n    packageMap.eachPackage(function (packageName, info) {\n      if (info.kind !== 'versioned') {\n        return;\n      }\n      buildmessage.enterJob(\n        \"checking for \" + packageName + \"@\" + info.version,\n        function () {\n          downloader = self._makeDownloader({\n            packageName: packageName,\n            version: info.version,\n            architectures: serverArchs\n          });\n          if (buildmessage.jobHasMessages()) {\n            downloaders = null;\n            return;\n          }\n          if (downloader && downloaders) {\n            downloaders.push(downloader);\n          }\n        }\n      );\n    });\n\n    // Did anything fail? Don't download anything.\n    if (! downloaders) {\n      return;\n    }\n\n    // Nothing to download? Great.\n    if (! downloaders.length) {\n      return;\n    }\n\n    // Just one package to download? Use a good message.\n    if (downloaders.length === 1) {\n      downloader = downloaders[0];\n      buildmessage.enterJob(\n        \"downloading \" + downloader.packageName + \"@\" + downloader.version,\n        function () {\n          downloader.download();\n        }\n      );\n      return;\n    }\n\n    // Download multiple packages in parallel.\n    // XXX use a better progress bar that shows how many you've\n    // finished downloading.\n    buildmessage.forkJoin({\n      title: 'downloading ' + downloaders.length + ' packages',\n      parallel: true\n    }, downloaders, function (downloader) {\n      downloader.download();\n    });\n  },\n\n  latestMeteorSymlink: function () {\n    var self = this;\n    var linkPath = files.pathJoin(self.root, 'meteor');\n    return files.readLinkToMeteorScript(linkPath, self.platform);\n  },\n\n  linkToLatestMeteor: function (scriptLocation) {\n    var self = this;\n    var linkPath = files.pathJoin(self.root, 'meteor');\n    files.linkToMeteorScript(scriptLocation, linkPath, self.platform);\n  },\n\n  _getPlatform: function () {\n    return this.platform;\n  }\n});\n"],"file":"tools/packaging/tropohouse.js.map"}