{"version":3,"sources":["/tools/packaging/updater.js"],"names":["module","export","updateMeteorToolSymlink","_","require","runLog","catalog","archinfo","isopack","buildmessage","Console","auth","files","tropohouse","release","packageMapModule","checkInProgress","exports","tryToDownloadUpdate","options","checkForUpdate","showBanner","printErrors","firstCheck","tryRevokeOldTokens","timeout","official","refresh","err","debug","current","isProperRelease","maybeShowBanners","lastShowTimes","shouldShow","key","maxAge","now","Date","undefined","lastShow","age","releaseData","getCatalogReleaseData","banner","bannerDate","lastUpdated","shouldShowBanner","name","log","text","setBannerShownDate","forced","catalogUtils","track","getReleaseTrack","patchReleaseVersion","patchRelease","getReleaseVersion","recommended","patchKey","displayRelease","currentReleaseOrderKey","orderKey","futureReleases","getSortedRecommendedReleaseVersions","length","futureReleaseKey","latestReleaseVersion","getDefaultReleaseVersion","latestRelease","version","Error","tool","latestReleaseToolParts","split","latestReleaseToolPackage","latestReleaseToolVersion","relativeToolPath","default","packagePath","localLatestReleaseLink","latestMeteorSymlink","startsWith","pathSep","packageMap","PackageMap","fromReleaseVersion","messages","capture","downloadPackagesMissingFromMap","hasMessages","printMessages","toolIsopack","Isopack","initFromPath","toolRecord","acceptableMeteorToolArches","some","arch","findWhere","toolsOnDisk","linkToLatestMeteor","pathJoin","path"],"mappings":"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","sourcesContent":["var _ = require('underscore');\n\nvar runLog = require('../runners/run-log.js');\nvar catalog = require('./catalog/catalog.js');\nvar archinfo = require('../utils/archinfo');\nvar isopack = require('../isobuild/isopack.js');\nvar buildmessage = require('../utils/buildmessage.js');\nvar Console = require('../console/console.js').Console;\nvar auth = require('../meteor-services/auth.js');\nvar files = require('../fs/files');\n\nvar tropohouse = require('./tropohouse.js');\nvar release = require('./release.js');\nvar packageMapModule = require('./package-map.js');\n\n/**\n * Check to see if an update is available. If so, download and install\n * it before returning.\n *\n * options: showBanner\n */\nvar checkInProgress = false;\nexports.tryToDownloadUpdate = function (options) {\n  options = options || {};\n  // Don't run more than one check simultaneously. It should be\n  // harmless but having two downloads happening simultaneously (and\n  // two sets of messages being printed) would be confusing.\n  if (checkInProgress) {\n    return;\n  }\n  checkInProgress = true;\n  checkForUpdate(!! options.showBanner, !! options.printErrors);\n  checkInProgress = false;\n};\n\nvar firstCheck = true;\n\nvar checkForUpdate = function (showBanner, printErrors) {\n  // While we're doing background stuff, try to revoke any old tokens in our\n  // session file.\n  auth.tryRevokeOldTokens({ timeout: 15 * 1000 });\n\n  if (firstCheck) {\n    // We want to avoid a potential race condition here, because we run an\n    // update almost immediately at run.  We don't want to drop the resolver\n    // cache; that would be slow.  \"meteor run\" itself should have run a refresh\n    // anyway.  So, the first time, we just skip the remote catalog sync.  But\n    // we do want to do the out-of-date release checks, so we can't just delay\n    // the first update cycle.\n    firstCheck = false;\n  } else {\n    try {\n      catalog.official.refresh();\n    } catch (err) {\n      Console.debug(\"Failed to refresh catalog, ignoring error\", err);\n      return;\n    }\n  }\n\n  if (!release.current.isProperRelease()) {\n    return;\n  }\n\n  maybeShowBanners();\n};\n\nvar lastShowTimes = {};\n\nvar shouldShow = function (key, maxAge) {\n  var now = +(new Date);\n\n  if (maxAge === undefined) {\n    maxAge = 12 * 60 * 60 * 1000;\n  }\n\n  var lastShow = lastShowTimes[key];\n  if (lastShow !== undefined) {\n    var age = now - lastShow;\n    if (age < maxAge) {\n      return false;\n    }\n  }\n\n  lastShowTimes[key] = now;\n  return true;\n};\n\nvar maybeShowBanners = function () {\n  var releaseData = release.current.getCatalogReleaseData();\n\n  var banner = releaseData.banner;\n  if (banner) {\n    var bannerDate =\n          banner.lastUpdated ? new Date(banner.lastUpdated) : new Date;\n    if (catalog.official.shouldShowBanner(release.current.name, bannerDate)) {\n      // This banner is new; print it!\n      runLog.log(\"\");\n      runLog.log(banner.text);\n      runLog.log(\"\");\n      catalog.official.setBannerShownDate(release.current.name, bannerDate);\n      return;\n    }\n  }\n\n  // We now consider printing some simpler banners, if this isn't the latest\n  // release. But if the user specified a release manually with --release, we\n  // don't bother: we only want to tell users about ways to update *their app*.\n  if (release.forced) {\n    return;\n  }\n\n  const catalogUtils = require('./catalog/catalog-utils.js');\n\n  // Didn't print a banner? Maybe we have a patch release to recommend.\n  var track = release.current.getReleaseTrack();\n  var patchReleaseVersion = releaseData.patchReleaseVersion;\n  if (patchReleaseVersion) {\n    var patchRelease = catalog.official.getReleaseVersion(\n      track, patchReleaseVersion);\n    if (patchRelease && patchRelease.recommended) {\n      var patchKey = \"patchrelease-\" + track + \"-\" + patchReleaseVersion;\n      if (shouldShow(patchKey)) {\n        runLog.log(\n          \"=> A patch (\" +\n          catalogUtils.displayRelease(track, patchReleaseVersion) +\n          \") for your current release is available!\");\n        runLog.log(\"   Update this project now with 'meteor update --patch'.\");\n      }\n      return;\n    }\n  }\n\n  // There's no patch (so no urgent exclamation!) but there may be something\n  // worth mentioning.\n  // XXX maybe run constraint solver to change the message depending on whether\n  //     or not it will actually work?\n  var currentReleaseOrderKey = releaseData.orderKey || null;\n  var futureReleases = catalog.official.getSortedRecommendedReleaseVersions(\n    track, currentReleaseOrderKey);\n  if (futureReleases.length) {\n    var futureReleaseKey = \"futurerelease-\" + track + \"-\" + futureReleases[0];\n    if (shouldShow(futureReleaseKey)) {\n      runLog.log(\n        \"=> \" + catalogUtils.displayRelease(track, futureReleases[0]) +\n        \" is available. Update this project with 'meteor update'.\");\n    }\n    return;\n  }\n};\n\n// Update ~/.meteor/meteor to point to the tool binary from the tools of the\n// latest recommended release on the default release track.\nexport function updateMeteorToolSymlink(printErrors) {\n  // Get the latest release version of METEOR. (*Always* of the default\n  // track, not of whatever we happen to be running: we always want the tool\n  // symlink to go to the default track.)\n  var latestReleaseVersion = catalog.official.getDefaultReleaseVersion();\n  // Maybe you're on some random track with nothing recommended. That's OK.\n  if (!latestReleaseVersion) {\n    return;\n  }\n\n  var latestRelease = catalog.official.getReleaseVersion(\n    latestReleaseVersion.track, latestReleaseVersion.version);\n  if (!latestRelease) {\n    throw Error(\"latest release doesn't exist?\");\n  }\n  if (!latestRelease.tool) {\n    throw Error(\"latest release doesn't have a tool?\");\n  }\n\n  var latestReleaseToolParts = latestRelease.tool.split('@');\n  var latestReleaseToolPackage = latestReleaseToolParts[0];\n  var latestReleaseToolVersion = latestReleaseToolParts[1];\n  var relativeToolPath = tropohouse.default.packagePath(\n    latestReleaseToolPackage, latestReleaseToolVersion, true);\n\n  var localLatestReleaseLink = tropohouse.default.latestMeteorSymlink();\n\n  if (! localLatestReleaseLink.startsWith(relativeToolPath + files.pathSep)) {\n    // The latest release from the catalog is not where the ~/.meteor/meteor\n    // symlink points to. Let's make sure we have that release on disk,\n    // and then update the symlink.\n    var packageMap =\n          packageMapModule.PackageMap.fromReleaseVersion(latestRelease);\n    var messages = buildmessage.capture(function () {\n      tropohouse.default.downloadPackagesMissingFromMap(packageMap);\n    });\n    if (messages.hasMessages()) {\n      // Ignore errors because we are running in the background, uness we\n      // specifically requested to print errors because we are testing this\n      // feature.\n      if (printErrors) {\n        Console.printMessages(messages);\n      }\n      return;\n    }\n\n    var toolIsopack = new isopack.Isopack;\n    toolIsopack.initFromPath(\n      latestReleaseToolPackage,\n      tropohouse.default.packagePath(latestReleaseToolPackage,\n                                     latestReleaseToolVersion));\n\n    var toolRecord = null;\n    archinfo.acceptableMeteorToolArches().some(arch => {\n      return toolRecord = _.findWhere(toolIsopack.toolsOnDisk, { arch });\n    });\n\n    // XXX maybe we shouldn't throw from this background thing\n    // counter: this is super weird and should never ever happen.\n    if (!toolRecord) {\n      throw Error(\"latest release has no tool?\");\n    }\n\n    tropohouse.default.linkToLatestMeteor(files.pathJoin(\n      relativeToolPath, toolRecord.path, 'meteor'));\n  }\n}\n"],"file":"tools/packaging/updater.js.map"}