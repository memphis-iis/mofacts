{"version":3,"sources":["/tools/utils/buildmessage.js"],"names":["_","require","files","parseStack","fiberHelpers","Progress","debugBuild","process","env","METEOR_DEBUG_BUILD","Job","options","self","messages","title","rootPath","children","Object","assign","prototype","addMessage","push","hasMessages","length","hasMessageWithTag","tagName","any","message","tags","has","formatMessages","indent","out","already","Array","join","each","stack","line","file","column","func","frame","where","MessageSet","messageSet","jobs","clone","jobsWithMessages","filter","job","map","merge","j","spaces","n","times","currentMessageSet","EnvironmentVariable","currentJob","currentNestingLevel","currentProgress","rootProgress","getRootProgress","reportProgress","state","progress","get","reportProgressDone","getCurrentProgressTracker","addChildTracker","undefined","addChildTask","capture","f","parentMessageSet","resetFns","set","nestingLevel","start","Date","now","console","log","end","forEach","fn","enterJob","progressOptions","forkJoin","pop","originalJob","jobHasMessages","search","find","markBoundary","context","markBottom","error","downcase","slice","toLowerCase","Error","secondary","info","useMyCaller","insideFiber","outsideFiber","parse","concat","caller","exception","FancySyntaxError","parsed","locus","assertInJob","assertInCapture","mergeMessagesIntoCurrentJob","innerMessages","outerMessages","outerJob","iterable","isFunction","enterJobAsync","Promise","resolve","reject","err","parallel","then","errors","results","args","promise","catch","await","all","buildmessage","exports","_MessageSet"],"mappings":"AAAA,IAAIA,CAAC,GAAGC,OAAO,CAAC,YAAD,CAAf;;AACA,IAAIC,KAAK,GAAGD,OAAO,CAAC,aAAD,CAAnB;;AACA,IAAIE,UAAU,GAAGF,OAAO,CAAC,eAAD,CAAxB;;AACA,IAAIG,YAAY,GAAGH,OAAO,CAAC,oBAAD,CAA1B;;AACA,IAAII,QAAQ,GAAGJ,OAAO,CAAC,qBAAD,CAAP,CAA+BI,QAA9C;;AAEA,IAAIC,UAAU,GAAG,CAAC,CAACC,OAAO,CAACC,GAAR,CAAYC,kBAA/B,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,GAAG,GAAG,UAAUC,OAAV,EAAmB;AAC3B,MAAIC,IAAI,GAAG,IAAX;AACAA,EAAAA,IAAI,CAACC,QAAL,GAAgB,EAAhB,CAF2B,CAI3B;AACA;;AACAD,EAAAA,IAAI,CAACE,KAAL,GAAaH,OAAO,CAACG,KAArB;AACAF,EAAAA,IAAI,CAACG,QAAL,GAAgBJ,OAAO,CAACI,QAAxB,CAP2B,CAS3B;;AACAH,EAAAA,IAAI,CAACI,QAAL,GAAgB,EAAhB;AACD,CAXD;;AAaAC,MAAM,CAACC,MAAP,CAAcR,GAAG,CAACS,SAAlB,EAA6B;AAC3B;AACA;AACAC,EAAAA,UAAU,EAAE,UAAUT,OAAV,EAAmB;AAC7B,QAAIC,IAAI,GAAG,IAAX;AACAA,IAAAA,IAAI,CAACC,QAAL,CAAcQ,IAAd,CAAmBV,OAAnB;AACD,GAN0B;AAQ3BW,EAAAA,WAAW,EAAE,YAAY;AACvB,QAAIV,IAAI,GAAG,IAAX;AACA,WAAOA,IAAI,CAACC,QAAL,CAAcU,MAAd,GAAuB,CAA9B;AACD,GAX0B;AAa3BC,EAAAA,iBAAiB,EAAE,UAAUC,OAAV,EAAmB;AACpC,QAAIb,IAAI,GAAG,IAAX;AACA,WAAOZ,CAAC,CAAC0B,GAAF,CAAMd,IAAI,CAACC,QAAX,EAAqB,UAAUc,OAAV,EAAmB;AAC7C,aAAOA,OAAO,CAACC,IAAR,IAAgB5B,CAAC,CAAC6B,GAAF,CAAMF,OAAO,CAACC,IAAd,EAAoBH,OAApB,CAAvB;AACD,KAFM,CAAP;AAGD,GAlB0B;AAoB3B;AACAK,EAAAA,cAAc,EAAE,UAAUC,MAAV,EAAkB;AAChC,QAAInB,IAAI,GAAG,IAAX;AACA,QAAIoB,GAAG,GAAG,EAAV;AACA,QAAIC,OAAO,GAAG,EAAd;AACAF,IAAAA,MAAM,GAAG,IAAIG,KAAJ,CAAU,CAACH,MAAM,IAAI,CAAX,IAAgB,CAA1B,EAA6BI,IAA7B,CAAkC,GAAlC,CAAT;;AAEAnC,IAAAA,CAAC,CAACoC,IAAF,CAAOxB,IAAI,CAACC,QAAZ,EAAsB,UAAUc,OAAV,EAAmB;AACvC,UAAIU,KAAK,GAAGV,OAAO,CAACU,KAAR,IAAiB,EAA7B;AAEA,UAAIC,IAAI,GAAGP,MAAX;;AACA,UAAIJ,OAAO,CAACY,IAAZ,EAAkB;AAChBD,QAAAA,IAAI,IAAGX,OAAO,CAACY,IAAf;;AACA,YAAIZ,OAAO,CAACW,IAAZ,EAAkB;AAChBA,UAAAA,IAAI,IAAI,MAAMX,OAAO,CAACW,IAAtB;;AACA,cAAIX,OAAO,CAACa,MAAZ,EAAoB;AAClB;AACA;AACAF,YAAAA,IAAI,IAAI,MAAMX,OAAO,CAACa,MAAtB;AACD;AACF;;AACDF,QAAAA,IAAI,IAAI,IAAR;AACD,OAXD,MAWO;AACL;AACAA,QAAAA,IAAI,IAAI,SAAR;AACD,OAlBsC,CAmBvC;;;AACAA,MAAAA,IAAI,IAAIX,OAAO,CAACA,OAAhB;;AACA,UAAIA,OAAO,CAACc,IAAR,IAAgBJ,KAAK,CAACd,MAAN,IAAgB,CAApC,EAAuC;AACrCe,QAAAA,IAAI,IAAI,UAAUX,OAAO,CAACc,IAAlB,GAAyB,GAAjC;AACD;;AACDH,MAAAA,IAAI,IAAI,IAAR;;AAEA,UAAID,KAAK,CAACd,MAAN,GAAe,CAAnB,EAAsB;AACpBvB,QAAAA,CAAC,CAACoC,IAAF,CAAOC,KAAP,EAAc,UAAUK,KAAV,EAAiB;AAC7B;AACA;AACA,cAAIC,KAAK,GAAG,EAAZ;;AACA,cAAID,KAAK,CAACH,IAAV,EAAgB;AACdI,YAAAA,KAAK,IAAID,KAAK,CAACH,IAAf;;AACA,gBAAIG,KAAK,CAACJ,IAAV,EAAgB;AACdK,cAAAA,KAAK,IAAI,MAAMD,KAAK,CAACJ,IAArB;;AACA,kBAAII,KAAK,CAACF,MAAV,EAAkB;AAChBG,gBAAAA,KAAK,IAAI,MAAMD,KAAK,CAACF,MAArB;AACD;AACF;AACF;;AAED,cAAI,CAAEE,KAAK,CAACD,IAAR,IAAgB,CAAEE,KAAtB,EAA6B;AAC3B;AACA;AACD;;AAEDL,UAAAA,IAAI,IAAI,OAAR;;AACA,cAAII,KAAK,CAACD,IAAV,EAAgB;AACdH,YAAAA,IAAI,IAAII,KAAK,CAACD,IAAN,GAAa,IAAb,GAAoBE,KAApB,GAA4B,KAApC;AACD,WAFD,MAEO;AACLL,YAAAA,IAAI,IAAIK,KAAK,GAAG,IAAhB;AACD;AACF,SAzBD;;AA0BAL,QAAAA,IAAI,IAAI,IAAR;AACD,OAtDsC,CAwDvC;;;AACA,UAAI,EAAGA,IAAI,IAAIL,OAAX,CAAJ,EAAyB;AACvBD,QAAAA,GAAG,IAAIM,IAAP;AACAL,QAAAA,OAAO,CAACK,IAAD,CAAP,GAAgB,IAAhB;AACD;AACF,KA7DD;;AA+DA,WAAON,GAAP;AACD;AA3F0B,CAA7B,E,CA+FA;AACA;;AACA,IAAIY,UAAU,GAAG,UAAUC,UAAV,EAAsB;AACrC,MAAIjC,IAAI,GAAG,IAAX;AACAA,EAAAA,IAAI,CAACkC,IAAL,GAAY,EAAZ;;AAEA,MAAID,UAAJ,EAAgB;AACdjC,IAAAA,IAAI,CAACkC,IAAL,GAAY9C,CAAC,CAAC+C,KAAF,CAAQF,UAAU,CAACC,IAAnB,CAAZ;AACD;AACF,CAPD;;AASA7B,MAAM,CAACC,MAAP,CAAc0B,UAAU,CAACzB,SAAzB,EAAoC;AAClCW,EAAAA,cAAc,EAAE,YAAY;AAC1B,QAAIlB,IAAI,GAAG,IAAX;;AAEA,QAAIoC,gBAAgB,GAAGhD,CAAC,CAACiD,MAAF,CAASrC,IAAI,CAACkC,IAAd,EAAoB,UAAUI,GAAV,EAAe;AACxD,aAAOA,GAAG,CAAC5B,WAAJ,EAAP;AACD,KAFsB,CAAvB;;AAIA,WAAOtB,CAAC,CAACmD,GAAF,CAAMH,gBAAN,EAAwB,UAAUE,GAAV,EAAe;AAC5C,UAAIlB,GAAG,GAAG,EAAV;AACAA,MAAAA,GAAG,IAAI,WAAWkB,GAAG,CAACpC,KAAf,GAAuB,KAA9B;AACAkB,MAAAA,GAAG,IAAIkB,GAAG,CAACpB,cAAJ,CAAmB,CAAnB,CAAP;AACA,aAAOE,GAAP;AACD,KALM,EAKJG,IALI,CAKC,IALD,CAAP,CAP0B,CAYX;AAChB,GAdiC;AAgBlCb,EAAAA,WAAW,EAAE,YAAY;AACvB,QAAIV,IAAI,GAAG,IAAX;AACA,WAAOZ,CAAC,CAAC0B,GAAF,CAAMd,IAAI,CAACkC,IAAX,EAAiB,UAAUI,GAAV,EAAe;AACrC,aAAOA,GAAG,CAAC5B,WAAJ,EAAP;AACD,KAFM,CAAP;AAGD,GArBiC;AAuBlCE,EAAAA,iBAAiB,EAAE,UAAUC,OAAV,EAAmB;AACpC,QAAIb,IAAI,GAAG,IAAX;AACA,WAAOZ,CAAC,CAAC0B,GAAF,CAAMd,IAAI,CAACkC,IAAX,EAAiB,UAAUI,GAAV,EAAe;AACrC,aAAOA,GAAG,CAAC1B,iBAAJ,CAAsBC,OAAtB,CAAP;AACD,KAFM,CAAP;AAGD,GA5BiC;AA8BlC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA2B,EAAAA,KAAK,EAAE,UAAUP,UAAV,EAAsB;AAC3B,QAAIjC,IAAI,GAAG,IAAX;;AACAZ,IAAAA,CAAC,CAACoC,IAAF,CAAOS,UAAU,CAACC,IAAlB,EAAwB,UAAUO,CAAV,EAAa;AACnCzC,MAAAA,IAAI,CAACkC,IAAL,CAAUzB,IAAV,CAAegC,CAAf;AACD,KAFD;AAGD;AA3CiC,CAApC;;AA8CA,IAAIC,MAAM,GAAG,UAAUC,CAAV,EAAa;AACxB,SAAOvD,CAAC,CAACwD,KAAF,CAAQD,CAAR,EAAW,YAAW;AAAE,WAAO,GAAP;AAAY,GAApC,EAAsCpB,IAAtC,CAA2C,EAA3C,CAAP;AACD,CAFD,C,CAIA;AACA;AACA;AACA;;;AACA,IAAIsB,iBAAiB,GAAG,IAAIrD,YAAY,CAACsD,mBAAjB,EAAxB;AACA,IAAIC,UAAU,GAAG,IAAIvD,YAAY,CAACsD,mBAAjB,EAAjB;AACA,IAAIE,mBAAmB,GAAG,IAAIxD,YAAY,CAACsD,mBAAjB,CAAqC,CAArC,CAA1B;AACA,IAAIG,eAAe,GAAG,IAAIzD,YAAY,CAACsD,mBAAjB,EAAtB;AAEA,IAAII,YAAY,GAAG,IAAIzD,QAAJ,EAAnB;;AAEA,IAAI0D,eAAe,GAAG,YAAY;AAChC,SAAOD,YAAP;AACD,CAFD;;AAIA,IAAIE,cAAc,GAAG,UAAUC,KAAV,EAAiB;AACpC,MAAIC,QAAQ,GAAGL,eAAe,CAACM,GAAhB,EAAf;;AACA,MAAID,QAAJ,EAAc;AACZA,IAAAA,QAAQ,CAACF,cAAT,CAAwBC,KAAxB;AACD;AACF,CALD;;AAOA,IAAIG,kBAAkB,GAAG,YAAY;AACnC,MAAIF,QAAQ,GAAGL,eAAe,CAACM,GAAhB,EAAf;;AACA,MAAID,QAAJ,EAAc;AACZA,IAAAA,QAAQ,CAACE,kBAAT;AACD;AACF,CALD;;AAOA,IAAIC,yBAAyB,GAAG,YAAY;AAC1C,MAAIH,QAAQ,GAAGL,eAAe,CAACM,GAAhB,EAAf;AACA,SAAOD,QAAQ,GAAGA,QAAH,GAAcJ,YAA7B;AACD,CAHD;;AAKA,IAAIQ,eAAe,GAAG,UAAUxD,KAAV,EAAiB;AACrC,MAAIH,OAAO,GAAG,EAAd;;AACA,MAAIG,KAAK,KAAKyD,SAAd,EAAyB;AACvB5D,IAAAA,OAAO,CAACG,KAAR,GAAgBA,KAAhB;AACD;;AACD,SAAOuD,yBAAyB,GAAGG,YAA5B,CAAyC7D,OAAzC,CAAP;AACD,CAND,C,CAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAAS8D,OAAT,CAAiB9D,OAAjB,EAA0B+D,CAA1B,EAA6B;AAC3B,MAAI7B,UAAU,GAAG,IAAID,UAAJ,EAAjB;AACA,MAAI+B,gBAAgB,GAAGlB,iBAAiB,CAACU,GAAlB,EAAvB;AAEA,MAAIrD,KAAJ;;AACA,MAAI,OAAOH,OAAP,KAAmB,QAAnB,IAA+BA,OAAO,CAACG,KAA3C,EAAkD;AAChDA,IAAAA,KAAK,GAAGH,OAAO,CAACG,KAAhB;AACD;;AACD,MAAIoD,QAAQ,GAAGI,eAAe,CAACxD,KAAD,CAA9B;AAEA,QAAM8D,QAAQ,GAAG,CACff,eAAe,CAACgB,GAAhB,CAAoBX,QAApB,CADe,EAEfT,iBAAiB,CAACoB,GAAlB,CAAsBhC,UAAtB,CAFe,CAAjB;AAKA,MAAIK,GAAG,GAAG,IAAV;;AACA,MAAI,OAAOvC,OAAP,KAAmB,QAAvB,EAAiC;AAC/BuC,IAAAA,GAAG,GAAG,IAAIxC,GAAJ,CAAQC,OAAR,CAAN;AACAkC,IAAAA,UAAU,CAACC,IAAX,CAAgBzB,IAAhB,CAAqB6B,GAArB;AACD,GAHD,MAGO;AACLwB,IAAAA,CAAC,GAAG/D,OAAJ,CADK,CACQ;AACd;;AAEDiE,EAAAA,QAAQ,CAACvD,IAAT,CAAcsC,UAAU,CAACkB,GAAX,CAAe3B,GAAf,CAAd;AAEA,QAAM4B,YAAY,GAAGlB,mBAAmB,CAACO,GAApB,EAArB;AACAS,EAAAA,QAAQ,CAACvD,IAAT,CAAcuC,mBAAmB,CAACiB,GAApB,CAAwBC,YAAY,GAAG,CAAvC,CAAd;AAEA,MAAIC,KAAJ;;AACA,MAAIzE,UAAJ,EAAgB;AACdyE,IAAAA,KAAK,GAAGC,IAAI,CAACC,GAAL,EAAR;AACAC,IAAAA,OAAO,CAACC,GAAR,CACE7B,MAAM,CAACwB,YAAY,GAAG,CAAhB,CADR,EAEE,eAFF,EAGEA,YAHF,EAIEnE,OAAO,CAACG,KAJV,EAKE,WAAWsE,GAAG,GAAGL,KAAjB,CALF;AAOD;;AAED,MAAI;AACFL,IAAAA,CAAC;AACF,GAFD,SAEU;AACRR,IAAAA,QAAQ,CAACE,kBAAT;AAEAQ,IAAAA,QAAQ,CAACS,OAAT,CAAiBC,EAAE,IAAIA,EAAE,EAAzB;;AAEA,QAAIhF,UAAJ,EAAgB;AACd,UAAI8E,GAAG,GAAGJ,IAAI,CAACC,GAAL,EAAV;AACAC,MAAAA,OAAO,CAACC,GAAR,CACE7B,MAAM,CAACwB,YAAY,GAAG,CAAhB,CADR,EAEE,aAFF,EAGEA,YAHF,EAIEnE,OAAO,CAACG,KAJV,EAKE,WAAWsE,GAAG,GAAGL,KAAjB,CALF;AAOD;AACF;;AAED,SAAOlC,UAAP;AACD,C,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAAS0C,QAAT,CAAkB5E,OAAlB,EAA2B+D,CAA3B,EAA8B;AAC5B,MAAI,OAAO/D,OAAP,KAAmB,UAAvB,EAAmC;AACjC+D,IAAAA,CAAC,GAAG/D,OAAJ;AACAA,IAAAA,OAAO,GAAG,EAAV;AACD;;AAED,MAAI,OAAOA,OAAP,KAAmB,QAAvB,EAAiC;AAC/BA,IAAAA,OAAO,GAAG;AAACG,MAAAA,KAAK,EAAEH;AAAR,KAAV;AACD;;AAED,MAAIuD,QAAJ;AACA;AACE,QAAIsB,eAAe,GAAG,EAAtB,CADF,CAEE;;AACA,QAAI,OAAO7E,OAAP,KAAmB,QAAvB,EAAiC;AAC/B,UAAIA,OAAO,CAACG,KAAZ,EAAmB;AACjB0E,QAAAA,eAAe,CAAC1E,KAAhB,GAAwBH,OAAO,CAACG,KAAhC;AACD;;AACD,UAAIH,OAAO,CAAC8E,QAAZ,EAAsB;AACpBD,QAAAA,eAAe,CAACC,QAAhB,GAA2B9E,OAAO,CAAC8E,QAAnC;AACD;AACF;;AACDvB,IAAAA,QAAQ,GAAGG,yBAAyB,GAAGG,YAA5B,CAAyCgB,eAAzC,CAAX;AACD;AAED,QAAMZ,QAAQ,GAAG,CACff,eAAe,CAACgB,GAAhB,CAAoBX,QAApB,CADe,CAAjB;;AAIA,MAAI,CAACT,iBAAiB,CAACU,GAAlB,EAAL,EAA8B;AAC5B,QAAIW,YAAY,GAAGlB,mBAAmB,CAACO,GAApB,EAAnB;AACA,QAAIY,KAAJ;;AACA,QAAIzE,UAAJ,EAAgB;AACdyE,MAAAA,KAAK,GAAGC,IAAI,CAACC,GAAL,EAAR;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY7B,MAAM,CAACwB,YAAY,GAAG,CAAhB,CAAlB,EAAsC,OAAtC,EAA+CA,YAA/C,EAA6DnE,OAAO,CAACG,KAArE;AACD;;AAED8D,IAAAA,QAAQ,CAACvD,IAAT,CAAcuC,mBAAmB,CAACiB,GAApB,CAAwBC,YAAY,GAAG,CAAvC,CAAd;;AAEA,QAAI;AACF,aAAOJ,CAAC,EAAR;AACD,KAFD,SAEU;AACRR,MAAAA,QAAQ,CAACE,kBAAT;;AAEA,aAAOQ,QAAQ,CAACrD,MAAhB,EAAwB;AACtBqD,QAAAA,QAAQ,CAACc,GAAT;AACD;;AAED,UAAIpF,UAAJ,EAAgB;AACd,YAAI8E,GAAG,GAAGJ,IAAI,CAACC,GAAL,EAAV;AACAC,QAAAA,OAAO,CAACC,GAAR,CAAY7B,MAAM,CAACwB,YAAY,GAAG,CAAhB,CAAlB,EAAsC,MAAtC,EAA8CA,YAA9C,EAA4DnE,OAAO,CAACG,KAApE,EAA2E,WAAWsE,GAAG,GAAGL,KAAjB,CAA3E;AACD;AACF;AACF;;AAED,MAAI7B,GAAG,GAAG,IAAIxC,GAAJ,CAAQC,OAAR,CAAV;AACA,MAAIgF,WAAW,GAAGhC,UAAU,CAACQ,GAAX,EAAlB;AACAwB,EAAAA,WAAW,IAAIA,WAAW,CAAC3E,QAAZ,CAAqBK,IAArB,CAA0B6B,GAA1B,CAAf;AACAO,EAAAA,iBAAiB,CAACU,GAAlB,GAAwBrB,IAAxB,CAA6BzB,IAA7B,CAAkC6B,GAAlC;AAEA0B,EAAAA,QAAQ,CAACvD,IAAT,CAAcsC,UAAU,CAACkB,GAAX,CAAe3B,GAAf,CAAd;AAEA,MAAI4B,YAAY,GAAGlB,mBAAmB,CAACO,GAApB,EAAnB;AACAS,EAAAA,QAAQ,CAACvD,IAAT,CAAcuC,mBAAmB,CAACiB,GAApB,CAAwBC,YAAY,GAAG,CAAvC,CAAd;AAEA,MAAIC,KAAJ;;AACA,MAAIzE,UAAJ,EAAgB;AACdyE,IAAAA,KAAK,GAAGC,IAAI,CAACC,GAAL,EAAR;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY7B,MAAM,CAACwB,YAAY,GAAG,CAAhB,CAAlB,EAAsC,OAAtC,EAA+CA,YAA/C,EAA6DnE,OAAO,CAACG,KAArE;AACD;;AAED,MAAI;AACF,WAAO4D,CAAC,EAAR;AACD,GAFD,SAEU;AACRR,IAAAA,QAAQ,CAACE,kBAAT;;AAEA,WAAOQ,QAAQ,CAACrD,MAAhB,EAAwB;AACtBqD,MAAAA,QAAQ,CAACc,GAAT;AACD;;AAED,QAAIpF,UAAJ,EAAgB;AACd,UAAI8E,GAAG,GAAGJ,IAAI,CAACC,GAAL,EAAV;AACAC,MAAAA,OAAO,CAACC,GAAR,CACE7B,MAAM,CAACwB,YAAY,GAAG,CAAhB,CADR,EAEE,MAFF,EAGEA,YAHF,EAIEnE,OAAO,CAACG,KAJV,EAKE,WAAWsE,GAAG,GAAGL,KAAjB,CALF;AAOD;AACF;AACF,C,CAED;AACA;AACA;;;AACA,IAAIa,cAAc,GAAG,YAAY;AAC/B,MAAIC,MAAM,GAAG,UAAU3C,GAAV,EAAe;AAC1B,QAAIA,GAAG,CAAC5B,WAAJ,EAAJ,EAAuB;AACrB,aAAO,IAAP;AACD;;AACD,WAAO,CAAC,CAAEtB,CAAC,CAAC8F,IAAF,CAAO5C,GAAG,CAAClC,QAAX,EAAqB6E,MAArB,CAAV;AACD,GALD;;AAOA,SAAOlC,UAAU,CAACQ,GAAX,KAAmB0B,MAAM,CAAClC,UAAU,CAACQ,GAAX,EAAD,CAAzB,GAA8C,KAArD;AACD,CATD,C,CAWA;AACA;AACA;AACA;AACA;AACA;;;AACA,IAAI4B,YAAY,GAAG,UAAUrB,CAAV,EAAasB,OAAb,EAAsB;AACvC,SAAO7F,UAAU,CAAC8F,UAAX,CAAsBvB,CAAtB,EAAyBsB,OAAzB,CAAP;AACD,CAFD,C,CAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,IAAIE,KAAK,GAAG,UAAUvE,OAAV,EAAmBhB,OAAnB,EAA4B;AACtCA,EAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;;AAEA,MAAIA,OAAO,CAACwF,QAAZ,EAAsB;AACpBxE,IAAAA,OAAO,GAAGA,OAAO,CAACyE,KAAR,CAAc,CAAd,EAAgB,CAAhB,EAAmBC,WAAnB,KAAmC1E,OAAO,CAACyE,KAAR,CAAc,CAAd,CAA7C;AACD;;AAED,MAAI,CAAEzC,UAAU,CAACQ,GAAX,EAAN,EAAwB;AACtB,UAAM,IAAImC,KAAJ,CAAU,YAAY3E,OAAtB,CAAN;AACD;;AAED,MAAIhB,OAAO,CAAC4F,SAAR,IAAqBX,cAAc,EAAvC,EAA2C;AACzC;AACA;AACD;;AAED,MAAIY,IAAI,GAAGvF,MAAM,CAACC,MAAP,CAAc;AACvBS,IAAAA,OAAO,EAAEA;AADc,GAAd,EAERhB,OAFQ,CAAX;;AAIA,MAAI,iBAAiB6F,IAArB,EAA2B;AACzB,QAAIA,IAAI,CAACC,WAAT,EAAsB;AACpB,YAAM;AACJC,QAAAA,WADI;AAEJC,QAAAA;AAFI,UAGFxG,UAAU,CAACyG,KAAX,CAAiB,IAAIN,KAAJ,EAAjB,CAHJ,CADoB,CAMpB;;AACAE,MAAAA,IAAI,CAACnE,KAAL,GAAasE,YAAY,CAACE,MAAb,CAAoBH,WAAW,IAAI,EAAnC,EAAuCN,KAAvC,CAA6C,CAA7C,CAAb;;AACA,UAAI,OAAOI,IAAI,CAACC,WAAZ,KAA4B,QAAhC,EAA0C;AACxCD,QAAAA,IAAI,CAACnE,KAAL,GAAamE,IAAI,CAACnE,KAAL,CAAW+D,KAAX,CAAiBI,IAAI,CAACC,WAAtB,CAAb;AACD;;AACD,UAAIK,MAAM,GAAGN,IAAI,CAACnE,KAAL,CAAW,CAAX,CAAb;AACAmE,MAAAA,IAAI,CAAC/D,IAAL,GAAYqE,MAAM,CAACrE,IAAnB;AACA+D,MAAAA,IAAI,CAACjE,IAAL,GAAYuE,MAAM,CAACvE,IAAnB;AACAiE,MAAAA,IAAI,CAAClE,IAAL,GAAYwE,MAAM,CAACxE,IAAnB;AACAkE,MAAAA,IAAI,CAAChE,MAAL,GAAcsE,MAAM,CAACtE,MAArB;AACD;;AACD,WAAOgE,IAAI,CAACC,WAAZ;AACD;;AAED9C,EAAAA,UAAU,CAACQ,GAAX,GAAiB/C,UAAjB,CAA4BoF,IAA5B;AACD,CA1CD,C,CA4CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,IAAIO,SAAS,GAAG,UAAUb,KAAV,EAAiB;AAC/B,MAAI,CAAEvC,UAAU,CAACQ,GAAX,EAAN,EAAwB;AACtB;AACA;AACA,QAAI+B,KAAK,YAAYhG,KAAK,CAAC8G,gBAA3B,EAA6C;AAC3Cd,MAAAA,KAAK,GAAG,IAAII,KAAJ,CAAU,mBAAmBJ,KAAK,CAACvE,OAAzB,GAAmC,MAAnC,GAChBuE,KAAK,CAAC3D,IADU,GACH,GADG,GACG2D,KAAK,CAAC5D,IADT,GACgB,GADhB,GACsB4D,KAAK,CAAC1D,MADtC,CAAR;AAED;;AACD,UAAM0D,KAAN;AACD;;AAED,MAAIvE,OAAO,GAAGuE,KAAK,CAACvE,OAApB;;AAEA,MAAIuE,KAAK,YAAYhG,KAAK,CAAC8G,gBAA3B,EAA6C;AAC3C;AACA;AACArD,IAAAA,UAAU,CAACQ,GAAX,GAAiB/C,UAAjB,CAA4B;AAC1BO,MAAAA,OAAO,EAAEA,OADiB;AAE1BY,MAAAA,IAAI,EAAE2D,KAAK,CAAC3D,IAFc;AAG1BD,MAAAA,IAAI,EAAE4D,KAAK,CAAC5D,IAHc;AAI1BE,MAAAA,MAAM,EAAE0D,KAAK,CAAC1D;AAJY,KAA5B;AAMD,GATD,MASO;AACL,QAAIyE,MAAM,GAAG9G,UAAU,CAACyG,KAAX,CAAiBV,KAAjB,CAAb,CADK,CAGL;AACA;;AACA,QAAI7D,KAAK,GAAG4E,MAAM,CAACP,WAAP,IAAsBO,MAAM,CAACN,YAAzC;;AACA,QAAItE,KAAK,IAAIA,KAAK,CAACd,MAAN,GAAe,CAA5B,EAA+B;AAC7B,UAAI2F,KAAK,GAAG7E,KAAK,CAAC,CAAD,CAAjB;AACAsB,MAAAA,UAAU,CAACQ,GAAX,GAAiB/C,UAAjB,CAA4B;AAC1BO,QAAAA,OAAO,EAAEA,OADiB;AAE1BU,QAAAA,KAAK,EAAEA,KAFmB;AAG1BI,QAAAA,IAAI,EAAEyE,KAAK,CAACzE,IAHc;AAI1BF,QAAAA,IAAI,EAAE2E,KAAK,CAAC3E,IAJc;AAK1BD,QAAAA,IAAI,EAAE4E,KAAK,CAAC5E,IALc;AAM1BE,QAAAA,MAAM,EAAE0E,KAAK,CAAC1E;AANY,OAA5B;AAQD,KAVD,MAUO;AACLmB,MAAAA,UAAU,CAACQ,GAAX,GAAiB/C,UAAjB,CAA4B;AAC1BO,QAAAA,OAAO,EAAEA;AADiB,OAA5B;AAGD;AACF;AACF,CA5CD;;AA8CA,IAAIwF,WAAW,GAAG,YAAY;AAC5B,MAAI,CAAExD,UAAU,CAACQ,GAAX,EAAN,EAAwB;AACtB,UAAM,IAAImC,KAAJ,CAAU,sCAAV,CAAN;AACD;AACF,CAJD;;AAMA,IAAIc,eAAe,GAAG,YAAY;AAChC,MAAI,CAAE3D,iBAAiB,CAACU,GAAlB,EAAN,EAA+B;AAC7B,UAAM,IAAImC,KAAJ,CAAU,0CAAV,CAAN;AACD;AACF,CAJD;;AAMA,IAAIe,2BAA2B,GAAG,UAAUC,aAAV,EAAyB;AACzD,MAAIC,aAAa,GAAG9D,iBAAiB,CAACU,GAAlB,EAApB;;AACA,MAAI,CAAEoD,aAAN,EAAqB;AACnB,UAAM,IAAIjB,KAAJ,CAAU,0CAAV,CAAN;AACD;;AACD,MAAIkB,QAAQ,GAAG7D,UAAU,CAACQ,GAAX,EAAf;;AACA,MAAI,CAAEqD,QAAN,EAAgB;AACd,UAAM,IAAIlB,KAAJ,CAAU,sCAAV,CAAN;AACD;;AACDtG,EAAAA,CAAC,CAACoC,IAAF,CAAOkF,aAAa,CAACxE,IAArB,EAA2B,UAAUO,CAAV,EAAa;AACtCmE,IAAAA,QAAQ,CAACxG,QAAT,CAAkBK,IAAlB,CAAuBgC,CAAvB;AACD,GAFD;;AAGAkE,EAAAA,aAAa,CAACnE,KAAd,CAAoBkE,aAApB;AACD,CAbD,C,CAeA;;;AACA,IAAI7B,QAAQ,GAAG,UAAU9E,OAAV,EAAmB8G,QAAnB,EAA6BnC,EAA7B,EAAiC;AAC9C,MAAI,CAACtF,CAAC,CAAC0H,UAAF,CAAapC,EAAb,CAAL,EAAuB;AACrBA,IAAAA,EAAE,GAAGmC,QAAL;AACAA,IAAAA,QAAQ,GAAG9G,OAAX;AACAA,IAAAA,OAAO,GAAG,EAAV;AACD;;AAEDA,EAAAA,OAAO,CAAC8E,QAAR,GAAmB,IAAnB;;AAEA,WAASkC,aAAT,CAAuBhH,OAAvB,EAAgC;AAC9B,WAAO,IAAIiH,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCvC,MAAAA,QAAQ,CAAC5E,OAAD,EAAUoH,GAAG,IAAI;AACvBA,QAAAA,GAAG,GAAGD,MAAM,CAACC,GAAD,CAAT,GAAiBF,OAAO,EAA3B;AACD,OAFO,CAAR;AAGD,KAJM,CAAP;AAKD;;AAED,QAAMG,QAAQ,GAAIrH,OAAO,CAACqH,QAAR,KAAqBzD,SAAtB,GAAmC5D,OAAO,CAACqH,QAA3C,GAAsD,IAAvE;AAEA,SAAOL,aAAa,CAAChH,OAAD,CAAb,CAAuBsH,IAAvB,CAA4B,MAAM;AACvC,UAAMC,MAAM,GAAG,EAAf;;AACA,QAAIC,OAAO,GAAGnI,CAAC,CAACmD,GAAF,CAAMsE,QAAN,EAAgB,YAAa;AAAA,wCAATW,IAAS;AAATA,QAAAA,IAAS;AAAA;;AACzC,YAAMC,OAAO,GAAGV,aAAa,CAAC;AAC5B7G,QAAAA,KAAK,EAAE,CAACH,OAAO,CAACG,KAAR,IAAiB,EAAlB,IAAwB;AADH,OAAD,CAAb,CAEbmH,IAFa,CAER,MAAM3C,EAAE,CAAC,GAAG8C,IAAJ,CAFA,EAGd;AACA;AAJc,OAKbE,KALa,CAKPpC,KAAK,KAAKgC,MAAM,CAAC7G,IAAP,CAAY6E,KAAZ,GAAoB,IAAzB,CALE,CAAhB;;AAOA,UAAI8B,QAAJ,EAAc;AACZ;AACA;AACA;AACA,eAAOK,OAAP;AACD,OAbwC,CAezC;AACA;;;AACA,aAAOA,OAAO,CAACE,KAAR,EAAP;AACD,KAlBa,CAAd;;AAoBA,QAAIP,QAAJ,EAAc;AACZ;AACA;AACAG,MAAAA,OAAO,GAAGP,OAAO,CAACY,GAAR,CAAYL,OAAZ,EAAqBI,KAArB,EAAV;AACD;;AAED,QAAIL,MAAM,CAAC3G,MAAP,GAAgB,CAApB,EAAuB;AACrB;AACA;AACA;AACA;AACA,YAAM2G,MAAM,CAAC,CAAD,CAAZ;AACD;;AAED,WAAOC,OAAP;AACD,GArCM,EAqCJI,KArCI,EAAP;AAsCD,CAzDD;;AA4DA,IAAIE,YAAY,GAAGC,OAAnB;AACAzH,MAAM,CAACC,MAAP,CAAcwH,OAAd,EAAuB;AACrBjE,EAAAA,OAAO,EAAEA,OADY;AAErBc,EAAAA,QAAQ,EAAEA,QAFW;AAGrBQ,EAAAA,YAAY,EAAEA,YAHO;AAIrBG,EAAAA,KAAK,EAAEA,KAJc;AAKrBa,EAAAA,SAAS,EAAEA,SALU;AAMrBnB,EAAAA,cAAc,EAAEA,cANK;AAOrBuB,EAAAA,WAAW,EAAEA,WAPQ;AAQrBC,EAAAA,eAAe,EAAEA,eARI;AASrBC,EAAAA,2BAA2B,EAAEA,2BATR;AAUrB5B,EAAAA,QAAQ,EAAEA,QAVW;AAWrB1B,EAAAA,eAAe,EAAEA,eAXI;AAYrBC,EAAAA,cAAc,EAAEA,cAZK;AAarBI,EAAAA,kBAAkB,EAAEA,kBAbC;AAcrBC,EAAAA,yBAAyB,EAAEA,yBAdN;AAerBC,EAAAA,eAAe,EAAEA,eAfI;AAgBrBqE,EAAAA,WAAW,EAAE/F;AAhBQ,CAAvB","sourcesContent":["var _ = require('underscore');\nvar files = require('../fs/files');\nvar parseStack = require('./parse-stack');\nvar fiberHelpers = require('./fiber-helpers.js');\nvar Progress = require('../console/progress').Progress;\n\nvar debugBuild = !!process.env.METEOR_DEBUG_BUILD;\n\n// A job is something like \"building package foo\". It contains the set\n// of messages generated by tha job. A given build run could contain\n// several jobs. Each job has an (absolute) path associated with\n// it. Filenames in messages within a job are to be interpreted\n// relative to that path.\n//\n// Jobs are used both for error handling (via buildmessage.capture) and to set\n// the progress bar title (via progress.ts).\n//\n// Job titles should begin with a lower-case letter (unless they begin with a\n// proper noun), so that they look correct in error messages which say \"While\n// jobbing the job\".  The first letter will be capitalized automatically for the\n// progress bar.\nvar Job = function (options) {\n  var self = this;\n  self.messages = [];\n\n  // Should be something like \"building package 'foo'\"\n  // Should look good in \"While $title:\\n[messages]\"\n  self.title = options.title;\n  self.rootPath = options.rootPath;\n\n  // Array of Job (jobs created inside this job)\n  self.children = [];\n};\n\nObject.assign(Job.prototype, {\n  // options may include type (\"error\"), message, func, file, line,\n  // column, stack (in the format returned by parseStack.parse())\n  addMessage: function (options) {\n    var self = this;\n    self.messages.push(options);\n  },\n\n  hasMessages: function () {\n    var self = this;\n    return self.messages.length > 0;\n  },\n\n  hasMessageWithTag: function (tagName) {\n    var self = this;\n    return _.any(self.messages, function (message) {\n      return message.tags && _.has(message.tags, tagName);\n    });\n  },\n\n  // Returns a multi-line string suitable for displaying to the user\n  formatMessages: function (indent) {\n    var self = this;\n    var out = \"\";\n    var already = {};\n    indent = new Array((indent || 0) + 1).join(' ');\n\n    _.each(self.messages, function (message) {\n      var stack = message.stack || [];\n\n      var line = indent;\n      if (message.file) {\n        line+= message.file;\n        if (message.line) {\n          line += \":\" + message.line;\n          if (message.column) {\n            // XXX maybe exclude unless specifically requested (eg,\n            // for an automated tool that's parsing our output?)\n            line += \":\" + message.column;\n          }\n        }\n        line += \": \";\n      } else {\n        // not sure how to display messages without a filenanme.. try this?\n        line += \"error: \";\n      }\n      // XXX line wrapping would be nice..\n      line += message.message;\n      if (message.func && stack.length <= 1) {\n        line += \" (at \" + message.func + \")\";\n      }\n      line += \"\\n\";\n\n      if (stack.length > 1) {\n        _.each(stack, function (frame) {\n          // If a nontrivial stack trace (more than just the file and line\n          // we already complained about), print it.\n          var where = \"\";\n          if (frame.file) {\n            where += frame.file;\n            if (frame.line) {\n              where += \":\" + frame.line;\n              if (frame.column) {\n                where += \":\" + frame.column;\n              }\n            }\n          }\n\n          if (! frame.func && ! where) {\n            // that's a pretty lame stack frame\n            return;\n          }\n\n          line += \"  at \";\n          if (frame.func) {\n            line += frame.func + \" (\" + where + \")\\n\";\n          } else {\n            line += where + \"\\n\";\n          }\n        });\n        line += \"\\n\";\n      }\n\n      // Deduplicate messages (only when exact duplicates, including stack)\n      if (! (line in already)) {\n        out += line;\n        already[line] = true;\n      }\n    });\n\n    return out;\n  }\n\n});\n\n// A MessageSet contains a set of jobs, which in turn each contain a\n// set of messages.\nvar MessageSet = function (messageSet) {\n  var self = this;\n  self.jobs = [];\n\n  if (messageSet) {\n    self.jobs = _.clone(messageSet.jobs);\n  }\n};\n\nObject.assign(MessageSet.prototype, {\n  formatMessages: function () {\n    var self = this;\n\n    var jobsWithMessages = _.filter(self.jobs, function (job) {\n      return job.hasMessages();\n    });\n\n    return _.map(jobsWithMessages, function (job) {\n      var out = '';\n      out += \"While \" + job.title + \":\\n\";\n      out += job.formatMessages(0);\n      return out;\n    }).join('\\n'); // blank line between jobs\n  },\n\n  hasMessages: function () {\n    var self = this;\n    return _.any(self.jobs, function (job) {\n      return job.hasMessages();\n    });\n  },\n\n  hasMessageWithTag: function (tagName) {\n    var self = this;\n    return _.any(self.jobs, function (job) {\n      return job.hasMessageWithTag(tagName);\n    });\n  },\n\n  // Copy all of the messages in another MessageSet into this\n  // MessageSet. If the other MessageSet is subsequently mutated,\n  // results are undefined.\n  //\n  // XXX rather than this, the user should be able to create a\n  // MessageSet and pass it into capture(), and functions such as\n  // bundle() should take and mutate, rather than return, a\n  // MessageSet.\n  merge: function (messageSet) {\n    var self = this;\n    _.each(messageSet.jobs, function (j) {\n      self.jobs.push(j);\n    });\n  }\n});\n\nvar spaces = function (n) {\n  return _.times(n, function() { return ' ' }).join('');\n};\n\n// XXX: This is now a little bit silly... ideas:\n// Can we just have one hierarchical state?\n// Can we combined job & messageSet\n// Can we infer nesting level?\nvar currentMessageSet = new fiberHelpers.EnvironmentVariable;\nvar currentJob = new fiberHelpers.EnvironmentVariable;\nvar currentNestingLevel = new fiberHelpers.EnvironmentVariable(0);\nvar currentProgress = new fiberHelpers.EnvironmentVariable;\n\nvar rootProgress = new Progress();\n\nvar getRootProgress = function () {\n  return rootProgress;\n};\n\nvar reportProgress = function (state) {\n  var progress = currentProgress.get();\n  if (progress) {\n    progress.reportProgress(state);\n  }\n};\n\nvar reportProgressDone = function () {\n  var progress = currentProgress.get();\n  if (progress) {\n    progress.reportProgressDone();\n  }\n};\n\nvar getCurrentProgressTracker = function () {\n  var progress = currentProgress.get();\n  return progress ? progress : rootProgress;\n};\n\nvar addChildTracker = function (title) {\n  var options = {};\n  if (title !== undefined) {\n    options.title = title;\n  }\n  return getCurrentProgressTracker().addChildTask(options);\n};\n\n// Create a new MessageSet, run `f` with that as the current\n// MessageSet for the purpose of accumulating and recovering from\n// errors (see error()), and then discard the return value of `f` and\n// return the MessageSet.\n//\n// Note that you must also create a job (with enterJob) to actually\n// begin capturing errors. Alternately you may pass `options`\n// (otherwise optional) and a job will be created for you based on\n// `options`.\nfunction capture(options, f) {\n  var messageSet = new MessageSet;\n  var parentMessageSet = currentMessageSet.get();\n\n  var title;\n  if (typeof options === \"object\" && options.title) {\n    title = options.title;\n  }\n  var progress = addChildTracker(title);\n\n  const resetFns = [\n    currentProgress.set(progress),\n    currentMessageSet.set(messageSet),\n  ];\n\n  let job = null;\n  if (typeof options === \"object\") {\n    job = new Job(options);\n    messageSet.jobs.push(job);\n  } else {\n    f = options; // options not actually provided\n  }\n\n  resetFns.push(currentJob.set(job));\n\n  const nestingLevel = currentNestingLevel.get();\n  resetFns.push(currentNestingLevel.set(nestingLevel + 1));\n\n  var start;\n  if (debugBuild) {\n    start = Date.now();\n    console.log(\n      spaces(nestingLevel * 2),\n      \"START CAPTURE\",\n      nestingLevel,\n      options.title,\n      \"took \" + (end - start),\n    );\n  }\n\n  try {\n    f();\n  } finally {\n    progress.reportProgressDone();\n\n    resetFns.forEach(fn => fn());\n\n    if (debugBuild) {\n      var end = Date.now();\n      console.log(\n        spaces(nestingLevel * 2),\n        \"END CAPTURE\",\n        nestingLevel,\n        options.title,\n        \"took \" + (end - start),\n      );\n    }\n  }\n\n  return messageSet;\n}\n\n// Called from inside capture(), creates a new Job inside the current\n// MessageSet and run `f` inside of it, so that any messages emitted\n// by `f` are logged in the Job. Returns the return value of `f`. May\n// be called recursively.\n//\n// Called not from inside capture(), does nothing (except call f).\n//\n// options:\n// - title: a title for the job (required)\n// - rootPath: the absolute path relative to which paths in messages\n//   in this job should be interpreted (omit if there is no way to map\n//   files that this job talks about back to files on disk)\nfunction enterJob(options, f) {\n  if (typeof options === \"function\") {\n    f = options;\n    options = {};\n  }\n\n  if (typeof options === \"string\") {\n    options = {title: options};\n  }\n\n  var progress;\n  {\n    var progressOptions = {};\n    // XXX: Just pass all the options?\n    if (typeof options === \"object\") {\n      if (options.title) {\n        progressOptions.title = options.title;\n      }\n      if (options.forkJoin) {\n        progressOptions.forkJoin = options.forkJoin;\n      }\n    }\n    progress = getCurrentProgressTracker().addChildTask(progressOptions);\n  }\n\n  const resetFns = [\n    currentProgress.set(progress),\n  ];\n\n  if (!currentMessageSet.get()) {\n    var nestingLevel = currentNestingLevel.get();\n    var start;\n    if (debugBuild) {\n      start = Date.now();\n      console.log(spaces(nestingLevel * 2), \"START\", nestingLevel, options.title);\n    }\n\n    resetFns.push(currentNestingLevel.set(nestingLevel + 1));\n\n    try {\n      return f();\n    } finally {\n      progress.reportProgressDone();\n\n      while (resetFns.length) {\n        resetFns.pop()();\n      }\n\n      if (debugBuild) {\n        var end = Date.now();\n        console.log(spaces(nestingLevel * 2), \"DONE\", nestingLevel, options.title, \"took \" + (end - start));\n      }\n    }\n  }\n\n  var job = new Job(options);\n  var originalJob = currentJob.get();\n  originalJob && originalJob.children.push(job);\n  currentMessageSet.get().jobs.push(job);\n\n  resetFns.push(currentJob.set(job));\n\n  var nestingLevel = currentNestingLevel.get();\n  resetFns.push(currentNestingLevel.set(nestingLevel + 1));\n\n  var start;\n  if (debugBuild) {\n    start = Date.now();\n    console.log(spaces(nestingLevel * 2), \"START\", nestingLevel, options.title);\n  }\n\n  try {\n    return f();\n  } finally {\n    progress.reportProgressDone();\n\n    while (resetFns.length) {\n      resetFns.pop()();\n    }\n\n    if (debugBuild) {\n      var end = Date.now();\n      console.log(\n        spaces(nestingLevel * 2),\n        \"DONE\",\n        nestingLevel,\n        options.title,\n        \"took \" + (end - start),\n      );\n    }\n  }\n}\n\n// If not inside a job, return false. Otherwise, return true if any\n// messages (presumably errors) have been recorded for this job\n// (including subjobs created inside this job), else false.\nvar jobHasMessages = function () {\n  var search = function (job) {\n    if (job.hasMessages()) {\n      return true;\n    }\n    return !! _.find(job.children, search);\n  };\n\n  return currentJob.get() ? search(currentJob.get()) : false;\n};\n\n// Given a function f, return a \"marked\" version of f. The mark\n// indicates that stack traces should stop just above f. So if you\n// mark a user-supplied callback function before calling it, you'll be\n// able to show the user just the \"user portion\" of the stack trace\n// (the part inside their own code, and not all of the innards of the\n// code that called it).\nvar markBoundary = function (f, context) {\n  return parseStack.markBottom(f, context);\n};\n\n// Record a build error. If inside a job, add the error to the current\n// job and return (caller should do its best to recover and\n// continue). Otherwise, throws an exception based on the error.\n//\n// options may include\n// - file: the file containing the error, relative to the root of the build\n//   (this must be agreed upon out of band)\n// - line: the (1-indexed) line in the file that contains the error\n// - column: the (1-indexed) column in that line where the error begins\n// - func: the function containing the code that triggered the error\n// - useMyCaller: true to capture information the caller (function\n//   name, file, and line). It captures not the information of the\n//   caller of error(), but that caller's caller. It saves them in\n//   'file', 'line', and 'column' (overwriting any values passed in\n//   for those). It also captures the user portion of the stack,\n//   starting at and including the caller's caller.\n//   If this is a number instead of 'true', skips that many stack frames.\n// - downcase: if true, the first character of `message` will be\n//   converted to lower case.\n// - secondary: ignore this error if there are are already other\n//   errors in this job (the implication is that it's probably\n//   downstream of the other error, ie, a consequence of our attempt\n//   to continue past other errors)\n// - tags: object with other error-specific data; there is a method\n//   on MessageSet which can search for errors with a specific named\n//   tag.\nvar error = function (message, options) {\n  options = options || {};\n\n  if (options.downcase) {\n    message = message.slice(0,1).toLowerCase() + message.slice(1);\n  }\n\n  if (! currentJob.get()) {\n    throw new Error(\"Error: \" + message);\n  }\n\n  if (options.secondary && jobHasMessages()) {\n    // skip it\n    return;\n  }\n\n  var info = Object.assign({\n    message: message\n  }, options);\n\n  if ('useMyCaller' in info) {\n    if (info.useMyCaller) {\n      const {\n        insideFiber,\n        outsideFiber\n      } = parseStack.parse(new Error());\n\n      // Concatenate and get rid of lines about Future and buildmessage\n      info.stack = outsideFiber.concat(insideFiber || []).slice(2);\n      if (typeof info.useMyCaller === 'number') {\n        info.stack = info.stack.slice(info.useMyCaller);\n      }\n      var caller = info.stack[0];\n      info.func = caller.func;\n      info.file = caller.file;\n      info.line = caller.line;\n      info.column = caller.column;\n    }\n    delete info.useMyCaller;\n  }\n\n  currentJob.get().addMessage(info);\n};\n\n// Record an exception. The message as well as any file and line\n// information be read directly out of the exception. If not in a job,\n// throws the exception instead. Also capture the user portion of the stack.\n//\n// There is special handling for files.FancySyntaxError exceptions. We\n// will grab the file and location information where the syntax error\n// actually occurred, rather than the place where the exception was\n// thrown.\nvar exception = function (error) {\n  if (! currentJob.get()) {\n    // XXX this may be the wrong place to do this, but it makes syntax errors in\n    // files loaded via isopack.load have context.\n    if (error instanceof files.FancySyntaxError) {\n      error = new Error(\"Syntax error: \" + error.message + \" at \" +\n        error.file + \":\" + error.line + \":\" + error.column);\n    }\n    throw error;\n  }\n\n  var message = error.message;\n\n  if (error instanceof files.FancySyntaxError) {\n    // No stack, because FancySyntaxError isn't a real Error and has no stack\n    // property!\n    currentJob.get().addMessage({\n      message: message,\n      file: error.file,\n      line: error.line,\n      column: error.column\n    });\n  } else {\n    var parsed = parseStack.parse(error);\n\n    // If there is a part inside the fiber, that's the one we want. Otherwise,\n    // use the one outside.\n    var stack = parsed.insideFiber || parsed.outsideFiber;\n    if (stack && stack.length > 0) {\n      var locus = stack[0];\n      currentJob.get().addMessage({\n        message: message,\n        stack: stack,\n        func: locus.func,\n        file: locus.file,\n        line: locus.line,\n        column: locus.column\n      });\n    } else {\n      currentJob.get().addMessage({\n        message: message\n      });\n    }\n  }\n};\n\nvar assertInJob = function () {\n  if (! currentJob.get()) {\n    throw new Error(\"Expected to be in a buildmessage job\");\n  }\n};\n\nvar assertInCapture = function () {\n  if (! currentMessageSet.get()) {\n    throw new Error(\"Expected to be in a buildmessage capture\");\n  }\n};\n\nvar mergeMessagesIntoCurrentJob = function (innerMessages) {\n  var outerMessages = currentMessageSet.get();\n  if (! outerMessages) {\n    throw new Error(\"Expected to be in a buildmessage capture\");\n  }\n  var outerJob = currentJob.get();\n  if (! outerJob) {\n    throw new Error(\"Expected to be in a buildmessage job\");\n  }\n  _.each(innerMessages.jobs, function (j) {\n    outerJob.children.push(j);\n  });\n  outerMessages.merge(innerMessages);\n};\n\n// Like _.each, but runs each operation in a separate job\nvar forkJoin = function (options, iterable, fn) {\n  if (!_.isFunction(fn)) {\n    fn = iterable;\n    iterable = options;\n    options = {};\n  }\n\n  options.forkJoin = true;\n\n  function enterJobAsync(options) {\n    return new Promise((resolve, reject) => {\n      enterJob(options, err => {\n        err ? reject(err) : resolve();\n      });\n    });\n  }\n\n  const parallel = (options.parallel !== undefined) ? options.parallel : true;\n\n  return enterJobAsync(options).then(() => {\n    const errors = [];\n    let results = _.map(iterable, (...args) => {\n      const promise = enterJobAsync({\n        title: (options.title || \"\") + \" child\"\n      }).then(() => fn(...args))\n        // Collect any errors thrown (and later re-throw the first one),\n        // but don't stop processing remaining jobs.\n        .catch(error => (errors.push(error), null));\n\n      if (parallel) {\n        // If the jobs are intended to run in parallel, return each\n        // promise without awaiting it, so that Promise.all can wait for\n        // them all to be fulfilled.\n        return promise;\n      }\n\n      // By awaiting the promise during each iteration, we effectively\n      // serialize the execution of the jobs.\n      return promise.await();\n    });\n\n    if (parallel) {\n      // If the jobs ran in parallel, then results is an array of Promise\n      // objects that still need to be resolved.\n      results = Promise.all(results).await();\n    }\n\n    if (errors.length > 0) {\n      // If any errors were thrown, re-throw the first one. Note that this\n      // allows jobs to complete successfully (and have whatever\n      // side-effects they should have) after the first error is thrown,\n      // though the final results will not be returned below.\n      throw errors[0];\n    }\n\n    return results;\n  }).await();\n};\n\n\nvar buildmessage = exports;\nObject.assign(exports, {\n  capture: capture,\n  enterJob: enterJob,\n  markBoundary: markBoundary,\n  error: error,\n  exception: exception,\n  jobHasMessages: jobHasMessages,\n  assertInJob: assertInJob,\n  assertInCapture: assertInCapture,\n  mergeMessagesIntoCurrentJob: mergeMessagesIntoCurrentJob,\n  forkJoin: forkJoin,\n  getRootProgress: getRootProgress,\n  reportProgress: reportProgress,\n  reportProgressDone: reportProgressDone,\n  getCurrentProgressTracker: getCurrentProgressTracker,\n  addChildTracker: addChildTracker,\n  _MessageSet: MessageSet\n});\n"],"file":"tools/utils/buildmessage.js.map"}