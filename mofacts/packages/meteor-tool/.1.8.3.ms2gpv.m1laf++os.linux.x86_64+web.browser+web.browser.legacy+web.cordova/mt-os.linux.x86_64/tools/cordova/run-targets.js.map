{"version":3,"sources":["/tools/cordova/run-targets.js"],"names":["module","export","CordovaRunTarget","iOSRunTarget","AndroidRunTarget","_","link","default","v","chalk","child_process","loadIsopackage","runLog","Console","files","execFileSync","execFileAsync","title","displayName","constructor","isDevice","platform","start","cordovaProject","openXcodeProject","pathJoin","projectRoot","run","undefined","projectDir","projectFilename","readdir","filter","entry","match","printFailure","convertToOSPath","info","green","url","error","message","target","tailLogs","done","checkPlatformRequirementsAndSetEnv","check_reqs_path","check_reqs","require","Promise","all","check_java","check_android","then","check_android_target","transform","runCommands","logLevel","verbose","filterExpressions","Log","logStream","line","logEntry","logFromAndroidLogcatLine","pipe","process","stdout","destination","priority","tag","pid","filename","lineNumber","logFromConsoleOutput","format","objFromText","metaColor","color","isDebugOutput","replace","time","Date","level","file","program","test"],"mappings":"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","sourcesContent":["import _ from 'underscore';\nimport chalk from 'chalk';\nimport child_process from 'child_process';\n\nimport { loadIsopackage } from '../tool-env/isopackets.js';\nimport runLog from '../runners/run-log.js';\nimport { Console } from '../console/console.js';\nimport files from '../fs/files';\nimport { execFileSync, execFileAsync } from '../utils/processes';\n\nexport class CordovaRunTarget {\n  get title() {\n    return `app on ${this.displayName}`;\n  }\n}\n\nexport class iOSRunTarget extends CordovaRunTarget {\n  constructor(isDevice) {\n    super();\n    this.platform = 'ios';\n    this.isDevice = isDevice;\n  }\n\n  get displayName() {\n    return this.isDevice ? \"iOS Device\" : \"iOS Simulator\";\n  }\n\n  async start(cordovaProject) {\n    // ios-deploy is super buggy, so we just open Xcode and let the user\n    // start the app themselves.\n    if (this.isDevice) {\n      openXcodeProject(files.pathJoin(cordovaProject.projectRoot,\n        'platforms', 'ios'));\n    } else {\n      await cordovaProject.run(this.platform, this.isDevice, undefined);\n\n      // Bring iOS Simulator to front (it is called Simulator in Xcode 7)\n      execFileAsync('osascript', ['-e',\n`tell application \"System Events\"\n  set possibleSimulatorNames to {\"iOS Simulator\", \"Simulator\"}\n  repeat with possibleSimulatorName in possibleSimulatorNames\n    if application process possibleSimulatorName exists then\n      set frontmost of process possibleSimulatorName to true\n    end if\n  end repeat\nend tell`]);\n    }\n  }\n}\n\nfunction openXcodeProject(projectDir) {\n  const projectFilename =  files.readdir(projectDir).filter((entry) =>\n    { return entry.match(/\\.xcodeproj$/i) })[0];\n\n  if (!projectFilename) {\n    printFailure(`Couldn't find your Xcode project in directory \\\n'${files.convertToOSPath(projectDir)}'`);\n    return;\n  }\n\n\n  try {\n    execFileSync('open', ['-a', 'Xcode', projectDir]);\n\n    Console.info();\n    Console.info(\n      chalk.green(\n        \"Your project has been opened in Xcode so that you can run your \" +\n        \"app on an iOS device. For further instructions, visit this \" +\n        \"wiki page: \") +\n      Console.url(\n        \"https://guide.meteor.com/mobile.html#running-on-ios\"\n    ));\n    Console.info();\n  } catch (error) {\n    printFailure(`Failed to open your project in Xcode:\n${error.message}`);\n  }\n\n  function printFailure(message) {\n    Console.error();\n    Console.error(message);\n    Console.error(\n      chalk.green(\"Instructions for running your app on an iOS device: \") +\n      Console.url(\"https://guide.meteor.com/mobile.html#running-on-ios\")\n    );\n    Console.error();\n  }\n}\n\nexport class AndroidRunTarget extends CordovaRunTarget {\n  constructor(isDevice) {\n    super();\n    this.platform = 'android';\n    this.isDevice = isDevice;\n  }\n\n  get displayName() {\n    return this.isDevice ? \"Android Device\" : \"Android Emulator\";\n  }\n\n  async start(cordovaProject) {\n    // XXX This only works if we have at most one device or one emulator\n    // connected. We should find a way to get the target ID from run and use\n    // it instead of -d or -e.\n    let target = this.isDevice ? \"-d\" : \"-e\";\n\n    // Clear logs\n    execFileAsync('adb', [target, 'logcat', '-c']);\n\n    await cordovaProject.run(this.platform, this.isDevice);\n\n    this.tailLogs(cordovaProject, target).done();\n  }\n\n  async checkPlatformRequirementsAndSetEnv(cordovaProject) {\n    // Cordova Android is fairly good at applying various heuristics to find\n    // suitable values for JAVA_HOME and ANDROID_HOME, and to augment the PATH\n    // with those variables.\n    // Unfortunately, this is intertwined with checking requirements, so the\n    // only way to get access to this functionality is to run check_reqs and\n    // let it modify process.env\n    var check_reqs_path = files.pathJoin(\n      cordovaProject.projectRoot, 'platforms', this.platform,\n      'cordova', 'lib', 'check_reqs');\n    check_reqs_path = files.convertToOSPath(check_reqs_path);\n    let check_reqs = require(check_reqs_path);\n    // We can't use check_reqs.run() because that will print the values of\n    // JAVA_HOME and ANDROID_HOME to stdout.\n    await Promise.all([check_reqs.check_java(),\n      check_reqs.check_android().then(check_reqs.check_android_target)]);\n  }\n\n  async tailLogs(cordovaProject, target) {\n    const { transform } = require(\"../utils/eachline\");\n\n    cordovaProject.runCommands(`tailing logs for ${this.displayName}`, async () => {\n      await this.checkPlatformRequirementsAndSetEnv(cordovaProject);\n\n      const logLevel = Console.verbose ? \"V\" : \"I\";\n\n      const filterExpressions = [`MeteorWebApp:${logLevel}`,\n        `CordovaLog:${logLevel}`, `chromium:${logLevel}`,\n        `SystemWebViewClient:${logLevel}`, '*:F'];\n\n      const { Log } = loadIsopackage('logging');\n\n      const logStream = transform(line => {\n        const logEntry = logFromAndroidLogcatLine(Log, line);\n        if (logEntry) {\n          return `${logEntry}\\n`;\n        }\n      });\n      logStream.pipe(process.stdout);\n\n      // Asynchronously start tailing logs to stdout\n      execFileAsync('adb', [target, 'logcat',\n        ...filterExpressions],\n        { destination: logStream });\n    });\n  }\n}\n\nfunction logFromAndroidLogcatLine(Log, line) {\n  // Ignore lines indicating beginning of logging\n  if (line.match(/^--------- beginning of /)) {\n    return null;\n  }\n\n  // Matches logcat brief format\n  // \"I/Tag(  PID): message\"\n  let match =\n    line.match(/^([A-Z])\\/([^\\(]*?)\\(\\s*(\\d+)\\): (.*)$/);\n    let priority, tag, pid, message, logLevel, filename, lineNumber;\n\n  if (match) {\n    [, priority, tag, pid, message] = match;\n\n    if (tag === 'chromium') {\n      // Matches Chromium log format\n      // [INFO:CONSOLE(23)] \"Bla!\", source: http://meteor.local/app/mobileapp.js (23)\n      match = message.match(/^\\[(.*):(.*)\\((\\d+)\\)\\] (.*)$/);\n\n      if (match) {\n        [, logLevel, filename, lineNumber, message] = match;\n\n        if (filename === 'CONSOLE') {\n          match = message.match(/^\\\"(.*)\\\", source: (.*) \\((\\d+)\\)$/);\n\n          if (match) {\n            [, message, filename, lineNumber] = match;\n            return logFromConsoleOutput(Log, message, filename, lineNumber);\n          }\n        }\n      }\n    } else if (tag === 'CordovaLog') {\n      // http://meteor.local/mobileappold.js?3c198a97a802ad2c6eab52da0244245e30b964ed: Line 15 : Clicked!\n\n      match = message.match(/^(.*): Line (\\d+) : (.*)$/);\n\n      if (match) {\n        [, filename, lineNumber, message] = match;\n        return logFromConsoleOutput(Log, message, filename, lineNumber);\n      }\n    }\n  }\n\n  return Log.format(Log.objFromText(line), { metaColor: 'green', color: true });\n};\n\nfunction logFromConsoleOutput(Log, message, filename, lineNumber) {\n  if (isDebugOutput(message) && !Console.verbose) {\n    return null;\n  }\n\n  filename = filename.replace(/\\?.*$/, '');\n\n  return Log.format({\n    time: new Date,\n    level: 'info',\n    file: filename,\n    line: lineNumber,\n    message: message,\n    program: 'android'\n  }, {\n    metaColor: 'green',\n    color: true\n  });\n}\n\nfunction isDebugOutput(message) {\n  // Skip the debug output produced by Meteor components.\n  return /^METEOR CORDOVA DEBUG /.test(message) ||\n    /^HTTPD DEBUG /.test(message);\n};\n"],"file":"tools/cordova/run-targets.js.map"}