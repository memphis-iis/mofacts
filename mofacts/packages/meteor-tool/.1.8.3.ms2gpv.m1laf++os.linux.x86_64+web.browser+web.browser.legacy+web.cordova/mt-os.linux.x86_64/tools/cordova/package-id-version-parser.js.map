{"version":3,"sources":["/tools/cordova/package-id-version-parser.js"],"names":["exports","parse","packageIdAndVersion","packageDetails","_matchText","scope","packageName","version","match","id"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACAA,OAAO,CAACC,KAAR,GAAgBC,mBAAmB,IAAI;AACrC,QAAMC,cAAc,GAAG,EAAvB;;AACA,MAAID,mBAAJ,EAAyB;AACvB,UAAM,CACJE,UADI,EAEJC,KAFI,EAGJC,WAHI,EAIJC,OAJI,IAKFL,mBAAmB,CAACM,KAApB,CACF,mCADE,CALJ;AAQAL,IAAAA,cAAc,CAACM,EAAf,GAAoB,CAACJ,KAAK,cAAOA,KAAP,SAAkB,EAAxB,IAA8BC,WAAlD;AACAH,IAAAA,cAAc,CAACI,OAAf,GAAyBA,OAAO,GAAGA,OAAH,GAAa,IAA7C;AACD;;AACD,SAAOJ,cAAP;AACD,CAfD","sourcesContent":["// Accepts a combined Cordova package ID + version string, then parses out\n// and returns the ID and version in a package details object.\n//\n// Example `packageIdAndVersion` formats:\n// some-cordova-plugin@1.0.0\n// @somescope/some-cordova-plugin@1.0.0\nexports.parse = packageIdAndVersion => {\n  const packageDetails = {};\n  if (packageIdAndVersion) {\n    const [\n      _matchText,\n      scope,\n      packageName,\n      version,\n    ] = packageIdAndVersion.match(\n      /^(?:@([^\\/]+)\\/)?([^\\/@]+)@?(.+)?/\n    );\n    packageDetails.id = (scope ? `@${scope}/` : '') + packageName;\n    packageDetails.version = version ? version : null;\n  }\n  return packageDetails;\n};\n"],"file":"tools/cordova/package-id-version-parser.js.map"}