{"version":3,"sources":["/tools/cordova/project.js"],"names":["_objectSpread","module","link","default","v","export","CordovaProject","_","util","assert","chalk","semver","files","utils","Console","Profile","buildmessage","main","httpHelpers","execFileSync","execFileAsync","cordova_lib","cordova_events","CordovaError","cordova","events","cordova_util","superspawn","PluginInfoProvider","CORDOVA_PLATFORMS","CORDOVA_PLATFORM_VERSIONS","displayNameForPlatform","displayNamesForPlatforms","newPluginId","convertPluginVersions","convertToGitUrl","CordovaBuilder","on","logIfVerbose","log","verbose","args","rawInfo","format","apply","pinnedPlatformVersions","pinnedPluginVersions","constructor","projectContext","options","projectRoot","getProjectLocalDirectory","pluginsDir","pathJoin","buildJsonPath","convertToOSPath","createIfNeeded","assertInJob","exists","installedPlatforms","listInstalledPlatforms","outdated","some","pinnedVersion","platform","contains","installedVersion","installedVersionForPlatform","valid","lt","debug","rm_recursive","templatePath","mkdtemp","mkdir_p","builder","mobileServerUrl","cordovaServerPort","settingsFile","processControlFile","jobHasMessages","writeConfigXmlAndCopyResources","pathDirname","config","lib","www","url","template","runCommands","create","undefined","writeBuildJson","iosCommonOptions","buildFlag","writeFile","JSON","stringify","ios","release","prepareFromAppBundle","bundlePath","pluginVersions","copyWWW","ensurePlatformsAreSynchronized","ensurePluginsAreSynchronized","pluginsConfiguration","iosBuildExtrasPath","copyBuildOverride","prepareForPlatform","require","cache","commandOptions","defaultOptions","platforms","prepare","buildForPlatform","extraPaths","build","run","isDevice","push","env","defaultEnvWithPathsAdded","command","cwd","stdio","waitForClose","checkPlatformRequirements","process","warn","inProject","info","allRequirements","requirements","error","message","reject","requirement","id","satisfied","every","installed","name","success","reason","metadata","failInfo","listPlatforms","updatePlatforms","addPlatform","version","platformSpec","removePlatform","cordovaPlatformsInApp","platformList","getCordovaPlatforms","assertInCapture","listInstalledPluginVersions","usePluginInfoId","pluginInfoProvider","installedPluginVersions","getAllWithinSearchPath","fetchedPluginVersions","listFetchedPluginVersions","object","map","pluginInfo","fetchedPlugin","fetchJsonPath","fetchedPluginsMetadata","parse","readFile","source","idWithVersion","scoped","split","type","ref","path","targetForPlugin","isUrlWithSha","isUrlWithFileScheme","pluginPath","resolveLocalPluginPath","stat","statOrNull","isDirectory","substr","length","isPathRelative","pathResolve","projectDir","addPlugin","target","extend","cli_variables","plugin","bind","removePlugins","plugins","isEmpty","enterJob","title","ensurePinnedPluginVersions","newId","labelWarn","shouldReinstallAllPlugins","pluginsFromLocalPath","each","isPluginFromLocalPath","has","installedPluginsByName","Object","keys","androidJsonPath","iosJsonPath","androidJson","installed_plugins","iosJson","previouslyInstalledPlugins","union","fetched","forEach","pluginsToRemove","intersection","pluginVersionsToInstall","pluginsToInstallCount","size","installedPluginsCount","reportProgress","current","end","ensurePluginsWereInstalled","requiredPlugins","retryInstall","installedPluginsNames","installedPluginsVersions","values","missingPlugins","filter","includes","Error","join","silent","buildConfig","paths","defaultPaths","unshift","currentEnvWithPathsAdded","nodeBinDir","getCurrentNodeBinDir","iosSimBinPath","getDevBundle","promiseOrAsyncFunction","toUpperCase","slice","oldCwd","chdir","oldEnv","key","promise","Promise","await","arrowError","consoleOptions","indent","errorMessage","stack","green","ExitWithCode","CPp","prototype","prefix","endsWith"],"mappings":"AAAA,IAAIA,aAAJ;;AAAkBC,MAAM,CAACC,IAAP,CAAY,sCAAZ,EAAmD;AAACC,EAAAA,OAAO,CAACC,CAAD,EAAG;AAACJ,IAAAA,aAAa,GAACI,CAAd;AAAgB;;AAA5B,CAAnD,EAAiF,CAAjF;AAAlBH,MAAM,CAACI,MAAP,CAAc;AAACC,EAAAA,cAAc,EAAC,MAAIA;AAApB,CAAd;;AAAmD,IAAIC,CAAJ;;AAAMN,MAAM,CAACC,IAAP,CAAY,YAAZ,EAAyB;AAACC,EAAAA,OAAO,CAACC,CAAD,EAAG;AAACG,IAAAA,CAAC,GAACH,CAAF;AAAI;;AAAhB,CAAzB,EAA2C,CAA3C;AAA8C,IAAII,IAAJ;AAASP,MAAM,CAACC,IAAP,CAAY,MAAZ,EAAmB;AAACC,EAAAA,OAAO,CAACC,CAAD,EAAG;AAACI,IAAAA,IAAI,GAACJ,CAAL;AAAO;;AAAnB,CAAnB,EAAwC,CAAxC;AAA2C,IAAIK,MAAJ;AAAWR,MAAM,CAACC,IAAP,CAAY,QAAZ,EAAqB;AAACC,EAAAA,OAAO,CAACC,CAAD,EAAG;AAACK,IAAAA,MAAM,GAACL,CAAP;AAAS;;AAArB,CAArB,EAA4C,CAA5C;AAA+C,IAAIM,KAAJ;AAAUT,MAAM,CAACC,IAAP,CAAY,OAAZ,EAAoB;AAACC,EAAAA,OAAO,CAACC,CAAD,EAAG;AAACM,IAAAA,KAAK,GAACN,CAAN;AAAQ;;AAApB,CAApB,EAA0C,CAA1C;AAA6C,IAAIO,MAAJ;AAAWV,MAAM,CAACC,IAAP,CAAY,QAAZ,EAAqB;AAACC,EAAAA,OAAO,CAACC,CAAD,EAAG;AAACO,IAAAA,MAAM,GAACP,CAAP;AAAS;;AAArB,CAArB,EAA4C,CAA5C;AAA+C,IAAIQ,KAAJ;AAAUX,MAAM,CAACC,IAAP,CAAY,aAAZ,EAA0B;AAACC,EAAAA,OAAO,CAACC,CAAD,EAAG;AAACQ,IAAAA,KAAK,GAACR,CAAN;AAAQ;;AAApB,CAA1B,EAAgD,CAAhD;AAAmD,IAAIS,KAAJ;AAAUZ,MAAM,CAACC,IAAP,CAAY,mBAAZ,EAAgC;AAACC,EAAAA,OAAO,CAACC,CAAD,EAAG;AAACS,IAAAA,KAAK,GAACT,CAAN;AAAQ;;AAApB,CAAhC,EAAsD,CAAtD;AAAyD,IAAIU,OAAJ;AAAYb,MAAM,CAACC,IAAP,CAAY,uBAAZ,EAAoC;AAACY,EAAAA,OAAO,CAACV,CAAD,EAAG;AAACU,IAAAA,OAAO,GAACV,CAAR;AAAU;;AAAtB,CAApC,EAA4D,CAA5D;AAA+D,IAAIW,OAAJ;AAAYd,MAAM,CAACC,IAAP,CAAY,qBAAZ,EAAkC;AAACa,EAAAA,OAAO,CAACX,CAAD,EAAG;AAACW,IAAAA,OAAO,GAACX,CAAR;AAAU;;AAAtB,CAAlC,EAA0D,CAA1D;AAA6D,IAAIY,YAAJ;AAAiBf,MAAM,CAACC,IAAP,CAAY,0BAAZ,EAAuC;AAACC,EAAAA,OAAO,CAACC,CAAD,EAAG;AAACY,IAAAA,YAAY,GAACZ,CAAb;AAAe;;AAA3B,CAAvC,EAAoE,CAApE;AAAuE,IAAIa,IAAJ;AAAShB,MAAM,CAACC,IAAP,CAAY,gBAAZ,EAA6B;AAACC,EAAAA,OAAO,CAACC,CAAD,EAAG;AAACa,IAAAA,IAAI,GAACb,CAAL;AAAO;;AAAnB,CAA7B,EAAkD,EAAlD;AAAsD,IAAIc,WAAJ;AAAgBjB,MAAM,CAACC,IAAP,CAAY,0BAAZ,EAAuC;AAACC,EAAAA,OAAO,CAACC,CAAD,EAAG;AAACc,IAAAA,WAAW,GAACd,CAAZ;AAAc;;AAA1B,CAAvC,EAAmE,EAAnE;AAAuE,IAAIe,YAAJ,EAAiBC,aAAjB;AAA+BnB,MAAM,CAACC,IAAP,CAAY,oBAAZ,EAAiC;AAACiB,EAAAA,YAAY,CAACf,CAAD,EAAG;AAACe,IAAAA,YAAY,GAACf,CAAb;AAAe,GAAhC;;AAAiCgB,EAAAA,aAAa,CAAChB,CAAD,EAAG;AAACgB,IAAAA,aAAa,GAAChB,CAAd;AAAgB;;AAAlE,CAAjC,EAAqG,EAArG;AAAyGH,MAAM,CAACC,IAAP,CAAY,2BAAZ;AAAyC,IAAImB,WAAJ,EAAgBC,cAAhB,EAA+BC,YAA/B;AAA4CtB,MAAM,CAACC,IAAP,CAAY,aAAZ,EAA0B;AAACsB,EAAAA,OAAO,CAACpB,CAAD,EAAG;AAACiB,IAAAA,WAAW,GAACjB,CAAZ;AAAc,GAA1B;;AAA2BqB,EAAAA,MAAM,CAACrB,CAAD,EAAG;AAACkB,IAAAA,cAAc,GAAClB,CAAf;AAAiB,GAAtD;;AAAuDmB,EAAAA,YAAY,CAACnB,CAAD,EAAG;AAACmB,IAAAA,YAAY,GAACnB,CAAb;AAAe;;AAAtF,CAA1B,EAAkH,EAAlH;AAAsH,IAAIsB,YAAJ;AAAiBzB,MAAM,CAACC,IAAP,CAAY,iCAAZ,EAA8C;AAACC,EAAAA,OAAO,CAACC,CAAD,EAAG;AAACsB,IAAAA,YAAY,GAACtB,CAAb;AAAe;;AAA3B,CAA9C,EAA2E,EAA3E;AAA+E,IAAIuB,UAAJ;AAAe1B,MAAM,CAACC,IAAP,CAAY,kCAAZ,EAA+C;AAACC,EAAAA,OAAO,CAACC,CAAD,EAAG;AAACuB,IAAAA,UAAU,GAACvB,CAAX;AAAa;;AAAzB,CAA/C,EAA0E,EAA1E;AAA8E,IAAIwB,kBAAJ;AAAuB3B,MAAM,CAACC,IAAP,CAAY,qDAAZ,EAAkE;AAACC,EAAAA,OAAO,CAACC,CAAD,EAAG;AAACwB,IAAAA,kBAAkB,GAACxB,CAAnB;AAAqB;;AAAjC,CAAlE,EAAqG,EAArG;AAAyG,IAAIyB,iBAAJ,EAAsBC,yBAAtB,EAAgDC,sBAAhD,EAAuEC,wBAAvE,EAAgGC,WAAhG,EAA4GC,qBAA5G,EAAkIC,eAAlI;AAAkJlC,MAAM,CAACC,IAAP,CAAY,YAAZ,EAAyB;AAAC2B,EAAAA,iBAAiB,CAACzB,CAAD,EAAG;AAACyB,IAAAA,iBAAiB,GAACzB,CAAlB;AAAoB,GAA1C;;AAA2C0B,EAAAA,yBAAyB,CAAC1B,CAAD,EAAG;AAAC0B,IAAAA,yBAAyB,GAAC1B,CAA1B;AAA4B,GAApG;;AAAqG2B,EAAAA,sBAAsB,CAAC3B,CAAD,EAAG;AAAC2B,IAAAA,sBAAsB,GAAC3B,CAAvB;AAAyB,GAAxJ;;AAAyJ4B,EAAAA,wBAAwB,CAAC5B,CAAD,EAAG;AAAC4B,IAAAA,wBAAwB,GAAC5B,CAAzB;AAA2B,GAAhN;;AAAiN6B,EAAAA,WAAW,CAAC7B,CAAD,EAAG;AAAC6B,IAAAA,WAAW,GAAC7B,CAAZ;AAAc,GAA9O;;AAA+O8B,EAAAA,qBAAqB,CAAC9B,CAAD,EAAG;AAAC8B,IAAAA,qBAAqB,GAAC9B,CAAtB;AAAwB,GAAhS;;AAAiS+B,EAAAA,eAAe,CAAC/B,CAAD,EAAG;AAAC+B,IAAAA,eAAe,GAAC/B,CAAhB;AAAkB;;AAAtU,CAAzB,EAAiW,EAAjW;AAAqW,IAAIgC,cAAJ;AAAmBnC,MAAM,CAACC,IAAP,CAAY,cAAZ,EAA2B;AAACkC,EAAAA,cAAc,CAAChC,CAAD,EAAG;AAACgC,IAAAA,cAAc,GAAChC,CAAf;AAAiB;;AAApC,CAA3B,EAAiE,EAAjE;AA0Bl+DkB,cAAc,CAACe,EAAf,CAAkB,SAAlB,EAA6BC,YAA7B;AACAhB,cAAc,CAACe,EAAf,CAAkB,KAAlB,EAAyBC,YAAzB;AACAhB,cAAc,CAACe,EAAf,CAAkB,MAAlB,EAA0BC,YAA1B;AACAhB,cAAc,CAACe,EAAf,CAAkB,MAAlB,EAA0BE,GAA1B;AACAjB,cAAc,CAACe,EAAf,CAAkB,OAAlB,EAA2BE,GAA3B;AAEAjB,cAAc,CAACe,EAAf,CAAkB,SAAlB,EAA6BC,YAA7B;;AAEA,SAASA,YAAT,GAA+B;AAC7B,MAAIxB,OAAO,CAAC0B,OAAZ,EAAqB;AACnBD,IAAAA,GAAG,CAAC,YAAD,CAAH;AACD;AACF;;AAAA;;AAED,SAASA,GAAT,GAAsB;AAAA,oCAANE,IAAM;AAANA,IAAAA,IAAM;AAAA;;AACpB3B,EAAAA,OAAO,CAAC4B,OAAR,cAAsBlC,IAAI,CAACmC,MAAL,CAAYC,KAAZ,CAAkB,IAAlB,EAAwBH,IAAxB,CAAtB;AACD,C,CAED;AACA;AACA;;;AACA,MAAMI,sBAAsB,GAAGf,yBAA/B,C,CAEA;AACA;AACA;AACA;;AACA,MAAMgB,oBAAoB,GAAG;AAC3B,mCAAiC,OADN;AAE3B,2BAAyB,OAFE;AAG3B,4BAA0B,OAHC;AAGQ;AACnC,6BAA2B,OAJA;AAK3B,2BAAyB,OALE;AAM3B,kCAAgC,OANL;AAMc;AACzC,uCAAqC,OAPV;AAOmB;AAC9C,4BAA0B,OARC;AAS3B,yBAAuB,OATI;AAU3B,kCAAgC,OAVL;AAW3B,gCAA8B,OAXH;AAY3B,kCAAgC,OAZL;AAa3B,iCAA+B,OAbJ;AAc3B,qCAAmC,OAdR;AAe3B,0BAAwB,OAfG;AAgB3B,kCAAgC,OAhBL;AAiB3B,wCAAsC,OAjBX;AAkB3B,iCAA+B,OAlBJ;AAmB3B,8BAA4B,OAnBD;AAoB3B,mCAAiC,OApBN;AAqB3B,8BAA4B,OArBD;AAsB3B,8BAA4B,OAtBD;AAuB3B,qCAAmC;AAvBR,CAA7B;;AA0BO,MAAMxC,cAAN,CAAqB;AAC1ByC,EAAAA,WAAW,CAACC,cAAD,EAA+B;AAAA,QAAdC,OAAc,uEAAJ,EAAI;AAExC,SAAKD,cAAL,GAAsBA,cAAtB;AAEA,SAAKE,WAAL,GAAmBF,cAAc,CAACG,wBAAf,CAAwC,eAAxC,CAAnB;AACA,SAAKF,OAAL,GAAeA,OAAf;AAEA,SAAKG,UAAL,GAAkBxC,KAAK,CAACyC,QAAN,CAAe,KAAKH,WAApB,EAAiC,SAAjC,CAAlB;AAEA,SAAKI,aAAL,GAAqB1C,KAAK,CAAC2C,eAAN,CACnB3C,KAAK,CAACyC,QAAN,CAAe,KAAKH,WAApB,EAAiC,YAAjC,CADmB,CAArB;AAGA,SAAKM,cAAL;AACD;;AAEDA,EAAAA,cAAc,GAAG;AACfxC,IAAAA,YAAY,CAACyC,WAAb,GADe,CAGf;AACA;;AACA,QAAI7C,KAAK,CAAC8C,MAAN,CAAa,KAAKR,WAAlB,CAAJ,EAAoC;AAClC,YAAMS,kBAAkB,GAAG,KAAKC,sBAAL,EAA3B;;AAEA,YAAMC,QAAQ,GAAGtD,CAAC,CAACuD,IAAF,CAAOjB,sBAAP,EAA+B,CAACkB,aAAD,EAAgBC,QAAhB,KAA6B;AAC3E;AACA,YAAI,CAACzD,CAAC,CAAC0D,QAAF,CAAWN,kBAAX,EAA+BK,QAA/B,CAAL,EAA+C;AAC7C,iBAAO,KAAP;AACD;;AAED,cAAME,gBAAgB,GAAG,KAAKC,2BAAL,CAAiCH,QAAjC,CAAzB,CAN2E,CAO3E;;AACA,YAAI,CAACE,gBAAL,EAAuB;AACrB,iBAAO,IAAP;AACD;;AAED,YAAI,CAAEvD,MAAM,CAACyD,KAAP,CAAaL,aAAb,CAAN,EAAmC;AACjC;AACA;AACA,iBAAO,KAAP;AACD;;AAED,eAAOpD,MAAM,CAAC0D,EAAP,CAAUH,gBAAV,EAA4BH,aAA5B,CAAP;AACD,OAnBgB,CAAjB;;AAqBA,UAAIF,QAAJ,EAAc;AACZ/C,QAAAA,OAAO,CAACwD,KAAR,gFADY,CAGZ;AACA;;AACA1D,QAAAA,KAAK,CAAC2D,YAAN,CAAmB,KAAKrB,WAAxB;AACD;AACF;;AAED,QAAI,CAACtC,KAAK,CAAC8C,MAAN,CAAa,KAAKR,WAAlB,CAAL,EAAqC;AACnC;AACA;AACA;AACA;AACA;AAEA,YAAMsB,YAAY,GAAG5D,KAAK,CAAC6D,OAAN,CAAc,mBAAd,CAArB,CAPmC,CASnC;AACA;;AACA7D,MAAAA,KAAK,CAAC8D,OAAN,CAAc9D,KAAK,CAACyC,QAAN,CAAemB,YAAf,EAA6B,OAA7B,CAAd,EAXmC,CAanC;AACA;;AACA5D,MAAAA,KAAK,CAAC8D,OAAN,CAAc9D,KAAK,CAACyC,QAAN,CAAemB,YAAf,EAA6B,KAA7B,CAAd;AAEA,YAAMG,OAAO,GAAG,IAAIvC,cAAJ,CACd,KAAKY,cADS,EAEdwB,YAFc,EAGd;AAAEI,QAAAA,eAAe,EAAE,KAAK3B,OAAL,CAAa2B,eAAhC;AACEC,QAAAA,iBAAiB,EAAE,KAAK5B,OAAL,CAAa4B,iBADlC;AAEEC,QAAAA,YAAY,EAAE,KAAK7B,OAAL,CAAa6B;AAF7B,OAHc,CAAhB;AAQAH,MAAAA,OAAO,CAACI,kBAAR;;AAEA,UAAI/D,YAAY,CAACgE,cAAb,EAAJ,EAAmC;AACjC;AACD,OA7BkC,CA+BnC;;;AACAL,MAAAA,OAAO,CAACM,8BAAR,CAAuC,KAAvC,EAhCmC,CAkCnC;;AACArE,MAAAA,KAAK,CAAC8D,OAAN,CAAc9D,KAAK,CAACsE,WAAN,CAAkB,KAAKhC,WAAvB,CAAd;AAEA,YAAMiC,MAAM,GAAG;AACbC,QAAAA,GAAG,EAAE;AACHC,UAAAA,GAAG,EAAE;AACHC,YAAAA,GAAG,EAAE1E,KAAK,CAAC2C,eAAN,CAAsBiB,YAAtB,CADF;AAEHe,YAAAA,QAAQ,EAAE;AAFP;AADF;AADQ,OAAf,CArCmC,CA8CnC;AACA;;AACA,WAAKC,WAAL,CAAiB,0BAAjB,EAA6C,+BAAY;AACvD;AACA;AACA,sBAAMnE,WAAW,CAACoE,MAAZ,CAAmB7E,KAAK,CAAC2C,eAAN,CAAsB,KAAKL,WAA3B,CAAnB,EACJwC,SADI,EACOA,SADP,EACkBP,MADlB,CAAN;AAED,OAL4C,CAA7C,EAKGO,SALH,EAKc,IALd;AAMD;;AAED,SAAKC,cAAL;AACD;;AAEDA,EAAAA,cAAc,GAAG;AACf,QAAI/E,KAAK,CAAC8C,MAAN,CAAa,KAAKJ,aAAlB,CAAJ,EAAsC;AACpC;AACD;;AAED,UAAMsC,gBAAgB,GAAG;AACvB;AACAC,MAAAA,SAAS,EAAE,CACT,yBADS;AAFY,KAAzB;AAOAjF,IAAAA,KAAK,CAACkF,SAAN,CACE,KAAKxC,aADP,EAEEyC,IAAI,CAACC,SAAL,CAAe;AACbC,MAAAA,GAAG,EAAE;AACH3B,QAAAA,KAAK,EAAEsB,gBADJ;AAEHM,QAAAA,OAAO,EAAEN;AAFN;AADQ,KAAf,EAKG,IALH,EAKS,CALT,IAKc,IAPhB;AASD,GAtIyB,CAwI1B;;;AAEAO,EAAAA,oBAAoB,CAACC,UAAD,EAAaC,cAAb,EAA6B;AAC/C5F,IAAAA,MAAM,CAAC2F,UAAD,CAAN;AACA3F,IAAAA,MAAM,CAAC4F,cAAD,CAAN;AAEArF,IAAAA,YAAY,CAACyC,WAAb;AAEA3C,IAAAA,OAAO,CAACwD,KAAR,CAAc,2CAAd;AAEA,UAAMK,OAAO,GAAG,IAAIvC,cAAJ,CACd,KAAKY,cADS,EAEd,KAAKE,WAFS,EAGd;AAAE0B,MAAAA,eAAe,EAAE,KAAK3B,OAAL,CAAa2B,eAAhC;AACEC,MAAAA,iBAAiB,EAAE,KAAK5B,OAAL,CAAa4B,iBADlC;AAEEC,MAAAA,YAAY,EAAE,KAAK7B,OAAL,CAAa6B;AAF7B,KAHc,CAAhB;AAQAH,IAAAA,OAAO,CAACI,kBAAR;;AAEA,QAAI/D,YAAY,CAACgE,cAAb,EAAJ,EAAmC;AACjC;AACD;;AAEDL,IAAAA,OAAO,CAACM,8BAAR;AACAN,IAAAA,OAAO,CAAC2B,OAAR,CAAgBF,UAAhB;AAEA,SAAKG,8BAAL;AACA,SAAKC,4BAAL,CAAkCH,cAAlC,EACE1B,OAAO,CAAC8B,oBADV,EA1B+C,CA6B/C;AACA;;AACA,UAAMC,kBAAkB,GACtB9F,KAAK,CAACyC,QAAN,CACE,KAAKH,WADP,EAEE,6CAFF,CADF;;AAKA,QAAItC,KAAK,CAAC8C,MAAN,CAAagD,kBAAb,CAAJ,EAAsC;AACpC9F,MAAAA,KAAK,CAACkF,SAAN,CACEY,kBADF,EAEE,wDAFF;AAGD;;AAED/B,IAAAA,OAAO,CAACgC,iBAAR;AACD;;AAEDC,EAAAA,kBAAkB,CAAC5C,QAAD,EAAW;AAC3BvD,IAAAA,MAAM,CAACuD,QAAD,CAAN,CAD2B,CAG3B;AACA;;AACA,WAAO6C,OAAO,CAACC,KAAR,CAAclG,KAAK,CAACyC,QAAN,CAAe,KAAKH,WAApB,EACnB,2CADmB,CAAd,CAAP;AAEA,WAAO2D,OAAO,CAACC,KAAR,CAAclG,KAAK,CAACyC,QAAN,CAAe,KAAKH,WAApB,EACnB,sCADmB,CAAd,CAAP;;AAGA,UAAM6D,cAAc,qBACf,KAAKC,cADU;AAElBC,MAAAA,SAAS,EAAE,CAACjD,QAAD;AAFO,MAApB;;AAKA,SAAKwB,WAAL,kDACFzD,sBAAsB,CAACiC,QAAD,CADpB,GACkC,+BAAY;AAC5C,oBAAM3C,WAAW,CAAC6F,OAAZ,CAAoBH,cAApB,CAAN;AACD,KAFiC,CADlC;AAID,GA1MyB,CA4M1B;;;AAEAI,EAAAA,gBAAgB,CAACnD,QAAD,EAAqC;AAAA,QAA1Bf,OAA0B,uEAAhB,EAAgB;AAAA,QAAZmE,UAAY;AACnD3G,IAAAA,MAAM,CAACuD,QAAD,CAAN;;AAEA,UAAM+C,cAAc,qBACf,KAAKC,cADU;AAElBC,MAAAA,SAAS,EAAE,CAACjD,QAAD,CAFO;AAGlBf,MAAAA;AAHkB,MAApB;;AAMA,SAAKuC,WAAL,6CACFzD,sBAAsB,CAACiC,QAAD,CADpB,GACkC,+BAAY;AAC5C,oBAAM3C,WAAW,CAACgG,KAAZ,CAAkBN,cAAlB,CAAN;AACD,KAFiC,CADlC;AAID,GA3NyB,CA6N1B;;;AAEMO,EAAAA,GAAN,CAAUtD,QAAV,EAAoBuD,QAApB;AAAA,oCAA6D;AAAA,UAA/BtE,OAA+B,uEAArB,EAAqB;AAAA,UAAjBmE,UAAiB,uEAAJ,EAAI;AAC3DnE,MAAAA,OAAO,CAACuE,IAAR,CAAa,eAAb,EAA8B,KAAKlE,aAAnC;AACAL,MAAAA,OAAO,CAACuE,IAAR,CAAaD,QAAQ,GAAG,UAAH,GAAgB,YAArC;AAEA,UAAIE,GAAG,GAAG,KAAKC,wBAAL,CAA8B,GAAGN,UAAjC,CAAV;AAEA,UAAIO,OAAO,GAAG/G,KAAK,CAAC2C,eAAN,CAAsB3C,KAAK,CAACyC,QAAN,CAClC,KAAKH,WAD6B,EAChB,WADgB,EACHc,QADG,EACO,SADP,EACkB,KADlB,CAAtB,CAAd;AAGA,WAAKwB,WAAL,4CACFzD,sBAAsB,CAACiC,QAAD,CADpB,2BAC+Cf,OAD/C,GAEA7B,aAAa,CAACuG,OAAD,EAAU1E,OAAV,EAAmB;AAC9BwE,QAAAA,GAAG,EAAEA,GADyB;AAE9BG,QAAAA,GAAG,EAAE,KAAK1E,WAFoB;AAG9B2E,QAAAA,KAAK,EAAE/G,OAAO,CAAC0B,OAAR,GAAkB,SAAlB,GAA8B,MAHP;AAI9BsF,QAAAA,YAAY,EAAE;AAJgB,OAAnB,CAFb,EAOI,IAPJ,EAOU,IAPV;AAQD,KAjBD;AAAA,GA/N0B,CAkP1B;AAEA;AACA;AACA;;;AACAC,EAAAA,yBAAyB,CAAC/D,QAAD,EAAW;AAClC,QAAIA,QAAQ,KAAK,KAAb,IAAsBgE,OAAO,CAAChE,QAAR,KAAqB,QAA/C,EAAyD;AACvDlD,MAAAA,OAAO,CAACmH,IAAR,CAAa;mBAAb;AAEA,aAAO,KAAP;AACD;;AAED,UAAMtE,kBAAkB,GAAG,KAAKC,sBAAL,EAA3B;;AAEA,UAAMsE,SAAS,GAAG3H,CAAC,CAAC0D,QAAF,CAAWN,kBAAX,EAA+BK,QAA/B,CAAlB;;AACA,QAAI,CAACkE,SAAL,EAAgB;AACdpH,MAAAA,OAAO,CAACmH,IAAR,0BAA+BlG,sBAAsB,CAACiC,QAAD,CAArD;AAEAlD,MAAAA,OAAO,CAACqH,IAAR,gBAAqBrH,OAAO,CAAC6G,OAAR,+BAAuC3D,QAAvC,EAArB;AACA,aAAO,KAAP;AACD;;AAED,UAAMoE,eAAe,GAAG,KAAK5C,WAAL,sDACAzD,sBAAsB,CAACiC,QAAD,CADtB,GAEtB,+BAAY;AACV,2BAAa3C,WAAW,CAACgH,YAAZ,CAAyB,CAACrE,QAAD,CAAzB,EACX,KAAKgD,cADM,CAAb;AAED,KAHD,CAFsB,CAAxB;AAMA,QAAIqB,YAAY,GAAGD,eAAe,IAAIA,eAAe,CAACpE,QAAD,CAArD;;AACA,QAAI,CAACqE,YAAL,EAAmB;AACjBvH,MAAAA,OAAO,CAACwH,KAAR,qDACJvG,sBAAsB,CAACiC,QAAD,CADlB;AAEA,aAAO,KAAP;AACD,KAJD,MAIO,IAAIqE,YAAY,YAAY9G,YAA5B,EAA0C;AAC/CT,MAAAA,OAAO,CAACwH,KAAR,0BAAgCD,YAAY,CAACE,OAA7C;AACA,aAAO,KAAP;AACD,KA/BiC,CAiClC;;;AACAF,IAAAA,YAAY,GAAG9H,CAAC,CAACiI,MAAF,CAASH,YAAT,EACbI,WAAW,IAAIA,WAAW,CAACC,EAAZ,KAAmB,YADrB,CAAf;;AAGA,UAAMC,SAAS,GAAGpI,CAAC,CAACqI,KAAF,CAAQP,YAAR,EAChBI,WAAW,IAAIA,WAAW,CAACI,SADX,CAAlB;;AAGA,QAAI,CAACF,SAAL,EAAgB;AACd7H,MAAAA,OAAO,CAACqH,IAAR;AACArH,MAAAA,OAAO,CAACqH,IAAR,uFACcpG,sBAAsB,CAACiC,QAAD,CADpC;AAGAlD,MAAAA,OAAO,CAACqH,IAAR;AACArH,MAAAA,OAAO,CAACqH,IAAR,CAAa,kEAAb;AACArH,MAAAA,OAAO,CAACqH,IAAR,CAAarH,OAAO,CAACwE,GAAR,CAAY,8DAAZ,CAAb;AAEAxE,MAAAA,OAAO,CAACqH,IAAR;AAEArH,MAAAA,OAAO,CAACqH,IAAR,CAAa,wCAAb;;AACA,WAAK,MAAMM,WAAX,IAA0BJ,YAA1B,EAAwC;AACtC,cAAMS,IAAI,GAAGL,WAAW,CAACK,IAAzB;;AACA,YAAIL,WAAW,CAACI,SAAhB,EAA2B;AACzB/H,UAAAA,OAAO,CAACiI,OAAR,CAAgBD,IAAhB,EAAsB,WAAtB;AACD,SAFD,MAEO;AACL,gBAAME,MAAM,GAAGP,WAAW,CAACQ,QAAZ,IAAwBR,WAAW,CAACQ,QAAZ,CAAqBD,MAA5D;;AACA,cAAIA,MAAJ,EAAY;AACVlI,YAAAA,OAAO,CAACoI,QAAR,WAAoBJ,IAApB,eAA6BE,MAA7B;AACD,WAFD,MAEO;AACLlI,YAAAA,OAAO,CAACoI,QAAR,CAAiBJ,IAAjB;AACD;AACF;AACF;AACF;;AACD,WAAOH,SAAP;AACD;;AAED/E,EAAAA,sBAAsB,GAAG;AACvB,WAAOlC,YAAY,CAACyH,aAAb,CAA2BvI,KAAK,CAAC2C,eAAN,CAAsB,KAAKL,WAA3B,CAA3B,CAAP;AACD;;AAEDiB,EAAAA,2BAA2B,CAACH,QAAD,EAAW;AACpC,UAAM2D,OAAO,GAAG/G,KAAK,CAAC2C,eAAN,CAAsB3C,KAAK,CAACyC,QAAN,CACpC,KAAKH,WAD+B,EAClB,WADkB,EACLc,QADK,EACK,SADL,EACgB,SADhB,CAAtB,CAAhB,CADoC,CAGpC;;AACA,QAAIpD,KAAK,CAAC8C,MAAN,CAAaiE,OAAb,CAAJ,EAA2B;AACzB,aAAO,KAAKnC,WAAL,kDACqCxB,QADrC,0BAEL7C,YAAY,CAACwG,OAAD,EAAU;AACpBF,QAAAA,GAAG,EAAE,KAAKC,wBAAL,EADe;AAEpBE,QAAAA,GAAG,EAAE,KAAK1E;AAFU,OAAV,CAFP,EAIsB,IAJtB,EAI4B,IAJ5B,CAAP;AAKD,KAND,MAMO;AACL,aAAO,IAAP;AACD;AACF;;AAEDkG,EAAAA,eAAe,GAA4C;AAAA,QAA3CnC,SAA2C,uEAA/B,KAAKrD,sBAAL,EAA+B;AACzD,SAAK4B,WAAL,kDACFxD,wBAAwB,CAACiF,SAAD,CADtB,GACqC,+BAAY;AAC/C,oBAAM5F,WAAW,CAAC2C,QAAZ,CAAqB,QAArB,EAA+BiD,SAA/B,EAA0C,KAAKD,cAA/C,CAAN;AACD,KAFoC,CADrC;AAID;;AAEDqC,EAAAA,WAAW,CAACrF,QAAD,EAAW;AACpB,SAAKwB,WAAL,2BAAoCzD,sBAAsB,CAACiC,QAAD,CAA1D,0BACiB,+BAAY;AAC3B,UAAIsF,OAAO,GAAGzG,sBAAsB,CAACmB,QAAD,CAApC;AACA,UAAIuF,YAAY,GAAGD,OAAO,aAAMtF,QAAN,cAAkBsF,OAAlB,IAA8BtF,QAAxD;AACA,oBAAM3C,WAAW,CAAC2C,QAAZ,CAAqB,KAArB,EAA4BuF,YAA5B,EAA0C,KAAKvC,cAA/C,CAAN;AACD,KAJgB,CADjB;AAMD;;AAEDwC,EAAAA,cAAc,CAACxF,QAAD,EAAW;AACvB,SAAKwB,WAAL,6BAAsCzD,sBAAsB,CAACiC,QAAD,CAA5D,4BACmB,+BAAY;AAC7B,oBAAM3C,WAAW,CAAC2C,QAAZ,CAAqB,IAArB,EAA2BA,QAA3B,EAAqC,KAAKgD,cAA1C,CAAN;AACD,KAFkB,CADnB;AAID;;AAED,MAAIyC,qBAAJ,GAA4B;AAC1B,WAAO,KAAKzG,cAAL,CAAoB0G,YAApB,CAAiCC,mBAAjC,EAAP;AACD,GAxWyB,CA0W1B;AACA;;;AACApD,EAAAA,8BAA8B,GAAyC;AAAA,QAAxCU,SAAwC,uEAA5B,KAAKwC,qBAAuB;AACrEzI,IAAAA,YAAY,CAAC4I,eAAb;AAEA,UAAMjG,kBAAkB,GAAG,KAAKC,sBAAL,EAA3B;;AAEA,SAAK,IAAII,QAAT,IAAqBiD,SAArB,EAAgC;AAC9B,UAAI1G,CAAC,CAAC0D,QAAF,CAAWN,kBAAX,EAA+BK,QAA/B,CAAJ,EAA8C;AAC5C;AACD;;AAED,WAAKqF,WAAL,CAAiBrF,QAAjB;AACD;;AAED,SAAK,IAAIA,QAAT,IAAqBL,kBAArB,EAAyC;AACvC,UAAI,CAACpD,CAAC,CAAC0D,QAAF,CAAWgD,SAAX,EAAsBjD,QAAtB,CAAD,IACFzD,CAAC,CAAC0D,QAAF,CAAWpC,iBAAX,EAA8BmC,QAA9B,CADF,EAC2C;AACzC,aAAKwF,cAAL,CAAoBxF,QAApB;AACD;AACF;AACF,GA/XyB,CAiY1B;AAEA;AACA;AACA;AACA;AACA;;;AACA6F,EAAAA,2BAA2B,GAA0B;AAAA,QAAzBC,eAAyB,uEAAP,KAAO;AACnD,UAAMC,kBAAkB,GAAG,IAAInI,kBAAJ,EAA3B;AACA,UAAMoI,uBAAuB,GAAGD,kBAAkB,CAACE,sBAAnB,CAC9BrJ,KAAK,CAAC2C,eAAN,CAAsB,KAAKH,UAA3B,CAD8B,CAAhC;AAEA,UAAM8G,qBAAqB,GAAG,KAAKC,yBAAL,EAA9B;AACA,WAAO5J,CAAC,CAAC6J,MAAF,CAASJ,uBAAuB,CAACK,GAAxB,CAA4BC,UAAU,IAAI;AACxD,YAAMC,aAAa,GAAGL,qBAAqB,CAACI,UAAU,CAAC5B,EAAZ,CAA3C;AACA,YAAMA,EAAE,GAAG6B,aAAa,CAAC7B,EAAzB;AACA,YAAMY,OAAO,GAAGiB,aAAa,CAACjB,OAAd,IAAyBgB,UAAU,CAAChB,OAApD;AACA,aAAO,CAACQ,eAAe,GAAGQ,UAAU,CAAC5B,EAAd,GAAmBA,EAAnC,EAAuCY,OAAvC,CAAP;AACD,KALe,CAAT,CAAP;AAMD,GAnZyB,CAqZ1B;AACA;AACA;AACA;AACA;AACA;;;AACAa,EAAAA,yBAAyB,GAAG;AAC1B,UAAMK,aAAa,GAAG5J,KAAK,CAACyC,QAAN,CAAe,KAAKD,UAApB,EAAgC,YAAhC,CAAtB;;AAEA,QAAI,CAACxC,KAAK,CAAC8C,MAAN,CAAa8G,aAAb,CAAL,EAAkC;AAChC,aAAO,EAAP;AACD;;AAED,UAAMC,sBAAsB,GAAG1E,IAAI,CAAC2E,KAAL,CAAW9J,KAAK,CAAC+J,QAAN,CACxCH,aADwC,EACzB,MADyB,CAAX,CAA/B;AAEA,WAAOjK,CAAC,CAAC6J,MAAF,CAAS7J,CAAC,CAAC8J,GAAF,CAAMI,sBAAN,EAA8B,CAACxB,QAAD,EAAWH,IAAX,KAAoB;AAChE,YAAM8B,MAAM,GAAG3B,QAAQ,CAAC2B,MAAxB;AAEA,YAAMC,aAAa,GAAGD,MAAM,CAAClC,EAAP,GAAYkC,MAAM,CAAClC,EAAnB,GAAwBI,IAA9C;AACA,YAAMgC,MAAM,GAAGD,aAAa,CAAC,CAAD,CAAb,KAAqB,GAApC;AACA,YAAMnC,EAAE,aAAMoC,MAAM,GAAG,GAAH,GAAS,EAArB,SAA0BD,aAAa,CAACE,KAAd,CAAoB,GAApB,EAAyBD,MAAM,GAAG,CAAH,GAAO,CAAtC,CAA1B,CAAR;AACA,UAAIxB,OAAJ;;AACA,UAAIsB,MAAM,CAACI,IAAP,KAAgB,UAApB,EAAgC;AAC9B1B,QAAAA,OAAO,GAAGuB,aAAa,CAACE,KAAd,CAAoB,GAApB,EAAyBD,MAAM,GAAG,CAAH,GAAO,CAAtC,CAAV;AACD,OAFD,MAEO,IAAIF,MAAM,CAACI,IAAP,KAAgB,KAApB,EAA2B;AAChC1B,QAAAA,OAAO,aAAMsB,MAAM,CAACtF,GAAb,SAAmB,SAASsF,MAAT,cAAsBA,MAAM,CAACK,GAA7B,IAAqC,EAAxD,CAAP;AACD,OAFM,MAEA,IAAIL,MAAM,CAACI,IAAP,KAAgB,OAApB,EAA6B;AAClC1B,QAAAA,OAAO,oBAAasB,MAAM,CAACM,IAApB,CAAP;AACD;;AACD,aAAO,CAACpC,IAAD,EAAO;AAAEJ,QAAAA,EAAF;AAAMY,QAAAA;AAAN,OAAP,CAAP;AACD,KAfe,CAAT,CAAP;AAgBD,GApbyB,CAsb1B;AACA;;;AACA6B,EAAAA,eAAe,CAACzC,EAAD,EAAKY,OAAL,EAAc;AAC3B7I,IAAAA,MAAM,CAACiI,EAAD,CAAN;AACAjI,IAAAA,MAAM,CAAC6I,OAAD,CAAN;AAEAtI,IAAAA,YAAY,CAACyC,WAAb;;AAEA,QAAI5C,KAAK,CAACuK,YAAN,CAAmB9B,OAAnB,CAAJ,EAAiC;AAC/B,aAAOnH,eAAe,CAACmH,OAAD,CAAtB;AACD,KAFD,MAEO,IAAIzI,KAAK,CAACwK,mBAAN,CAA0B/B,OAA1B,CAAJ,EAAwC;AAC7C;AACA;AACA,YAAMgC,UAAU,GAAG,KAAKC,sBAAL,CAA4BjC,OAA5B,CAAnB,CAH6C,CAI7C;AACA;AACA;;AACA,YAAMkC,IAAI,GAAG5K,KAAK,CAAC6K,UAAN,CAAiBH,UAAjB,CAAb;;AACA,UAAI,EAAEE,IAAI,IAAIA,IAAI,CAACE,WAAL,EAAV,CAAJ,EAAmC;AACjC1K,QAAAA,YAAY,CAACsH,KAAb,0CACL1H,KAAK,CAAC2C,eAAN,CAAsB+H,UAAtB,CADK,mDAE8B5C,EAF9B;AAGA,eAAO,IAAP;AACD;;AACD,aAAO9H,KAAK,CAAC2C,eAAN,CAAsB+H,UAAtB,CAAP;AACD,KAfM,MAeA;AACL,uBAAU5C,EAAV,cAAgBY,OAAhB;AACD;AACF,GAldyB,CAod1B;AACA;;;AACAiC,EAAAA,sBAAsB,CAACD,UAAD,EAAa;AACjCA,IAAAA,UAAU,GAAGA,UAAU,CAACK,MAAX,CAAkB,UAAUC,MAA5B,CAAb;;AACA,QAAI/K,KAAK,CAACgL,cAAN,CAAqBP,UAArB,CAAJ,EAAsC;AACpC,aAAO1K,KAAK,CAACkL,WAAN,CAAkB,KAAK9I,cAAL,CAAoB+I,UAAtC,EAAkDT,UAAlD,CAAP;AACD,KAFD,MAEO;AACL,aAAOA,UAAP;AACD;AACF;;AAEDU,EAAAA,SAAS,CAACtD,EAAD,EAAKY,OAAL,EAA2B;AAAA,QAAbnE,MAAa,uEAAJ,EAAI;AAClC,UAAM8G,MAAM,GAAG,KAAKd,eAAL,CAAqBzC,EAArB,EAAyBY,OAAzB,CAAf;;AACA,QAAI2C,MAAJ,EAAY;AACV,YAAMlF,cAAc,GAAGxG,CAAC,CAAC2L,MAAF,CAAS,KAAKlF,cAAd,EACrB;AAAEmF,QAAAA,aAAa,EAAEhH,MAAjB;AAAyBjF,QAAAA,IAAI,EAAEW,KAAK,CAACwK,mBAAN,CAA0B/B,OAA1B;AAA/B,OADqB,CAAvB;;AAGA,WAAK9D,WAAL,yBAAkCyG,MAAlC,0BACe5K,WAAW,CAAC+K,MAAZ,CAAmBC,IAAnB,CAAwB3G,SAAxB,EAAmC,KAAnC,EAA0C,CAACuG,MAAD,CAA1C,EAAoDlF,cAApD,CADf;AAED;AACF,GAxeyB,CA0e1B;;;AACAuF,EAAAA,aAAa,CAACC,OAAD,EAAU;AACrB,QAAIhM,CAAC,CAACiM,OAAF,CAAUD,OAAV,CAAJ,EAAwB;AACtB;AACD;;AAED,SAAK/G,WAAL,4BAAqC+G,OAArC,4BACmBlL,WAAW,CAAC+K,MAAZ,CAAmBC,IAAnB,CAAwB3G,SAAxB,EAAmC,IAAnC,EAAyC6G,OAAzC,EAAkD,KAAKvF,cAAvD,CADnB;AAED,GAlfyB,CAof1B;AACA;;;AACAR,EAAAA,4BAA4B,CAACH,cAAD,EAA4C;AAAA,QAA3BI,oBAA2B,uEAAJ,EAAI;AACtEhG,IAAAA,MAAM,CAAC4F,cAAD,CAAN;AAEArF,IAAAA,YAAY,CAAC4I,eAAb;AAEA5I,IAAAA,YAAY,CAACyL,QAAb,CAAsB;AAAEC,MAAAA,KAAK,EAAE;AAAT,KAAtB,EAA8D,MAAM;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACArG,MAAAA,cAAc,GAAGnE,qBAAqB,CAACmE,cAAD,CAAtC,CATkE,CAWlE;AACA;AACA;;AACA,WAAKsG,0BAAL,CAAgCtG,cAAhC;;AAEA,UAAIrF,YAAY,CAACgE,cAAb,EAAJ,EAAmC;AACjC;AACD,OAlBiE,CAoBlE;AACA;AACA;;;AACAyB,MAAAA,oBAAoB,GAAGlG,CAAC,CAAC6J,MAAF,CAAS7J,CAAC,CAAC8J,GAAF,CAAM5D,oBAAN,EAA4B,CAACtB,MAAD,EAASuD,EAAT,KAAgB;AAC1E,cAAMkE,KAAK,GAAG3K,WAAW,CAACyG,EAAD,CAAzB;;AACA,YAAIkE,KAAJ,EAAW;AACT9L,UAAAA,OAAO,CAACmH,IAAR;AACAnH,UAAAA,OAAO,CAAC+L,SAAR,0BAAoCnE,EAApC,kCAA8DkE,KAA9D;AAGA,iBAAO,CAACA,KAAD,EAAQzH,MAAR,CAAP;AACD,SAND,MAMO;AACL,iBAAO,CAACuD,EAAD,EAAKvD,MAAL,CAAP;AACD;AACF,OAX+B,CAAT,CAAvB;AAaA,YAAM6E,uBAAuB,GAC3B9H,qBAAqB,CAAC,KAAK2H,2BAAL,EAAD,CADvB,CApCkE,CAuClE;AACA;AACA;AACA;;AACA,UAAIiD,yBAAyB,GAAG,KAAhC,CA3CkE,CA6ClE;AACA;AACA;;AACA,YAAMC,oBAAoB,GAAG,EAA7B;;AACAxM,MAAAA,CAAC,CAACyM,IAAF,CAAO3G,cAAP,EAAuB,CAACiD,OAAD,EAAUZ,EAAV,KAAiB;AACtC;AACA,cAAMuE,qBAAqB,GAAGpM,KAAK,CAACwK,mBAAN,CAA0B/B,OAA1B,CAA9B;;AAEA,YAAI2D,qBAAJ,EAA2B;AACzBF,UAAAA,oBAAoB,CAACrE,EAAD,CAApB,GAA2BY,OAA3B;AACD,SAFD,MAEO;AACL,cAAI,CAAC/I,CAAC,CAAC2M,GAAF,CAAMlD,uBAAN,EAA+BtB,EAA/B,CAAD,IACFsB,uBAAuB,CAACtB,EAAD,CAAvB,KAAgCY,OADlC,EAC2C;AACzC;AACAwD,YAAAA,yBAAyB,GAAG,IAA5B;AACAhM,YAAAA,OAAO,CAACwD,KAAR,kBAAwBoE,EAAxB;AAED;AACF;AACF,OAfD;;AAiBA,YAAMyE,sBAAsB,GAAGC,MAAM,CAACC,IAAP,CAAY,KAAKxD,2BAAL,CAAiC,IAAjC,CAAZ,CAA/B,CAlEkE,CAoElE;AACA;;AACA,UAAI,CAACiD,yBAAL,EAAgC;AAC9B;AACA;AACA;AACA,cAAMQ,eAAe,GAAG1M,KAAK,CAACyC,QAAN,CAAe,KAAKD,UAApB,EAAgC,cAAhC,CAAxB;AACA,cAAMmK,WAAW,GAAG3M,KAAK,CAACyC,QAAN,CAAe,KAAKD,UAApB,EAAgC,UAAhC,CAApB;AAEA,cAAMoK,WAAW,GAAG5M,KAAK,CAAC8C,MAAN,CAAa4J,eAAb,IAAgCvH,IAAI,CAAC2E,KAAL,CAAW9J,KAAK,CAAC+J,QAAN,CAC7D2C,eAD6D,EAC5C,MAD4C,CAAX,CAAhC,GACU;AAAEG,UAAAA,iBAAiB,EAAE;AAArB,SAD9B;AAEA,cAAMC,OAAO,GAAG9M,KAAK,CAAC8C,MAAN,CAAa6J,WAAb,IAA4BxH,IAAI,CAAC2E,KAAL,CAAW9J,KAAK,CAAC+J,QAAN,CACrD4C,WADqD,EACxC,MADwC,CAAX,CAA5B,GACU;AAAEE,UAAAA,iBAAiB,EAAE;AAArB,SAD1B;;AAGA,YAAIE,0BAA0B,GAAGpN,CAAC,CAACqN,KAAF,CAC/BR,MAAM,CAACC,IAAP,CAAYG,WAAW,CAACC,iBAAxB,CAD+B,EACaL,MAAM,CAACC,IAAP,CAAYK,OAAO,CAACD,iBAApB,CADb,CAAjC,CAZ8B,CAe9B;AACA;;;AACA,cAAMI,OAAO,GAAG,KAAK1D,yBAAL,EAAhB;AACAwD,QAAAA,0BAA0B,GAAGA,0BAA0B,CAACtD,GAA3B,CAA+BvB,IAAI,IAAI;AAClE,iBAAO+E,OAAO,CAAC/E,IAAD,CAAP,CAAcJ,EAArB;AACD,SAF4B,CAA7B;AAIAiF,QAAAA,0BAA0B,CAACG,OAA3B,CAAmCpF,EAAE,IAAI;AACvC,cAAI,CAACnI,CAAC,CAAC2M,GAAF,CAAM7G,cAAN,EAAsBqC,EAAtB,CAAL,EAAgC;AAC9B5H,YAAAA,OAAO,CAACwD,KAAR,kBAAwBoE,EAAxB;AAEAoE,YAAAA,yBAAyB,GAAG,IAA5B;AACD;AACF,SAND;AAOD;;AAED,UAAI,CAACvM,CAAC,CAACiM,OAAF,CAAUO,oBAAV,CAAD,IAAoC,CAACD,yBAAzC,EAAoE;AAClEhM,QAAAA,OAAO,CAACwD,KAAR,CAAc,wDAAd;AACD,OAvGiE,CAyGlE;AACA;;;AACA,UAAIwI,yBAAyB,IAAI,CAACvM,CAAC,CAACiM,OAAF,CAAUO,oBAAV,CAAlC,EAAmE;AACjE,YAAIgB,eAAJ;;AACA,YAAIjB,yBAAJ,EAA+B;AAC7BiB,UAAAA,eAAe,GAAGZ,sBAAlB;AACD,SAFD,MAEO;AACL;AACAY,UAAAA,eAAe,GAAGxN,CAAC,CAACyN,YAAF,CAChBZ,MAAM,CAACC,IAAP,CAAYN,oBAAZ,CADgB,EAEhBK,MAAM,CAACC,IAAP,CAAYrD,uBAAZ,CAFgB,CAAlB;AAGD;;AAED,aAAKsC,aAAL,CAAmByB,eAAnB;AAEA,YAAIE,uBAAJ,CAbiE,CAejE;;AACA,YAAInB,yBAAJ,EAA+B;AAC7BmB,UAAAA,uBAAuB,GAAG5H,cAA1B;AACD,SAFD,MAEO;AACL4H,UAAAA,uBAAuB,GAAGlB,oBAA1B;AACD;;AAED,cAAMmB,qBAAqB,GAAG3N,CAAC,CAAC4N,IAAF,CAAOF,uBAAP,CAA9B;;AACA,YAAIG,qBAAqB,GAAG,CAA5B;AAEApN,QAAAA,YAAY,CAACqN,cAAb,CAA4B;AAAEC,UAAAA,OAAO,EAAE,CAAX;AAAcC,UAAAA,GAAG,EAAEL;AAAnB,SAA5B;;AACA3N,QAAAA,CAAC,CAACyM,IAAF,CAAOiB,uBAAP,EAAgC,CAAC3E,OAAD,EAAUZ,EAAV,KAAiB;AAC/C,eAAKsD,SAAL,CAAetD,EAAf,EAAmBY,OAAnB,EAA4B7C,oBAAoB,CAACiC,EAAD,CAAhD;AAEA1H,UAAAA,YAAY,CAACqN,cAAb,CAA4B;AAC1BC,YAAAA,OAAO,EAAE,EAAEF,qBADe;AAE1BG,YAAAA,GAAG,EAAEL;AAFqB,WAA5B;AAID,SAPD;;AASA,aAAKM,0BAAL,CAAgCP,uBAAhC,EAAyDxH,oBAAzD,EAA+E,IAA/E;AACD;AACF,KAhJD;AAiJD,GA5oByB,CA8oB1B;;;AACA+H,EAAAA,0BAA0B,CAACC,eAAD,EAAkBhI,oBAAlB,EAAwCiI,YAAxC,EAAsD;AAC9E;AACA;AACA;AACA;AACA;AACA,UAAM7F,SAAS,GAAG,KAAKgB,2BAAL,EAAlB;AACA,UAAM8E,qBAAqB,GAAGvB,MAAM,CAACC,IAAP,CAAYxE,SAAZ,CAA9B;AACA,UAAM+F,wBAAwB,GAAGxB,MAAM,CAACyB,MAAP,CAAchG,SAAd,CAAjC;AACA,UAAMiG,cAAc,GAAG,EAAvB;AAEA1B,IAAAA,MAAM,CAACC,IAAP,CAAYoB,eAAZ,EAA6BM,MAA7B,CAAoC3C,MAAM,IAAI;AAC5C,UAAI,CAACuC,qBAAqB,CAACK,QAAtB,CAA+B5C,MAA/B,CAAL,EAA6C;AAC3CtL,QAAAA,OAAO,CAACwD,KAAR,kBAAwB8H,MAAxB;;AACA,YAAIsC,YAAJ,EAAkB;AAChB5N,UAAAA,OAAO,CAACwD,KAAR,+BAAqC8H,MAArC;AACA,eAAKJ,SAAL,CACEI,MADF,EAEEqC,eAAe,CAACrC,MAAD,CAFjB,EAGE3F,oBAAoB,CAAC2F,MAAD,CAHtB;AAKD;;AACD0C,QAAAA,cAAc,CAAC1C,MAAD,CAAd,GAAyBqC,eAAe,CAACrC,MAAD,CAAxC;AACD;AACF,KAbD,EAX8E,CA0B9E;;AACA,QAAIgB,MAAM,CAACC,IAAP,CAAYyB,cAAZ,EAA4BlD,MAA5B,KAAuC,CAA3C,EAA8C;AAC5C;AACD,KA7B6E,CA+B9E;;;AACA,QAAI8C,YAAJ,EAAkB;AAChB,WAAKF,0BAAL,CAAgCM,cAAhC,EAAgDrI,oBAAhD,EAAsE,KAAtE;AACD,KAFD,MAEO;AACL;AACA,YAAM,IAAIwI,KAAJ,sDAAwD7B,MAAM,CAACC,IAAP,CAAYyB,cAAZ,EAA4BI,IAA5B,CAAiC,IAAjC,CAAxD,QAAN;AACD;AACF;;AAEDvC,EAAAA,0BAA0B,CAACtG,cAAD,EAAiB;AACzC5F,IAAAA,MAAM,CAAC4F,cAAD,CAAN;;AAEA9F,IAAAA,CAAC,CAACyM,IAAF,CAAO3G,cAAP,EAAuB,CAACiD,OAAD,EAAUZ,EAAV,KAAiB;AACtC;AACA,UAAI7H,KAAK,CAACuK,YAAN,CAAmB9B,OAAnB,KAA+BzI,KAAK,CAACwK,mBAAN,CAA0B/B,OAA1B,CAAnC,EAAuE;AACrE;AACD;;AAED,YAAMvF,aAAa,GAAGjB,oBAAoB,CAAC4F,EAAD,CAA1C;;AAEA,UAAI3E,aAAa,IAAIpD,MAAM,CAAC0D,EAAP,CAAUiF,OAAV,EAAmBvF,aAAnB,CAArB,EAAwD;AACtDjD,QAAAA,OAAO,CAAC+L,SAAR,wCAAkDnE,EAAlD,cAAwDY,OAAxD,uDAC8BvF,aAD9B;AAIAsC,QAAAA,cAAc,CAACqC,EAAD,CAAd,GAAqB3E,aAArB;AACD;AACF,KAfD;AAgBD,GA1sByB,CA4sB1B;;;AAEA,MAAIiD,cAAJ,GAAqB;AACnB,WAAO;AACLmI,MAAAA,MAAM,EAAE,CAACrO,OAAO,CAAC0B,OADZ;AAELA,MAAAA,OAAO,EAAE1B,OAAO,CAAC0B,OAFZ;AAGL4M,MAAAA,WAAW,EAAE,KAAK9L;AAHb,KAAP;AAKD;;AAEDoE,EAAAA,wBAAwB,GAAgB;AACtC,QAAI2H,KAAK,GAAI,KAAKC,YAAL,IAAqB,EAAlC;AACAD,IAAAA,KAAK,CAACE,OAAN,CAAc,YAAd;AACA,UAAM9H,GAAG,GAAG7G,KAAK,CAAC4O,wBAAN,CAA+B,GAAGH,KAAlC,CAAZ;AACA,WAAO5H,GAAP;AACD;;AAED,MAAI6H,YAAJ,GAAmB;AACjB,UAAMG,UAAU,GAAG7O,KAAK,CAAC8O,oBAAN,EAAnB,CADiB,CAGjB;;AACA,UAAMC,aAAa,GACjB/O,KAAK,CAACyC,QAAN,CAAezC,KAAK,CAACgP,YAAN,EAAf,EACA,8BADA,CADF;AAIA,WAAO,CAACH,UAAD,EAAaE,aAAb,CAAP;AACD;;AAEDnK,EAAAA,WAAW,CAACkH,KAAD,EAAQmD,sBAAR,EACe;AAAA,QADiBpI,GACjB,uEADuB,KAAKC,wBAAL,EACvB;AAAA,QAAxBE,GAAwB,uEAAlB,KAAK1E,WAAa;AACxB;AACApC,IAAAA,OAAO,CAACwD,KAAR,CAAcoI,KAAK,CAAC,CAAD,CAAL,CAASoD,WAAT,KAAyBpD,KAAK,CAACqD,KAAN,CAAY,CAAZ,CAAvC;AAEA,UAAMC,MAAM,GAAGhI,OAAO,CAACJ,GAAR,EAAf;;AACA,QAAIA,GAAJ,EAAS;AACPI,MAAAA,OAAO,CAACiI,KAAR,CAAcrP,KAAK,CAAC2C,eAAN,CAAsBqE,GAAtB,CAAd;AACD;;AAED,UAAMsI,MAAM,GAAGlI,OAAO,CAACP,GAAvB;;AACA,QAAIA,GAAJ,EAAS;AACP;AACA2F,MAAAA,MAAM,CAACC,IAAP,CAAY5F,GAAZ,EAAiBqG,OAAjB,CAAyBqC,GAAG,IAAI;AAC9BnI,QAAAA,OAAO,CAACP,GAAR,CAAY0I,GAAZ,IAAmB1I,GAAG,CAAC0I,GAAD,CAAtB;AACD,OAFD;AAGD;;AAED,QAAI;AACF,YAAMC,OAAO,GAAI,OAAOP,sBAAP,KAAkC,UAAnC,GACdA,sBAAsB,EADR,GACaA,sBAD7B;AAEA,aAAOQ,OAAO,CAACC,KAAR,CAAcF,OAAd,CAAP;AACD,KAJD,CAIE,OAAO9H,KAAP,EAAc;AACdxH,MAAAA,OAAO,CAACyP,UAAR,CAAmB,oCAAnB;AACAzP,MAAAA,OAAO,CAACwH,KAAR;AACA,YAAMkI,cAAc,GAAG1P,OAAO,CAACmC,OAAR,CAAgB;AAAEwN,QAAAA,MAAM,EAAE;AAAV,OAAhB,CAAvB;AACA3P,MAAAA,OAAO,CAACwH,KAAR,iBAAuBoE,KAAvB,QAAiC8D,cAAjC;;AAEA,UAAIlI,KAAK,YAAY/G,YAArB,EAAmC;AACjC;AACA;AACA;AACA;AACA,cAAMmP,YAAY,GAAG5P,OAAO,CAAC0B,OAAR,GAAmB8F,KAAK,CAACqI,KAAN,IAAerI,KAAK,CAACC,OAAxC,GACnBD,KAAK,CAACC,OADR;AAEAzH,QAAAA,OAAO,CAACwH,KAAR,0BAAgCoI,YAAhC,GAAgDF,cAAhD;AACA1P,QAAAA,OAAO,CAACwH,KAAR,CAAc5H,KAAK,CAACkQ,KAAN,kMAAd,EAGEJ,cAHF;AAID,OAZD,MAYO;AACL;AACA;AACA,cAAME,YAAY,GAAGpI,KAAK,IAAIA,KAAK,CAACqI,KAAf,IAAwBrI,KAA7C;AACAxH,QAAAA,OAAO,CAACwH,KAAR,CAAcoI,YAAd,EAA4BF,cAA5B;AACD;;AAAA;AACD,YAAM,IAAIvP,IAAI,CAAC4P,YAAT,CAAsB,CAAtB,CAAN;AACD,KA7BD,SA6BU;AACR,UAAIjJ,GAAG,IAAIoI,MAAX,EAAmB;AACjBhI,QAAAA,OAAO,CAACiI,KAAR,CAAcD,MAAd;AACD;;AACD,UAAIvI,GAAG,IAAIyI,MAAX,EAAmB;AACjBlI,QAAAA,OAAO,CAACP,GAAR,GAAcyI,MAAd;AACD;AACF;AACF;;AA/xByB;;AAkyB5B,MAAMY,GAAG,GAAGxQ,cAAc,CAACyQ,SAA3B;AACA,CAAC,sBAAD,EACC,oBADD,EAEC,kBAFD,EAGEjD,OAHF,CAGUhF,IAAI,IAAI;AAChBgI,EAAAA,GAAG,CAAChI,IAAD,CAAH,GAAY/H,OAAO,CAACiD,QAAQ,IAAI;AAC9B,UAAMgN,MAAM,4BAAqBlI,IAArB,CAAZ;AACA,WAAOA,IAAI,CAACmI,QAAL,CAAc,aAAd,cAAkCD,MAAlC,kBACLjP,sBAAsB,CAACiC,QAAD,CADjB,IAEFgN,MAFL;AAGD,GALkB,EAKhBF,GAAG,CAAChI,IAAD,CALa,CAAnB;AAMD,CAVD","sourcesContent":["import _ from 'underscore';\nimport util from 'util';\nimport assert from 'assert';\nimport chalk from 'chalk';\nimport semver from 'semver';\n\nimport files from '../fs/files';\nimport utils from '../utils/utils.js';\nimport { Console } from '../console/console.js';\nimport { Profile } from '../tool-env/profile';\nimport buildmessage from '../utils/buildmessage.js';\nimport main from '../cli/main.js';\nimport httpHelpers from '../utils/http-helpers.js';\nimport { execFileSync, execFileAsync } from '../utils/processes';\n\nimport './protect-string-proto.js'; // must always come before 'cordova-lib'\nimport { cordova as cordova_lib, events as cordova_events, CordovaError }\n  from 'cordova-lib';\nimport cordova_util from 'cordova-lib/src/cordova/util.js';\nimport superspawn from 'cordova-common/src/superspawn.js';\nimport PluginInfoProvider from 'cordova-common/src/PluginInfo/PluginInfoProvider.js';\n\nimport { CORDOVA_PLATFORMS, CORDOVA_PLATFORM_VERSIONS, displayNameForPlatform, displayNamesForPlatforms,\n  newPluginId, convertPluginVersions, convertToGitUrl } from './index.js';\nimport { CordovaBuilder } from './builder.js';\n\ncordova_events.on('verbose', logIfVerbose);\ncordova_events.on('log', logIfVerbose);\ncordova_events.on('info', logIfVerbose);\ncordova_events.on('warn', log);\ncordova_events.on('error', log);\n\ncordova_events.on('results', logIfVerbose);\n\nfunction logIfVerbose(...args) {\n  if (Console.verbose) {\n    log(...args);\n  }\n};\n\nfunction log(...args) {\n  Console.rawInfo(`%% ${util.format.apply(null, args)}\\n`);\n}\n\n// We pin platform versions ourselves instead of relying on cordova-lib\n// so we we can update them independently (e.g. use Cordova iOS 4.0.1\n// with Cordova 5.4.1)\nconst pinnedPlatformVersions = CORDOVA_PLATFORM_VERSIONS;\n\n// We pin plugin versions to make sure we do not install versions that are\n// incompatible with the current platform versions.\n// Versions are taken from cordova-lib's package.json and should be updated\n// when we update to a newer version of cordova-lib.\nconst pinnedPluginVersions = {\n  \"cordova-plugin-battery-status\": \"1.2.4\",\n  \"cordova-plugin-camera\": \"2.4.1\",\n  \"cordova-plugin-console\": \"1.1.0\", // Deprecated, remove in future\n  \"cordova-plugin-contacts\": \"2.3.1\",\n  \"cordova-plugin-device\": \"1.1.6\",\n  \"cordova-plugin-device-motion\": \"2.0.0\", // Deprecated, remove in future\n  \"cordova-plugin-device-orientation\": \"2.0.0\", // Deprecated, remove in future\n  \"cordova-plugin-dialogs\": \"1.3.3\",\n  \"cordova-plugin-file\": \"4.3.3\",\n  \"cordova-plugin-file-transfer\": \"1.6.3\",\n  \"cordova-plugin-geolocation\": \"2.4.3\",\n  \"cordova-plugin-globalization\": \"1.0.7\",\n  \"cordova-plugin-inappbrowser\": \"1.7.1\",\n  \"cordova-plugin-legacy-whitelist\": \"1.1.2\",\n  \"cordova-plugin-media\": \"3.0.1\",\n  \"cordova-plugin-media-capture\": \"1.4.3\",\n  \"cordova-plugin-network-information\": \"1.3.3\",\n  \"cordova-plugin-splashscreen\": \"4.1.0\",\n  \"cordova-plugin-statusbar\": \"2.3.0\",\n  \"cordova-plugin-test-framework\": \"1.1.5\",\n  \"cordova-plugin-vibration\": \"2.1.5\",\n  \"cordova-plugin-whitelist\": \"1.3.2\",\n  \"cordova-plugin-wkwebview-engine\": \"1.1.3\"\n}\n\nexport class CordovaProject {\n  constructor(projectContext, options = {}) {\n\n    this.projectContext = projectContext;\n\n    this.projectRoot = projectContext.getProjectLocalDirectory('cordova-build');\n    this.options = options;\n\n    this.pluginsDir = files.pathJoin(this.projectRoot, 'plugins');\n\n    this.buildJsonPath = files.convertToOSPath(\n      files.pathJoin(this.projectRoot, 'build.json'));\n\n    this.createIfNeeded();\n  }\n\n  createIfNeeded() {\n    buildmessage.assertInJob();\n\n    // Check if we have an existing Cordova project directory with outdated\n    // platforms. In that case, we remove the whole directory to avoid issues.\n    if (files.exists(this.projectRoot)) {\n      const installedPlatforms = this.listInstalledPlatforms();\n\n      const outdated = _.some(pinnedPlatformVersions, (pinnedVersion, platform) => {\n        // If the platform is not installed, it cannot be outdated\n        if (!_.contains(installedPlatforms, platform)) {\n          return false;\n        }\n\n        const installedVersion = this.installedVersionForPlatform(platform);\n        // If we cannot establish the installed version, we consider it outdated\n        if (!installedVersion) {\n          return true;\n        }\n\n        if (! semver.valid(pinnedVersion)) {\n          // If pinnedVersion is not a semantic version but instead\n          // something like a GitHub tarball URL, assume not outdated.\n          return false;\n        }\n\n        return semver.lt(installedVersion, pinnedVersion);\n      });\n\n      if (outdated) {\n        Console.debug(`Removing Cordova project directory to avoid issues with\noutdated platforms`);\n        // Remove Cordova project directory to start afresh\n        // and avoid a broken project\n        files.rm_recursive(this.projectRoot);\n      }\n    }\n\n    if (!files.exists(this.projectRoot)) {\n      // We create a temporary directory with a generated config.xml\n      // to use as a template for creating the Cordova project\n      // This way, we are not dependent on the contents of\n      // cordova-app-hello-world but we base our initial project state on\n      // our own defaults and optionally a mobile-config.js\n\n      const templatePath = files.mkdtemp('cordova-template-');\n\n      // If we don't create an empty hooks directory, cordova-lib will attempt\n      // to install one from a hardcoded path to cordova-app-hello-world\n      files.mkdir_p(files.pathJoin(templatePath, 'hooks'));\n\n      // If we don't create an empty www directory, cordova-lib will get\n      // confused\n      files.mkdir_p(files.pathJoin(templatePath, 'www'));\n\n      const builder = new CordovaBuilder(\n        this.projectContext,\n        templatePath,\n        { mobileServerUrl: this.options.mobileServerUrl,\n          cordovaServerPort: this.options.cordovaServerPort,\n          settingsFile: this.options.settingsFile }\n      );\n\n      builder.processControlFile();\n\n      if (buildmessage.jobHasMessages()) {\n        return;\n      }\n\n      // Don't copy resources (they will be copied as part of the prepare)\n      builder.writeConfigXmlAndCopyResources(false);\n\n      // Create the Cordova project root directory\n      files.mkdir_p(files.pathDirname(this.projectRoot));\n\n      const config = {\n        lib: {\n          www: {\n            url: files.convertToOSPath(templatePath),\n            template: true\n          }\n        }\n      };\n\n      // Don't set cwd to project root in runCommands because it doesn't\n      // exist yet\n      this.runCommands('creating Cordova project', async () => {\n        // No need to pass in appName and appId because these are set from\n        // the generated config.xml\n        await cordova_lib.create(files.convertToOSPath(this.projectRoot),\n          undefined, undefined, config);\n      }, undefined, null);\n    }\n\n    this.writeBuildJson();\n  }\n\n  writeBuildJson() {\n    if (files.exists(this.buildJsonPath)) {\n      return;\n    }\n\n    const iosCommonOptions = {\n      // See https://github.com/apache/cordova-ios/issues/407:\n      buildFlag: [\n        \"-UseModernBuildSystem=0\"\n      ]\n    };\n\n    files.writeFile(\n      this.buildJsonPath,\n      JSON.stringify({\n        ios: {\n          debug: iosCommonOptions,\n          release: iosCommonOptions,\n        }\n      }, null, 2) + \"\\n\",\n    );\n  }\n\n  // Preparing\n\n  prepareFromAppBundle(bundlePath, pluginVersions) {\n    assert(bundlePath);\n    assert(pluginVersions);\n\n    buildmessage.assertInJob();\n\n    Console.debug('Preparing Cordova project from app bundle');\n\n    const builder = new CordovaBuilder(\n      this.projectContext,\n      this.projectRoot,\n      { mobileServerUrl: this.options.mobileServerUrl,\n        cordovaServerPort: this.options.cordovaServerPort,\n        settingsFile: this.options.settingsFile }\n    );\n\n    builder.processControlFile();\n\n    if (buildmessage.jobHasMessages()) {\n      return;\n    }\n\n    builder.writeConfigXmlAndCopyResources();\n    builder.copyWWW(bundlePath);\n\n    this.ensurePlatformsAreSynchronized();\n    this.ensurePluginsAreSynchronized(pluginVersions,\n      builder.pluginsConfiguration);\n\n    // Temporary workaround for Cordova iOS bug until\n    // https://issues.apache.org/jira/browse/CB-10885 is fixed\n    const iosBuildExtrasPath =\n      files.pathJoin(\n        this.projectRoot,\n        'platforms/ios/cordova/build-extras.xcconfig');\n\n    if (files.exists(iosBuildExtrasPath)) {\n      files.writeFile(\n        iosBuildExtrasPath,\n        'LD_RUNPATH_SEARCH_PATHS = @executable_path/Frameworks;');\n    }\n\n    builder.copyBuildOverride();\n  }\n\n  prepareForPlatform(platform) {\n    assert(platform);\n\n    // Temporary workaround for Cordova iOS bug until\n    // https://issues.apache.org/jira/browse/CB-11731 has been released\n    delete require.cache[files.pathJoin(this.projectRoot,\n      'platforms/ios/cordova/lib/configMunger.js')];\n    delete require.cache[files.pathJoin(this.projectRoot,\n      'platforms/ios/cordova/lib/prepare.js')];\n\n    const commandOptions = {\n      ...this.defaultOptions,\n      platforms: [platform],\n    };\n\n    this.runCommands(`preparing Cordova project for platform \\\n${displayNameForPlatform(platform)}`, async () => {\n      await cordova_lib.prepare(commandOptions);\n    });\n  }\n\n  // Building (includes prepare)\n\n  buildForPlatform(platform, options = {}, extraPaths) {\n    assert(platform);\n\n    const commandOptions = {\n      ...this.defaultOptions,\n      platforms: [platform],\n      options,\n    };\n\n    this.runCommands(`building Cordova app for platform \\\n${displayNameForPlatform(platform)}`, async () => {\n      await cordova_lib.build(commandOptions);\n    });\n  }\n\n  // Running\n\n  async run(platform, isDevice, options = [], extraPaths = []) {\n    options.push('--buildConfig', this.buildJsonPath);\n    options.push(isDevice ? '--device' : '--emulator');\n\n    let env = this.defaultEnvWithPathsAdded(...extraPaths);\n\n    let command = files.convertToOSPath(files.pathJoin(\n      this.projectRoot, 'platforms', platform, 'cordova', 'run'));\n\n    this.runCommands(`running Cordova app for platform \\\n${displayNameForPlatform(platform)} with options ${options}`,\n    execFileAsync(command, options, {\n      env: env,\n      cwd: this.projectRoot,\n      stdio: Console.verbose ? 'inherit' : 'pipe',\n      waitForClose: false\n    }), null, null);\n  }\n\n  // Platforms\n\n  // Checks to see if the requirements for building and running on the\n  // specified Cordova platform are satisfied, printing\n  // installation instructions when needed.\n  checkPlatformRequirements(platform) {\n    if (platform === 'ios' && process.platform !== 'darwin') {\n      Console.warn(\"Currently, it is only possible to build iOS apps \\\non an OS X system.\");\n      return false;\n    }\n\n    const installedPlatforms = this.listInstalledPlatforms();\n\n    const inProject = _.contains(installedPlatforms, platform);\n    if (!inProject) {\n      Console.warn(`Please add the ${displayNameForPlatform(platform)} \\\nplatform to your project first.`);\n      Console.info(`Run: ${Console.command(`meteor add-platform ${platform}`)}`);\n      return false;\n    }\n\n    const allRequirements = this.runCommands(`checking Cordova \\\nrequirements for platform ${displayNameForPlatform(platform)}`,\n      async () => {\n        return await cordova_lib.requirements([platform],\n          this.defaultOptions);\n      });\n    let requirements = allRequirements && allRequirements[platform];\n    if (!requirements) {\n      Console.error(`Failed to check requirements for platform \\\n${displayNameForPlatform(platform)}`);\n      return false;\n    } else if (requirements instanceof CordovaError) {\n      Console.error(`Cordova error: ${requirements.message}`);\n      return false;\n    }\n\n    // We don't use ios-deploy, but open Xcode to run on a device instead\n    requirements = _.reject(requirements,\n      requirement => requirement.id === 'ios-deploy');\n\n    const satisfied = _.every(requirements,\n      requirement => requirement.installed);\n\n    if (!satisfied) {\n      Console.info();\n      Console.info(`Your system does not yet seem to fulfill all requirements \\\nto build apps for ${displayNameForPlatform(platform)}.`);\n\n      Console.info();\n      Console.info(\"Please follow the installation instructions in the mobile guide:\");\n      Console.info(Console.url(\"http://guide.meteor.com/mobile.html#installing-prerequisites\"));\n\n      Console.info();\n\n      Console.info(\"Status of the individual requirements:\");\n      for (const requirement of requirements) {\n        const name = requirement.name;\n        if (requirement.installed) {\n          Console.success(name, \"installed\");\n        } else {\n          const reason = requirement.metadata && requirement.metadata.reason;\n          if (reason) {\n            Console.failInfo(`${name}: ${reason}`);\n          } else {\n            Console.failInfo(name);\n          }\n        }\n      }\n    }\n    return satisfied;\n  }\n\n  listInstalledPlatforms() {\n    return cordova_util.listPlatforms(files.convertToOSPath(this.projectRoot));\n  }\n\n  installedVersionForPlatform(platform) {\n    const command = files.convertToOSPath(files.pathJoin(\n      this.projectRoot, 'platforms', platform, 'cordova', 'version'));\n    // Make sure the command exists before trying to execute it\n    if (files.exists(command)) {\n      return this.runCommands(\n        `getting installed version for platform ${platform} in Cordova project`,\n        execFileSync(command, {\n          env: this.defaultEnvWithPathsAdded(),\n          cwd: this.projectRoot}), null, null);\n    } else {\n      return null;\n    }\n  }\n\n  updatePlatforms(platforms = this.listInstalledPlatforms()) {\n    this.runCommands(`updating Cordova project for platforms \\\n${displayNamesForPlatforms(platforms)}`, async () => {\n      await cordova_lib.platform('update', platforms, this.defaultOptions);\n    });\n  }\n\n  addPlatform(platform) {\n    this.runCommands(`adding platform ${displayNameForPlatform(platform)} \\\nto Cordova project`, async () => {\n      let version = pinnedPlatformVersions[platform];\n      let platformSpec = version ? `${platform}@${version}` : platform;\n      await cordova_lib.platform('add', platformSpec, this.defaultOptions);\n    });\n  }\n\n  removePlatform(platform) {\n    this.runCommands(`removing platform ${displayNameForPlatform(platform)} \\\nfrom Cordova project`, async () => {\n      await cordova_lib.platform('rm', platform, this.defaultOptions);\n    });\n  }\n\n  get cordovaPlatformsInApp() {\n    return this.projectContext.platformList.getCordovaPlatforms();\n  }\n\n  // Ensures that the Cordova platforms are synchronized with the app-level\n  // platforms.\n  ensurePlatformsAreSynchronized(platforms = this.cordovaPlatformsInApp) {\n    buildmessage.assertInCapture();\n\n    const installedPlatforms = this.listInstalledPlatforms();\n\n    for (let platform of platforms) {\n      if (_.contains(installedPlatforms, platform)) {\n        continue;\n      }\n\n      this.addPlatform(platform);\n    }\n\n    for (let platform of installedPlatforms) {\n      if (!_.contains(platforms, platform) &&\n        _.contains(CORDOVA_PLATFORMS, platform)) {\n        this.removePlatform(platform);\n      }\n    }\n  }\n\n  // Plugins\n\n  // Because PluginInfoProvider reads in the plugin versions from\n  // their plugin.xml, that only gives us the declared version and doesn't\n  // tell us if plugins have been fetched from a Git SHA URL or a local path.\n  // So we overwrite the declared versions with versions from\n  // listFetchedPluginVersions that do contain this information.\n  listInstalledPluginVersions(usePluginInfoId = false) {\n    const pluginInfoProvider = new PluginInfoProvider();\n    const installedPluginVersions = pluginInfoProvider.getAllWithinSearchPath(\n      files.convertToOSPath(this.pluginsDir));\n    const fetchedPluginVersions = this.listFetchedPluginVersions();\n    return _.object(installedPluginVersions.map(pluginInfo => {\n      const fetchedPlugin = fetchedPluginVersions[pluginInfo.id];\n      const id = fetchedPlugin.id;\n      const version = fetchedPlugin.version || pluginInfo.version;\n      return [usePluginInfoId ? pluginInfo.id : id, version];\n    }));\n  }\n\n  // There is no Cordova function to get the fetched plugin versions, so we\n  // have to read in fetch.json (a file managed by plugman, a semi-independent\n  // part of cordova-lib) and parse the format ourselves into a version\n  // string suitable to be passed to targetForPlugin.\n  // Note that a plugin can be fetched but not installed, so that's why we\n  // still need a separate listInstalledPluginVersions.\n  listFetchedPluginVersions() {\n    const fetchJsonPath = files.pathJoin(this.pluginsDir, 'fetch.json');\n\n    if (!files.exists(fetchJsonPath)) {\n      return {};\n    }\n\n    const fetchedPluginsMetadata = JSON.parse(files.readFile(\n      fetchJsonPath, 'utf8'));\n    return _.object(_.map(fetchedPluginsMetadata, (metadata, name) => {\n      const source = metadata.source;\n\n      const idWithVersion = source.id ? source.id : name;\n      const scoped = idWithVersion[0] === '@';\n      const id = `${scoped ? '@' : ''}${idWithVersion.split('@')[scoped ? 1 : 0]}`;\n      let version;\n      if (source.type === 'registry') {\n        version = idWithVersion.split('@')[scoped ? 2 : 1];\n      } else if (source.type === 'git') {\n        version = `${source.url}${'ref' in source ? `#${source.ref}` : ''}`;\n      } else if (source.type === 'local') {\n        version = `file://${source.path}`;\n      }\n      return [name, { id, version }];\n    }));\n  }\n\n  // Construct a target suitable for 'cordova plugin add' from an id and\n  // version, converting or resolving a URL or path where needed.\n  targetForPlugin(id, version) {\n    assert(id);\n    assert(version);\n\n    buildmessage.assertInJob();\n\n    if (utils.isUrlWithSha(version)) {\n      return convertToGitUrl(version);\n    } else if (utils.isUrlWithFileScheme(version)) {\n      // Strip file:// and resolve the path relative to the cordova-build\n      // directory\n      const pluginPath = this.resolveLocalPluginPath(version);\n      // We need to check if the directory exists ourselves because Cordova\n      // will try to install from npm (and fail with an unhelpful error message)\n      // if the directory is not found\n      const stat = files.statOrNull(pluginPath);\n      if (!(stat && stat.isDirectory())) {\n        buildmessage.error(`Couldn't find local directory \\\n'${files.convertToOSPath(pluginPath)}' \\\n(while attempting to install plugin ${id}).`);\n        return null;\n      }\n      return files.convertToOSPath(pluginPath);\n    } else {\n      return `${id}@${version}`;\n    }\n  }\n\n  // Strips file:// and resolves the path relative to the cordova-build\n  // directory\n  resolveLocalPluginPath(pluginPath) {\n    pluginPath = pluginPath.substr(\"file://\".length);\n    if (utils.isPathRelative(pluginPath)) {\n      return files.pathResolve(this.projectContext.projectDir, pluginPath);\n    } else {\n      return pluginPath;\n    }\n  }\n\n  addPlugin(id, version, config = {}) {\n    const target = this.targetForPlugin(id, version);\n    if (target) {\n      const commandOptions = _.extend(this.defaultOptions,\n        { cli_variables: config, link: utils.isUrlWithFileScheme(version) });\n\n      this.runCommands(`adding plugin ${target} \\\nto Cordova project`, cordova_lib.plugin.bind(undefined, 'add', [target], commandOptions));\n    }\n  }\n\n  // plugins is an array of plugin IDs.\n  removePlugins(plugins) {\n    if (_.isEmpty(plugins)) {\n      return;\n    }\n\n    this.runCommands(`removing plugins ${plugins} \\\nfrom Cordova project`, cordova_lib.plugin.bind(undefined, 'rm', plugins, this.defaultOptions));\n  }\n\n  // Ensures that the Cordova plugins are synchronized with the app-level\n  // plugins.\n  ensurePluginsAreSynchronized(pluginVersions, pluginsConfiguration = {}) {\n    assert(pluginVersions);\n\n    buildmessage.assertInCapture();\n\n    buildmessage.enterJob({ title: \"installing Cordova plugins\"}, () => {\n      // Cordova plugin IDs have changed as part of moving to npm.\n      // We convert old plugin IDs to new IDs in the 1.2.0-cordova-changes\n      // upgrader and when adding plugins, but packages may still depend on\n      // the old IDs.\n      // To avoid attempts at duplicate installation, we check for old IDs here\n      // and convert them to new IDs when needed. We also convert old-style GitHub\n      // tarball URLs to new Git URLs, and check if other Git URLs contain a\n      // SHA reference.\n      pluginVersions = convertPluginVersions(pluginVersions);\n\n      // To ensure we do not attempt to install plugin versions incompatible\n      // with the current platform versions, we compare them against a list of\n      // pinned versions and adjust them if necessary.\n      this.ensurePinnedPluginVersions(pluginVersions);\n\n      if (buildmessage.jobHasMessages()) {\n        return;\n      }\n\n      // Also, we warn if any App.configurePlugin calls in mobile-config.js\n      // need to be updated (and in the meantime we take care of the\n      // conversion of the plugin configuration to the new ID).\n      pluginsConfiguration = _.object(_.map(pluginsConfiguration, (config, id) => {\n        const newId = newPluginId(id);\n        if (newId) {\n          Console.warn();\n          Console.labelWarn(`Cordova plugin ${id} has been renamed to ${newId} \\\nas part of moving to npm. Please change the App.configurePlugin call in \\\nmobile-config.js accordingly.`);\n          return [newId, config];\n        } else {\n          return [id, config];\n        }\n      }));\n\n      const installedPluginVersions =\n        convertPluginVersions(this.listInstalledPluginVersions());\n\n      // Due to the dependency structure of Cordova plugins, it is impossible to\n      // upgrade the version on an individual Cordova plugin. Instead, whenever\n      // a new Cordova plugin is added or removed, or its version is changed,\n      // we just reinstall all of the plugins.\n      let shouldReinstallAllPlugins = false;\n\n      // Iterate through all of the plugins and find if any of them have a new\n      // version. Additionally, check if we have plugins installed from a local\n      // path.\n      const pluginsFromLocalPath = {};\n      _.each(pluginVersions, (version, id) => {\n        // Check if plugin is installed from a local path.\n        const isPluginFromLocalPath = utils.isUrlWithFileScheme(version);\n\n        if (isPluginFromLocalPath) {\n          pluginsFromLocalPath[id] = version;\n        } else {\n          if (!_.has(installedPluginVersions, id) ||\n            installedPluginVersions[id] !== version) {\n            // We do not have the plugin installed or the version has changed.\n            shouldReinstallAllPlugins = true;\n            Console.debug(`Plugin ${id} version have changed or it was added, will \\\nperform cordova plugins reinstall`);\n          }\n        }\n      });\n\n      const installedPluginsByName = Object.keys(this.listInstalledPluginVersions(true));\n\n      // Check to see if we have any installed plugins that are not in the\n      // current set of plugins.\n      if (!shouldReinstallAllPlugins) {\n        // We need to know which plugins were installed because they were\n        // declared in cordova-plugins and which are just dependencies of others.\n        // Luckily for us android.json and ios.json have that information.\n        const androidJsonPath = files.pathJoin(this.pluginsDir, 'android.json');\n        const iosJsonPath = files.pathJoin(this.pluginsDir, 'ios.json');\n\n        const androidJson = files.exists(androidJsonPath) ? JSON.parse(files.readFile(\n          androidJsonPath, 'utf8')) : { installed_plugins: {} };\n        const iosJson = files.exists(iosJsonPath) ? JSON.parse(files.readFile(\n          iosJsonPath, 'utf8')) : { installed_plugins: {} };\n\n        let previouslyInstalledPlugins = _.union(\n          Object.keys(androidJson.installed_plugins), Object.keys(iosJson.installed_plugins));\n\n        // Now the problem is we have a list of names the plugins (name defined in the plugin.xml)\n        // while in cordova-plugins we have can have their npm ids. We need to translate the list.\n        const fetched = this.listFetchedPluginVersions();\n        previouslyInstalledPlugins = previouslyInstalledPlugins.map(name => {\n          return fetched[name].id;\n        });\n\n        previouslyInstalledPlugins.forEach(id => {\n          if (!_.has(pluginVersions, id)) {\n            Console.debug(`Plugin ${id} was removed, will \\\nperform cordova plugins reinstall`);\n            shouldReinstallAllPlugins = true;\n          }\n        });\n      }\n\n      if (!_.isEmpty(pluginsFromLocalPath) && !shouldReinstallAllPlugins) {\n        Console.debug('Reinstalling Cordova plugins added from the local path');\n      }\n\n      // We either reinstall all plugins or only those fetched from a local\n      // path.\n      if (shouldReinstallAllPlugins || !_.isEmpty(pluginsFromLocalPath)) {\n        let pluginsToRemove;\n        if (shouldReinstallAllPlugins) {\n          pluginsToRemove = installedPluginsByName;\n        } else {\n          // Only try to remove plugins that are currently installed.\n          pluginsToRemove = _.intersection(\n            Object.keys(pluginsFromLocalPath),\n            Object.keys(installedPluginVersions));\n        }\n\n        this.removePlugins(pluginsToRemove);\n\n        let pluginVersionsToInstall;\n\n        // Now install the necessary plugins.\n        if (shouldReinstallAllPlugins) {\n          pluginVersionsToInstall = pluginVersions;\n        } else {\n          pluginVersionsToInstall = pluginsFromLocalPath;\n        }\n\n        const pluginsToInstallCount = _.size(pluginVersionsToInstall);\n        let installedPluginsCount = 0;\n\n        buildmessage.reportProgress({ current: 0, end: pluginsToInstallCount });\n        _.each(pluginVersionsToInstall, (version, id) => {\n          this.addPlugin(id, version, pluginsConfiguration[id]);\n\n          buildmessage.reportProgress({\n            current: ++installedPluginsCount,\n            end: pluginsToInstallCount\n          });\n        });\n\n        this.ensurePluginsWereInstalled(pluginVersionsToInstall, pluginsConfiguration, true);\n      }\n    });\n  }\n\n  // Ensures that the Cordova plugins are installed\n  ensurePluginsWereInstalled(requiredPlugins, pluginsConfiguration, retryInstall) {\n    // List of all installed plugins. This should work for global / local / scoped cordova plugins.\n    // Examples:\n    // cordova-plugin-whitelist@1.3.2 => { 'cordova-plugin-whitelist': '1.3.2' }\n    // com.cordova.plugin@file://.cordova-plugins/plugin => { 'com.cordova.plugin': 'file://.cordova-plugins/plugin' }\n    // @scope/plugin@1.0.0 => { 'com.cordova.plugin': 'scope/plugin' }\n    const installed = this.listInstalledPluginVersions();\n    const installedPluginsNames = Object.keys(installed);\n    const installedPluginsVersions = Object.values(installed);\n    const missingPlugins = {};\n\n    Object.keys(requiredPlugins).filter(plugin => {\n      if (!installedPluginsNames.includes(plugin)) {\n        Console.debug(`Plugin ${plugin} was not installed.`);\n        if (retryInstall) {\n          Console.debug(`Retrying to install ${plugin}.`);\n          this.addPlugin(\n            plugin,\n            requiredPlugins[plugin],\n            pluginsConfiguration[plugin]\n          );\n        }\n        missingPlugins[plugin] = requiredPlugins[plugin];\n      }\n    });\n\n    // All plugins were installed\n    if (Object.keys(missingPlugins).length === 0) {\n      return;\n    }\n\n    // Check one more time after re-installation.\n    if (retryInstall) {\n      this.ensurePluginsWereInstalled(missingPlugins, pluginsConfiguration, false);\n    } else {\n      // Fail, to prevent building and publishing faulty mobile app without at this moment we need to stop.\n      throw new Error(`Some Cordova plugins installation failed: (${Object.keys(missingPlugins).join(', ')}).`);\n    }\n  }\n\n  ensurePinnedPluginVersions(pluginVersions) {\n    assert(pluginVersions);\n\n    _.each(pluginVersions, (version, id) => {\n      // Skip plugin specs that are not actual versions\n      if (utils.isUrlWithSha(version) || utils.isUrlWithFileScheme(version)) {\n        return;\n      }\n\n      const pinnedVersion = pinnedPluginVersions[id];\n\n      if (pinnedVersion && semver.lt(version, pinnedVersion)) {\n        Console.labelWarn(`Attempting to install plugin ${id}@${version}, but \\\nit should have a minimum version of ${pinnedVersion} to ensure compatibility \\\nwith the current platform versions. Installing the minimum version for \\\nconvenience, but you should adjust your dependencies.`);\n        pluginVersions[id] = pinnedVersion;\n      }\n    });\n  }\n\n  // Cordova commands support\n\n  get defaultOptions() {\n    return {\n      silent: !Console.verbose,\n      verbose: Console.verbose,\n      buildConfig: this.buildJsonPath,\n    };\n  }\n\n  defaultEnvWithPathsAdded(...extraPaths) {\n    let paths = (this.defaultPaths || []);\n    paths.unshift(...extraPaths);\n    const env = files.currentEnvWithPathsAdded(...paths);\n    return env;\n  }\n\n  get defaultPaths() {\n    const nodeBinDir = files.getCurrentNodeBinDir();\n\n    // Add the ios-sim bin path so Cordova can find it\n    const iosSimBinPath =\n      files.pathJoin(files.getDevBundle(),\n      'lib/node_modules/ios-sim/bin');\n\n    return [nodeBinDir, iosSimBinPath];\n  }\n\n  runCommands(title, promiseOrAsyncFunction, env = this.defaultEnvWithPathsAdded(),\n    cwd = this.projectRoot) {\n    // Capitalize title for debug output\n    Console.debug(title[0].toUpperCase() + title.slice(1));\n\n    const oldCwd = process.cwd();\n    if (cwd) {\n      process.chdir(files.convertToOSPath(cwd));\n    }\n\n    const oldEnv = process.env;\n    if (env) {\n      // this preserves case insensitivity for PATH on windows\n      Object.keys(env).forEach(key => {\n        process.env[key] = env[key];\n      });\n    }\n\n    try {\n      const promise = (typeof promiseOrAsyncFunction === 'function') ?\n        promiseOrAsyncFunction() : promiseOrAsyncFunction;\n      return Promise.await(promise);\n    } catch (error) {\n      Console.arrowError('Errors executing Cordova commands:');\n      Console.error();\n      const consoleOptions = Console.options({ indent: 3 });\n      Console.error(`While ${title}:`, consoleOptions);\n\n      if (error instanceof CordovaError) {\n        // Only print the message for errors thrown by cordova-lib, because\n        // these are meant for end-user consumption.\n        // But warn that they may not completely apply to our situation.\n        // (We do print the stack trace if we are in verbose mode.)\n        const errorMessage = Console.verbose ? (error.stack || error.message) :\n          error.message;\n        Console.error(`Cordova error: ${errorMessage}`, consoleOptions);\n        Console.error(chalk.green(`(If the error message contains suggestions \\\nfor a fix, note that this may not apply to the Meteor integration. You can try \\\nrunning again with the --verbose option to help diagnose the issue.)`),\n          consoleOptions);\n      } else {\n        // Print stack trace for other errors by default, because the message\n        // usually does not give us enough information to know what is going on\n        const errorMessage = error && error.stack || error;\n        Console.error(errorMessage, consoleOptions);\n      };\n      throw new main.ExitWithCode(1);\n    } finally {\n      if (cwd && oldCwd) {\n        process.chdir(oldCwd);\n      }\n      if (env && oldEnv) {\n        process.env = oldEnv;\n      }\n    }\n  }\n}\n\nconst CPp = CordovaProject.prototype;\n[\"prepareFromAppBundle\",\n \"prepareForPlatform\",\n \"buildForPlatform\",\n].forEach(name => {\n  CPp[name] = Profile(platform => {\n    const prefix = `CordovaProject#${name}`;\n    return name.endsWith(\"ForPlatform\") ? `${prefix} for ${\n      displayNameForPlatform(platform)\n    }` : prefix;\n  }, CPp[name]);\n});\n"],"file":"tools/cordova/project.js.map"}