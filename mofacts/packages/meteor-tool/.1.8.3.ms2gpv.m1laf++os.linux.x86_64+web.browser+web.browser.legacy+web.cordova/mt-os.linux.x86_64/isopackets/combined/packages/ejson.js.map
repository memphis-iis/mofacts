{"version":3,"sources":["meteor://ðŸ’»app/packages/ejson/ejson.js","meteor://ðŸ’»app/packages/ejson/stringify.js"],"names":["module","export","EJSON","customTypes","hasOwn","obj","prop","hasOwnProperty","call","isArguments","isInfOrNan","Number","isNaN","Infinity","addType","name","factory","Error","builtinConverters","matchJSONValue","Object","keys","length","matchObject","Date","toJSONValue","$date","getTime","fromJSONValue","RegExp","regexp","$regexp","source","$flags","flags","slice","replace","sign","$InfNaN","Uint8Array","$binary","Base64","encode","decode","match","keyCount","some","converter","newObj","forEach","key","$escape","_isCustomType","jsonValue","Meteor","_noYieldsAllowed","$type","typeName","$value","_getTypes","_getConverters","toJSONValueHelper","item","i","undefined","adjustTypesToJSONValue","maybeChanged","value","changed","_adjustTypesToJSONValue","newItem","clone","fromJSONValueHelper","every","k","substr","adjustTypesFromJSONValue","_adjustTypesFromJSONValue","stringify","options","serialized","json","canonical","indent","canonicalStringify","link","default","v","JSON","parse","isBinary","$Uint8ArrayPolyfill","equals","a","b","keyOrderSensitive","valueOf","Array","ret","aKeys","bKeys","newBinary","isArray","map","from","quote","string","str","holder","singleIndent","outerIndent","isFinite","String","innerIndent","partial","join","sort","push","allOptions","assign","newIndent","exportDefault"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAAA,MAAM,CAACC,MAAP,CAAc;AAACC,OAAK,EAAC,MAAIA;AAAX,CAAd;;AAAA;;;;AAIA,MAAMA,KAAK,GAAG,EAAd,C,CAEA;;AACA;;;;;;;;AAQA;;;;;;;;;;AAUA;;;;;;;;AAQA;;;;;;;;;AASA;;;;;;;;;;AAUA,MAAMC,WAAW,GAAG,EAApB;;AAEA,MAAMC,MAAM,GAAG,CAACC,GAAD,EAAMC,IAAN,KAAe,CAAC,EAAD,EAAKC,cAAL,CAAoBC,IAApB,CAAyBH,GAAzB,EAA8BC,IAA9B,CAA9B;;AAEA,MAAMG,WAAW,GAAGJ,GAAG,IAAIA,GAAG,IAAI,IAAP,IAAeD,MAAM,CAACC,GAAD,EAAM,QAAN,CAAhD;;AAEA,MAAMK,UAAU,GACdL,GAAG,IAAIM,MAAM,CAACC,KAAP,CAAaP,GAAb,KAAqBA,GAAG,KAAKQ,QAA7B,IAAyCR,GAAG,KAAK,CAACQ,QAD3D,C,CAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;;;;;;;;;;;AAWAX,KAAK,CAACY,OAAN,GAAgB,CAACC,IAAD,EAAOC,OAAP,KAAmB;AACjC,MAAIZ,MAAM,CAACD,WAAD,EAAcY,IAAd,CAAV,EAA+B;AAC7B,UAAM,IAAIE,KAAJ,gBAAkBF,IAAlB,sBAAN;AACD;;AACDZ,aAAW,CAACY,IAAD,CAAX,GAAoBC,OAApB;AACD,CALD;;AAOA,MAAME,iBAAiB,GAAG,CACxB;AAAE;AACAC,gBAAc,CAACd,GAAD,EAAM;AAClB,WAAOD,MAAM,CAACC,GAAD,EAAM,OAAN,CAAN,IAAwBe,MAAM,CAACC,IAAP,CAAYhB,GAAZ,EAAiBiB,MAAjB,KAA4B,CAA3D;AACD,GAHH;;AAIEC,aAAW,CAAClB,GAAD,EAAM;AACf,WAAOA,GAAG,YAAYmB,IAAtB;AACD,GANH;;AAOEC,aAAW,CAACpB,GAAD,EAAM;AACf,WAAO;AAACqB,WAAK,EAAErB,GAAG,CAACsB,OAAJ;AAAR,KAAP;AACD,GATH;;AAUEC,eAAa,CAACvB,GAAD,EAAM;AACjB,WAAO,IAAImB,IAAJ,CAASnB,GAAG,CAACqB,KAAb,CAAP;AACD;;AAZH,CADwB,EAexB;AAAE;AACAP,gBAAc,CAACd,GAAD,EAAM;AAClB,WAAOD,MAAM,CAACC,GAAD,EAAM,SAAN,CAAN,IACFD,MAAM,CAACC,GAAD,EAAM,QAAN,CADJ,IAEFe,MAAM,CAACC,IAAP,CAAYhB,GAAZ,EAAiBiB,MAAjB,KAA4B,CAFjC;AAGD,GALH;;AAMEC,aAAW,CAAClB,GAAD,EAAM;AACf,WAAOA,GAAG,YAAYwB,MAAtB;AACD,GARH;;AASEJ,aAAW,CAACK,MAAD,EAAS;AAClB,WAAO;AACLC,aAAO,EAAED,MAAM,CAACE,MADX;AAELC,YAAM,EAAEH,MAAM,CAACI;AAFV,KAAP;AAID,GAdH;;AAeEN,eAAa,CAACvB,GAAD,EAAM;AACjB;AACA,WAAO,IAAIwB,MAAJ,CACLxB,GAAG,CAAC0B,OADC,EAEL1B,GAAG,CAAC4B,MAAJ,CACE;AADF,KAEGE,KAFH,CAES,CAFT,EAEY,EAFZ,EAGGC,OAHH,CAGW,WAHX,EAGuB,EAHvB,EAIGA,OAJH,CAIW,cAJX,EAI2B,EAJ3B,CAFK,CAAP;AAQD;;AAzBH,CAfwB,EA0CxB;AAAE;AACA;AACAjB,gBAAc,CAACd,GAAD,EAAM;AAClB,WAAOD,MAAM,CAACC,GAAD,EAAM,SAAN,CAAN,IAA0Be,MAAM,CAACC,IAAP,CAAYhB,GAAZ,EAAiBiB,MAAjB,KAA4B,CAA7D;AACD,GAJH;;AAKEC,aAAW,EAAEb,UALf;;AAMEe,aAAW,CAACpB,GAAD,EAAM;AACf,QAAIgC,IAAJ;;AACA,QAAI1B,MAAM,CAACC,KAAP,CAAaP,GAAb,CAAJ,EAAuB;AACrBgC,UAAI,GAAG,CAAP;AACD,KAFD,MAEO,IAAIhC,GAAG,KAAKQ,QAAZ,EAAsB;AAC3BwB,UAAI,GAAG,CAAP;AACD,KAFM,MAEA;AACLA,UAAI,GAAG,CAAC,CAAR;AACD;;AACD,WAAO;AAACC,aAAO,EAAED;AAAV,KAAP;AACD,GAhBH;;AAiBET,eAAa,CAACvB,GAAD,EAAM;AACjB,WAAOA,GAAG,CAACiC,OAAJ,GAAc,CAArB;AACD;;AAnBH,CA1CwB,EA+DxB;AAAE;AACAnB,gBAAc,CAACd,GAAD,EAAM;AAClB,WAAOD,MAAM,CAACC,GAAD,EAAM,SAAN,CAAN,IAA0Be,MAAM,CAACC,IAAP,CAAYhB,GAAZ,EAAiBiB,MAAjB,KAA4B,CAA7D;AACD,GAHH;;AAIEC,aAAW,CAAClB,GAAD,EAAM;AACf,WAAO,OAAOkC,UAAP,KAAsB,WAAtB,IAAqClC,GAAG,YAAYkC,UAApD,IACDlC,GAAG,IAAID,MAAM,CAACC,GAAD,EAAM,qBAAN,CADnB;AAED,GAPH;;AAQEoB,aAAW,CAACpB,GAAD,EAAM;AACf,WAAO;AAACmC,aAAO,EAAEC,MAAM,CAACC,MAAP,CAAcrC,GAAd;AAAV,KAAP;AACD,GAVH;;AAWEuB,eAAa,CAACvB,GAAD,EAAM;AACjB,WAAOoC,MAAM,CAACE,MAAP,CAActC,GAAG,CAACmC,OAAlB,CAAP;AACD;;AAbH,CA/DwB,EA8ExB;AAAE;AACArB,gBAAc,CAACd,GAAD,EAAM;AAClB,WAAOD,MAAM,CAACC,GAAD,EAAM,SAAN,CAAN,IAA0Be,MAAM,CAACC,IAAP,CAAYhB,GAAZ,EAAiBiB,MAAjB,KAA4B,CAA7D;AACD,GAHH;;AAIEC,aAAW,CAAClB,GAAD,EAAM;AACf,QAAIuC,KAAK,GAAG,KAAZ;;AACA,QAAIvC,GAAJ,EAAS;AACP,YAAMwC,QAAQ,GAAGzB,MAAM,CAACC,IAAP,CAAYhB,GAAZ,EAAiBiB,MAAlC;;AACA,UAAIuB,QAAQ,KAAK,CAAb,IAAkBA,QAAQ,KAAK,CAAnC,EAAsC;AACpCD,aAAK,GACH1B,iBAAiB,CAAC4B,IAAlB,CAAuBC,SAAS,IAAIA,SAAS,CAAC5B,cAAV,CAAyBd,GAAzB,CAApC,CADF;AAED;AACF;;AACD,WAAOuC,KAAP;AACD,GAdH;;AAeEnB,aAAW,CAACpB,GAAD,EAAM;AACf,UAAM2C,MAAM,GAAG,EAAf;AACA5B,UAAM,CAACC,IAAP,CAAYhB,GAAZ,EAAiB4C,OAAjB,CAAyBC,GAAG,IAAI;AAC9BF,YAAM,CAACE,GAAD,CAAN,GAAchD,KAAK,CAACuB,WAAN,CAAkBpB,GAAG,CAAC6C,GAAD,CAArB,CAAd;AACD,KAFD;AAGA,WAAO;AAACC,aAAO,EAAEH;AAAV,KAAP;AACD,GArBH;;AAsBEpB,eAAa,CAACvB,GAAD,EAAM;AACjB,UAAM2C,MAAM,GAAG,EAAf;AACA5B,UAAM,CAACC,IAAP,CAAYhB,GAAG,CAAC8C,OAAhB,EAAyBF,OAAzB,CAAiCC,GAAG,IAAI;AACtCF,YAAM,CAACE,GAAD,CAAN,GAAchD,KAAK,CAAC0B,aAAN,CAAoBvB,GAAG,CAAC8C,OAAJ,CAAYD,GAAZ,CAApB,CAAd;AACD,KAFD;AAGA,WAAOF,MAAP;AACD;;AA5BH,CA9EwB,EA4GxB;AAAE;AACA7B,gBAAc,CAACd,GAAD,EAAM;AAClB,WAAOD,MAAM,CAACC,GAAD,EAAM,OAAN,CAAN,IACFD,MAAM,CAACC,GAAD,EAAM,QAAN,CADJ,IACuBe,MAAM,CAACC,IAAP,CAAYhB,GAAZ,EAAiBiB,MAAjB,KAA4B,CAD1D;AAED,GAJH;;AAKEC,aAAW,CAAClB,GAAD,EAAM;AACf,WAAOH,KAAK,CAACkD,aAAN,CAAoB/C,GAApB,CAAP;AACD,GAPH;;AAQEoB,aAAW,CAACpB,GAAD,EAAM;AACf,UAAMgD,SAAS,GAAGC,MAAM,CAACC,gBAAP,CAAwB,MAAMlD,GAAG,CAACoB,WAAJ,EAA9B,CAAlB;;AACA,WAAO;AAAC+B,WAAK,EAAEnD,GAAG,CAACoD,QAAJ,EAAR;AAAwBC,YAAM,EAAEL;AAAhC,KAAP;AACD,GAXH;;AAYEzB,eAAa,CAACvB,GAAD,EAAM;AACjB,UAAMoD,QAAQ,GAAGpD,GAAG,CAACmD,KAArB;;AACA,QAAI,CAACpD,MAAM,CAACD,WAAD,EAAcsD,QAAd,CAAX,EAAoC;AAClC,YAAM,IAAIxC,KAAJ,6BAA+BwC,QAA/B,qBAAN;AACD;;AACD,UAAMV,SAAS,GAAG5C,WAAW,CAACsD,QAAD,CAA7B;AACA,WAAOH,MAAM,CAACC,gBAAP,CAAwB,MAAMR,SAAS,CAAC1C,GAAG,CAACqD,MAAL,CAAvC,CAAP;AACD;;AAnBH,CA5GwB,CAA1B;;AAmIAxD,KAAK,CAACkD,aAAN,GAAuB/C,GAAD,IACpBA,GAAG,IACH,OAAOA,GAAG,CAACoB,WAAX,KAA2B,UAD3B,IAEA,OAAOpB,GAAG,CAACoD,QAAX,KAAwB,UAFxB,IAGArD,MAAM,CAACD,WAAD,EAAcE,GAAG,CAACoD,QAAJ,EAAd,CAJR;;AAOAvD,KAAK,CAACyD,SAAN,GAAkB,MAAMxD,WAAxB;;AAEAD,KAAK,CAAC0D,cAAN,GAAuB,MAAM1C,iBAA7B,C,CAEA;AACA;;;AACA,MAAM2C,iBAAiB,GAAGC,IAAI,IAAI;AAChC,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG7C,iBAAiB,CAACI,MAAtC,EAA8CyC,CAAC,EAA/C,EAAmD;AACjD,UAAMhB,SAAS,GAAG7B,iBAAiB,CAAC6C,CAAD,CAAnC;;AACA,QAAIhB,SAAS,CAACxB,WAAV,CAAsBuC,IAAtB,CAAJ,EAAiC;AAC/B,aAAOf,SAAS,CAACtB,WAAV,CAAsBqC,IAAtB,CAAP;AACD;AACF;;AACD,SAAOE,SAAP;AACD,CARD,C,CAUA;;;AACA,MAAMC,sBAAsB,GAAG5D,GAAG,IAAI;AACpC;AACA,MAAIA,GAAG,KAAK,IAAZ,EAAkB;AAChB,WAAO,IAAP;AACD;;AAED,QAAM6D,YAAY,GAAGL,iBAAiB,CAACxD,GAAD,CAAtC;;AACA,MAAI6D,YAAY,KAAKF,SAArB,EAAgC;AAC9B,WAAOE,YAAP;AACD,GATmC,CAWpC;;;AACA,MAAI,OAAO7D,GAAP,KAAe,QAAnB,EAA6B;AAC3B,WAAOA,GAAP;AACD,GAdmC,CAgBpC;;;AACAe,QAAM,CAACC,IAAP,CAAYhB,GAAZ,EAAiB4C,OAAjB,CAAyBC,GAAG,IAAI;AAC9B,UAAMiB,KAAK,GAAG9D,GAAG,CAAC6C,GAAD,CAAjB;;AACA,QAAI,OAAOiB,KAAP,KAAiB,QAAjB,IAA6BA,KAAK,KAAKH,SAAvC,IACA,CAACtD,UAAU,CAACyD,KAAD,CADf,EACwB;AACtB,aADsB,CACd;AACT;;AAED,UAAMC,OAAO,GAAGP,iBAAiB,CAACM,KAAD,CAAjC;;AACA,QAAIC,OAAJ,EAAa;AACX/D,SAAG,CAAC6C,GAAD,CAAH,GAAWkB,OAAX;AACA,aAFW,CAEH;AACT,KAX6B,CAY9B;AACA;;;AACAH,0BAAsB,CAACE,KAAD,CAAtB;AACD,GAfD;AAgBA,SAAO9D,GAAP;AACD,CAlCD;;AAoCAH,KAAK,CAACmE,uBAAN,GAAgCJ,sBAAhC;AAEA;;;;;;;AAMA/D,KAAK,CAACuB,WAAN,GAAoBqC,IAAI,IAAI;AAC1B,QAAMM,OAAO,GAAGP,iBAAiB,CAACC,IAAD,CAAjC;;AACA,MAAIM,OAAO,KAAKJ,SAAhB,EAA2B;AACzB,WAAOI,OAAP;AACD;;AAED,MAAIE,OAAO,GAAGR,IAAd;;AACA,MAAI,OAAOA,IAAP,KAAgB,QAApB,EAA8B;AAC5BQ,WAAO,GAAGpE,KAAK,CAACqE,KAAN,CAAYT,IAAZ,CAAV;AACAG,0BAAsB,CAACK,OAAD,CAAtB;AACD;;AACD,SAAOA,OAAP;AACD,CAZD,C,CAcA;AACA;AACA;AACA;;;AACA,MAAME,mBAAmB,GAAGL,KAAK,IAAI;AACnC,MAAI,OAAOA,KAAP,KAAiB,QAAjB,IAA6BA,KAAK,KAAK,IAA3C,EAAiD;AAC/C,UAAM9C,IAAI,GAAGD,MAAM,CAACC,IAAP,CAAY8C,KAAZ,CAAb;;AACA,QAAI9C,IAAI,CAACC,MAAL,IAAe,CAAf,IACGD,IAAI,CAACoD,KAAL,CAAWC,CAAC,IAAI,OAAOA,CAAP,KAAa,QAAb,IAAyBA,CAAC,CAACC,MAAF,CAAS,CAAT,EAAY,CAAZ,MAAmB,GAA5D,CADP,EACyE;AACvE,WAAK,IAAIZ,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG7C,iBAAiB,CAACI,MAAtC,EAA8CyC,CAAC,EAA/C,EAAmD;AACjD,cAAMhB,SAAS,GAAG7B,iBAAiB,CAAC6C,CAAD,CAAnC;;AACA,YAAIhB,SAAS,CAAC5B,cAAV,CAAyBgD,KAAzB,CAAJ,EAAqC;AACnC,iBAAOpB,SAAS,CAACnB,aAAV,CAAwBuC,KAAxB,CAAP;AACD;AACF;AACF;AACF;;AACD,SAAOA,KAAP;AACD,CAdD,C,CAgBA;AACA;AACA;;;AACA,MAAMS,wBAAwB,GAAGvE,GAAG,IAAI;AACtC,MAAIA,GAAG,KAAK,IAAZ,EAAkB;AAChB,WAAO,IAAP;AACD;;AAED,QAAM6D,YAAY,GAAGM,mBAAmB,CAACnE,GAAD,CAAxC;;AACA,MAAI6D,YAAY,KAAK7D,GAArB,EAA0B;AACxB,WAAO6D,YAAP;AACD,GARqC,CAUtC;;;AACA,MAAI,OAAO7D,GAAP,KAAe,QAAnB,EAA6B;AAC3B,WAAOA,GAAP;AACD;;AAEDe,QAAM,CAACC,IAAP,CAAYhB,GAAZ,EAAiB4C,OAAjB,CAAyBC,GAAG,IAAI;AAC9B,UAAMiB,KAAK,GAAG9D,GAAG,CAAC6C,GAAD,CAAjB;;AACA,QAAI,OAAOiB,KAAP,KAAiB,QAArB,EAA+B;AAC7B,YAAMC,OAAO,GAAGI,mBAAmB,CAACL,KAAD,CAAnC;;AACA,UAAIA,KAAK,KAAKC,OAAd,EAAuB;AACrB/D,WAAG,CAAC6C,GAAD,CAAH,GAAWkB,OAAX;AACA;AACD,OAL4B,CAM7B;AACA;;;AACAQ,8BAAwB,CAACT,KAAD,CAAxB;AACD;AACF,GAZD;AAaA,SAAO9D,GAAP;AACD,CA7BD;;AA+BAH,KAAK,CAAC2E,yBAAN,GAAkCD,wBAAlC;AAEA;;;;;;AAKA1E,KAAK,CAAC0B,aAAN,GAAsBkC,IAAI,IAAI;AAC5B,MAAIM,OAAO,GAAGI,mBAAmB,CAACV,IAAD,CAAjC;;AACA,MAAIM,OAAO,KAAKN,IAAZ,IAAoB,OAAOA,IAAP,KAAgB,QAAxC,EAAkD;AAChDM,WAAO,GAAGlE,KAAK,CAACqE,KAAN,CAAYT,IAAZ,CAAV;AACAc,4BAAwB,CAACR,OAAD,CAAxB;AACD;;AACD,SAAOA,OAAP;AACD,CAPD;AASA;;;;;;;;;;;;;;;;AAcAlE,KAAK,CAAC4E,SAAN,GAAkB,CAAChB,IAAD,EAAOiB,OAAP,KAAmB;AACnC,MAAIC,UAAJ;AACA,QAAMC,IAAI,GAAG/E,KAAK,CAACuB,WAAN,CAAkBqC,IAAlB,CAAb;;AACA,MAAIiB,OAAO,KAAKA,OAAO,CAACG,SAAR,IAAqBH,OAAO,CAACI,MAAlC,CAAX,EAAsD;AAvYxD,QAAIC,kBAAJ;AAAuBpF,UAAM,CAACqF,IAAP,CAAY,aAAZ,EAA0B;AAACC,aAAO,CAACC,CAAD,EAAG;AAACH,0BAAkB,GAACG,CAAnB;AAAqB;;AAAjC,KAA1B,EAA6D,CAA7D;AAyYnBP,cAAU,GAAGI,kBAAkB,CAACH,IAAD,EAAOF,OAAP,CAA/B;AACD,GAHD,MAGO;AACLC,cAAU,GAAGQ,IAAI,CAACV,SAAL,CAAeG,IAAf,CAAb;AACD;;AACD,SAAOD,UAAP;AACD,CAVD;AAYA;;;;;;;;AAMA9E,KAAK,CAACuF,KAAN,GAAc3B,IAAI,IAAI;AACpB,MAAI,OAAOA,IAAP,KAAgB,QAApB,EAA8B;AAC5B,UAAM,IAAI7C,KAAJ,CAAU,yCAAV,CAAN;AACD;;AACD,SAAOf,KAAK,CAAC0B,aAAN,CAAoB4D,IAAI,CAACC,KAAL,CAAW3B,IAAX,CAApB,CAAP;AACD,CALD;AAOA;;;;;;;;AAMA5D,KAAK,CAACwF,QAAN,GAAiBrF,GAAG,IAAI;AACtB,SAAO,CAAC,EAAG,OAAOkC,UAAP,KAAsB,WAAtB,IAAqClC,GAAG,YAAYkC,UAArD,IACPlC,GAAG,IAAIA,GAAG,CAACsF,mBADN,CAAR;AAED,CAHD;AAKA;;;;;;;;;;;;;;;AAaAzF,KAAK,CAAC0F,MAAN,GAAe,CAACC,CAAD,EAAIC,CAAJ,EAAOf,OAAP,KAAmB;AAChC,MAAIhB,CAAJ;AACA,QAAMgC,iBAAiB,GAAG,CAAC,EAAEhB,OAAO,IAAIA,OAAO,CAACgB,iBAArB,CAA3B;;AACA,MAAIF,CAAC,KAAKC,CAAV,EAAa;AACX,WAAO,IAAP;AACD,GAL+B,CAOhC;AACA;;;AACA,MAAInF,MAAM,CAACC,KAAP,CAAaiF,CAAb,KAAmBlF,MAAM,CAACC,KAAP,CAAakF,CAAb,CAAvB,EAAwC;AACtC,WAAO,IAAP;AACD,GAX+B,CAahC;;;AACA,MAAI,CAACD,CAAD,IAAM,CAACC,CAAX,EAAc;AACZ,WAAO,KAAP;AACD;;AAED,MAAI,EAAE,OAAOD,CAAP,KAAa,QAAb,IAAyB,OAAOC,CAAP,KAAa,QAAxC,CAAJ,EAAuD;AACrD,WAAO,KAAP;AACD;;AAED,MAAID,CAAC,YAAYrE,IAAb,IAAqBsE,CAAC,YAAYtE,IAAtC,EAA4C;AAC1C,WAAOqE,CAAC,CAACG,OAAF,OAAgBF,CAAC,CAACE,OAAF,EAAvB;AACD;;AAED,MAAI9F,KAAK,CAACwF,QAAN,CAAeG,CAAf,KAAqB3F,KAAK,CAACwF,QAAN,CAAeI,CAAf,CAAzB,EAA4C;AAC1C,QAAID,CAAC,CAACvE,MAAF,KAAawE,CAAC,CAACxE,MAAnB,EAA2B;AACzB,aAAO,KAAP;AACD;;AACD,SAAKyC,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAG8B,CAAC,CAACvE,MAAlB,EAA0ByC,CAAC,EAA3B,EAA+B;AAC7B,UAAI8B,CAAC,CAAC9B,CAAD,CAAD,KAAS+B,CAAC,CAAC/B,CAAD,CAAd,EAAmB;AACjB,eAAO,KAAP;AACD;AACF;;AACD,WAAO,IAAP;AACD;;AAED,MAAI,OAAQ8B,CAAC,CAACD,MAAV,KAAsB,UAA1B,EAAsC;AACpC,WAAOC,CAAC,CAACD,MAAF,CAASE,CAAT,EAAYf,OAAZ,CAAP;AACD;;AAED,MAAI,OAAQe,CAAC,CAACF,MAAV,KAAsB,UAA1B,EAAsC;AACpC,WAAOE,CAAC,CAACF,MAAF,CAASC,CAAT,EAAYd,OAAZ,CAAP;AACD;;AAED,MAAIc,CAAC,YAAYI,KAAjB,EAAwB;AACtB,QAAI,EAAEH,CAAC,YAAYG,KAAf,CAAJ,EAA2B;AACzB,aAAO,KAAP;AACD;;AACD,QAAIJ,CAAC,CAACvE,MAAF,KAAawE,CAAC,CAACxE,MAAnB,EAA2B;AACzB,aAAO,KAAP;AACD;;AACD,SAAKyC,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAG8B,CAAC,CAACvE,MAAlB,EAA0ByC,CAAC,EAA3B,EAA+B;AAC7B,UAAI,CAAC7D,KAAK,CAAC0F,MAAN,CAAaC,CAAC,CAAC9B,CAAD,CAAd,EAAmB+B,CAAC,CAAC/B,CAAD,CAApB,EAAyBgB,OAAzB,CAAL,EAAwC;AACtC,eAAO,KAAP;AACD;AACF;;AACD,WAAO,IAAP;AACD,GA3D+B,CA6DhC;;;AACA,UAAQ7E,KAAK,CAACkD,aAAN,CAAoByC,CAApB,IAAyB3F,KAAK,CAACkD,aAAN,CAAoB0C,CAApB,CAAjC;AACE,SAAK,CAAL;AAAQ,aAAO,KAAP;;AACR,SAAK,CAAL;AAAQ,aAAO5F,KAAK,CAAC0F,MAAN,CAAa1F,KAAK,CAACuB,WAAN,CAAkBoE,CAAlB,CAAb,EAAmC3F,KAAK,CAACuB,WAAN,CAAkBqE,CAAlB,CAAnC,CAAP;;AACR,YAHF,CAGW;;AAHX,GA9DgC,CAoEhC;;;AACA,MAAII,GAAJ;AACA,QAAMC,KAAK,GAAG/E,MAAM,CAACC,IAAP,CAAYwE,CAAZ,CAAd;AACA,QAAMO,KAAK,GAAGhF,MAAM,CAACC,IAAP,CAAYyE,CAAZ,CAAd;;AACA,MAAIC,iBAAJ,EAAuB;AACrBhC,KAAC,GAAG,CAAJ;AACAmC,OAAG,GAAGC,KAAK,CAAC1B,KAAN,CAAYvB,GAAG,IAAI;AACvB,UAAIa,CAAC,IAAIqC,KAAK,CAAC9E,MAAf,EAAuB;AACrB,eAAO,KAAP;AACD;;AACD,UAAI4B,GAAG,KAAKkD,KAAK,CAACrC,CAAD,CAAjB,EAAsB;AACpB,eAAO,KAAP;AACD;;AACD,UAAI,CAAC7D,KAAK,CAAC0F,MAAN,CAAaC,CAAC,CAAC3C,GAAD,CAAd,EAAqB4C,CAAC,CAACM,KAAK,CAACrC,CAAD,CAAN,CAAtB,EAAkCgB,OAAlC,CAAL,EAAiD;AAC/C,eAAO,KAAP;AACD;;AACDhB,OAAC;AACD,aAAO,IAAP;AACD,KAZK,CAAN;AAaD,GAfD,MAeO;AACLA,KAAC,GAAG,CAAJ;AACAmC,OAAG,GAAGC,KAAK,CAAC1B,KAAN,CAAYvB,GAAG,IAAI;AACvB,UAAI,CAAC9C,MAAM,CAAC0F,CAAD,EAAI5C,GAAJ,CAAX,EAAqB;AACnB,eAAO,KAAP;AACD;;AACD,UAAI,CAAChD,KAAK,CAAC0F,MAAN,CAAaC,CAAC,CAAC3C,GAAD,CAAd,EAAqB4C,CAAC,CAAC5C,GAAD,CAAtB,EAA6B6B,OAA7B,CAAL,EAA4C;AAC1C,eAAO,KAAP;AACD;;AACDhB,OAAC;AACD,aAAO,IAAP;AACD,KATK,CAAN;AAUD;;AACD,SAAOmC,GAAG,IAAInC,CAAC,KAAKqC,KAAK,CAAC9E,MAA1B;AACD,CArGD;AAuGA;;;;;;;AAKApB,KAAK,CAACqE,KAAN,GAAcgB,CAAC,IAAI;AACjB,MAAIW,GAAJ;;AACA,MAAI,OAAOX,CAAP,KAAa,QAAjB,EAA2B;AACzB,WAAOA,CAAP;AACD;;AAED,MAAIA,CAAC,KAAK,IAAV,EAAgB;AACd,WAAO,IAAP,CADc,CACD;AACd;;AAED,MAAIA,CAAC,YAAY/D,IAAjB,EAAuB;AACrB,WAAO,IAAIA,IAAJ,CAAS+D,CAAC,CAAC5D,OAAF,EAAT,CAAP;AACD,GAZgB,CAcjB;AACA;;;AACA,MAAI4D,CAAC,YAAY1D,MAAjB,EAAyB;AACvB,WAAO0D,CAAP;AACD;;AAED,MAAIrF,KAAK,CAACwF,QAAN,CAAeH,CAAf,CAAJ,EAAuB;AACrBW,OAAG,GAAGhG,KAAK,CAACmG,SAAN,CAAgBd,CAAC,CAACjE,MAAlB,CAAN;;AACA,SAAK,IAAIyC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGwB,CAAC,CAACjE,MAAtB,EAA8ByC,CAAC,EAA/B,EAAmC;AACjCmC,SAAG,CAACnC,CAAD,CAAH,GAASwB,CAAC,CAACxB,CAAD,CAAV;AACD;;AACD,WAAOmC,GAAP;AACD;;AAED,MAAID,KAAK,CAACK,OAAN,CAAcf,CAAd,CAAJ,EAAsB;AACpB,WAAOA,CAAC,CAACgB,GAAF,CAAMpC,KAAK,IAAIjE,KAAK,CAACqE,KAAN,CAAYJ,KAAZ,CAAf,CAAP;AACD;;AAED,MAAI1D,WAAW,CAAC8E,CAAD,CAAf,EAAoB;AAClB,WAAOU,KAAK,CAACO,IAAN,CAAWjB,CAAX,EAAcgB,GAAd,CAAkBpC,KAAK,IAAIjE,KAAK,CAACqE,KAAN,CAAYJ,KAAZ,CAA3B,CAAP;AACD,GAlCgB,CAoCjB;;;AACA,MAAI,OAAOoB,CAAC,CAAChB,KAAT,KAAmB,UAAvB,EAAmC;AACjC,WAAOgB,CAAC,CAAChB,KAAF,EAAP;AACD,GAvCgB,CAyCjB;;;AACA,MAAIrE,KAAK,CAACkD,aAAN,CAAoBmC,CAApB,CAAJ,EAA4B;AAC1B,WAAOrF,KAAK,CAAC0B,aAAN,CAAoB1B,KAAK,CAACqE,KAAN,CAAYrE,KAAK,CAACuB,WAAN,CAAkB8D,CAAlB,CAAZ,CAApB,EAAuD,IAAvD,CAAP;AACD,GA5CgB,CA8CjB;;;AACAW,KAAG,GAAG,EAAN;AACA9E,QAAM,CAACC,IAAP,CAAYkE,CAAZ,EAAetC,OAAf,CAAwBC,GAAD,IAAS;AAC9BgD,OAAG,CAAChD,GAAD,CAAH,GAAWhD,KAAK,CAACqE,KAAN,CAAYgB,CAAC,CAACrC,GAAD,CAAb,CAAX;AACD,GAFD;AAGA,SAAOgD,GAAP;AACD,CApDD;AAsDA;;;;;AAKA;AACA;AACA;AACA;AACA;;;AACAhG,KAAK,CAACmG,SAAN,GAAkB5D,MAAM,CAAC4D,SAAzB,C;;;;;;;;;;;ACjmBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAASI,KAAT,CAAeC,MAAf,EAAuB;AACrB,SAAOlB,IAAI,CAACV,SAAL,CAAe4B,MAAf,CAAP;AACD;;AAED,MAAMC,GAAG,GAAG,CAACzD,GAAD,EAAM0D,MAAN,EAAcC,YAAd,EAA4BC,WAA5B,EAAyC5B,SAAzC,KAAuD;AACjE,QAAMf,KAAK,GAAGyC,MAAM,CAAC1D,GAAD,CAApB,CADiE,CAGjE;;AACA,UAAQ,OAAOiB,KAAf;AACA,SAAK,QAAL;AACE,aAAOsC,KAAK,CAACtC,KAAD,CAAZ;;AACF,SAAK,QAAL;AACE;AACA,aAAO4C,QAAQ,CAAC5C,KAAD,CAAR,GAAkB6C,MAAM,CAAC7C,KAAD,CAAxB,GAAkC,MAAzC;;AACF,SAAK,SAAL;AACE,aAAO6C,MAAM,CAAC7C,KAAD,CAAb;AACF;AACA;;AACA,SAAK,QAAL;AAAe;AACb;AACA;AACA,YAAI,CAACA,KAAL,EAAY;AACV,iBAAO,MAAP;AACD,SALY,CAMb;AACA;;;AACA,cAAM8C,WAAW,GAAGH,WAAW,GAAGD,YAAlC;AACA,cAAMK,OAAO,GAAG,EAAhB;AACA,YAAI3B,CAAJ,CAVa,CAYb;;AACA,YAAIU,KAAK,CAACK,OAAN,CAAcnC,KAAd,KAAyB,EAAD,CAAK5D,cAAL,CAAoBC,IAApB,CAAyB2D,KAAzB,EAAgC,QAAhC,CAA5B,EAAuE;AACrE;AACA;AACA,gBAAM7C,MAAM,GAAG6C,KAAK,CAAC7C,MAArB;;AACA,eAAK,IAAIyC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGzC,MAApB,EAA4ByC,CAAC,IAAI,CAAjC,EAAoC;AAClCmD,mBAAO,CAACnD,CAAD,CAAP,GACE4C,GAAG,CAAC5C,CAAD,EAAII,KAAJ,EAAW0C,YAAX,EAAyBI,WAAzB,EAAsC/B,SAAtC,CAAH,IAAuD,MADzD;AAED,WAPoE,CASrE;AACA;;;AACA,cAAIgC,OAAO,CAAC5F,MAAR,KAAmB,CAAvB,EAA0B;AACxBiE,aAAC,GAAG,IAAJ;AACD,WAFD,MAEO,IAAI0B,WAAJ,EAAiB;AACtB1B,aAAC,GAAG,QACF0B,WADE,GAEFC,OAAO,CAACC,IAAR,CAAa,QACbF,WADA,CAFE,GAIF,IAJE,GAKFH,WALE,GAMF,GANF;AAOD,WARM,MAQA;AACLvB,aAAC,GAAG,MAAM2B,OAAO,CAACC,IAAR,CAAa,GAAb,CAAN,GAA0B,GAA9B;AACD;;AACD,iBAAO5B,CAAP;AACD,SAtCY,CAwCb;;;AACA,YAAIlE,IAAI,GAAGD,MAAM,CAACC,IAAP,CAAY8C,KAAZ,CAAX;;AACA,YAAIe,SAAJ,EAAe;AACb7D,cAAI,GAAGA,IAAI,CAAC+F,IAAL,EAAP;AACD;;AACD/F,YAAI,CAAC4B,OAAL,CAAayB,CAAC,IAAI;AAChBa,WAAC,GAAGoB,GAAG,CAACjC,CAAD,EAAIP,KAAJ,EAAW0C,YAAX,EAAyBI,WAAzB,EAAsC/B,SAAtC,CAAP;;AACA,cAAIK,CAAJ,EAAO;AACL2B,mBAAO,CAACG,IAAR,CAAaZ,KAAK,CAAC/B,CAAD,CAAL,IAAYuC,WAAW,GAAG,IAAH,GAAU,GAAjC,IAAwC1B,CAArD;AACD;AACF,SALD,EA7Ca,CAoDb;AACA;;AACA,YAAI2B,OAAO,CAAC5F,MAAR,KAAmB,CAAvB,EAA0B;AACxBiE,WAAC,GAAG,IAAJ;AACD,SAFD,MAEO,IAAI0B,WAAJ,EAAiB;AACtB1B,WAAC,GAAG,QACF0B,WADE,GAEFC,OAAO,CAACC,IAAR,CAAa,QACbF,WADA,CAFE,GAIF,IAJE,GAKFH,WALE,GAMF,GANF;AAOD,SARM,MAQA;AACLvB,WAAC,GAAG,MAAM2B,OAAO,CAACC,IAAR,CAAa,GAAb,CAAN,GAA0B,GAA9B;AACD;;AACD,eAAO5B,CAAP;AACD;;AAED,YAhFA,CAgFS;;AAhFT;AAkFD,CAtFD,C,CAwFA;;;AACA,MAAMH,kBAAkB,GAAG,CAACjB,KAAD,EAAQY,OAAR,KAAoB;AAC7C;AACA;AACA,QAAMuC,UAAU,GAAGlG,MAAM,CAACmG,MAAP,CAAc;AAC/BpC,UAAM,EAAE,EADuB;AAE/BD,aAAS,EAAE;AAFoB,GAAd,EAGhBH,OAHgB,CAAnB;;AAIA,MAAIuC,UAAU,CAACnC,MAAX,KAAsB,IAA1B,EAAgC;AAC9BmC,cAAU,CAACnC,MAAX,GAAoB,IAApB;AACD,GAFD,MAEO,IAAI,OAAOmC,UAAU,CAACnC,MAAlB,KAA6B,QAAjC,EAA2C;AAChD,QAAIqC,SAAS,GAAG,EAAhB;;AACA,SAAK,IAAIzD,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGuD,UAAU,CAACnC,MAA/B,EAAuCpB,CAAC,EAAxC,EAA4C;AAC1CyD,eAAS,IAAI,GAAb;AACD;;AACDF,cAAU,CAACnC,MAAX,GAAoBqC,SAApB;AACD;;AACD,SAAOb,GAAG,CAAC,EAAD,EAAK;AAAC,QAAIxC;AAAL,GAAL,EAAkBmD,UAAU,CAACnC,MAA7B,EAAqC,EAArC,EAAyCmC,UAAU,CAACpC,SAApD,CAAV;AACD,CAjBD;;AAtGAlF,MAAM,CAACyH,aAAP,CAyHerC,kBAzHf,E","file":"/packages/ejson.js","sourcesContent":["/**\n * @namespace\n * @summary Namespace for EJSON functions\n */\nconst EJSON = {};\n\n// Custom type interface definition\n/**\n * @class CustomType\n * @instanceName customType\n * @memberOf EJSON\n * @summary The interface that a class must satisfy to be able to become an\n * EJSON custom type via EJSON.addType.\n */\n\n/**\n * @function typeName\n * @memberOf EJSON.CustomType\n * @summary Return the tag used to identify this type.  This must match the\n *          tag used to register this type with\n *          [`EJSON.addType`](#ejson_add_type).\n * @locus Anywhere\n * @instance\n */\n\n/**\n * @function toJSONValue\n * @memberOf EJSON.CustomType\n * @summary Serialize this instance into a JSON-compatible value.\n * @locus Anywhere\n * @instance\n */\n\n/**\n * @function clone\n * @memberOf EJSON.CustomType\n * @summary Return a value `r` such that `this.equals(r)` is true, and\n *          modifications to `r` do not affect `this` and vice versa.\n * @locus Anywhere\n * @instance\n */\n\n/**\n * @function equals\n * @memberOf EJSON.CustomType\n * @summary Return `true` if `other` has a value equal to `this`; `false`\n *          otherwise.\n * @locus Anywhere\n * @param {Object} other Another object to compare this to.\n * @instance\n */\n\nconst customTypes = {};\n\nconst hasOwn = (obj, prop) => ({}).hasOwnProperty.call(obj, prop);\n\nconst isArguments = obj => obj != null && hasOwn(obj, 'callee');\n\nconst isInfOrNan =\n  obj => Number.isNaN(obj) || obj === Infinity || obj === -Infinity;\n\n// Add a custom type, using a method of your choice to get to and\n// from a basic JSON-able representation.  The factory argument\n// is a function of JSON-able --> your object\n// The type you add must have:\n// - A toJSONValue() method, so that Meteor can serialize it\n// - a typeName() method, to show how to look it up in our type table.\n// It is okay if these methods are monkey-patched on.\n// EJSON.clone will use toJSONValue and the given factory to produce\n// a clone, but you may specify a method clone() that will be\n// used instead.\n// Similarly, EJSON.equals will use toJSONValue to make comparisons,\n// but you may provide a method equals() instead.\n/**\n * @summary Add a custom datatype to EJSON.\n * @locus Anywhere\n * @param {String} name A tag for your custom type; must be unique among\n *                      custom data types defined in your project, and must\n *                      match the result of your type's `typeName` method.\n * @param {Function} factory A function that deserializes a JSON-compatible\n *                           value into an instance of your type.  This should\n *                           match the serialization performed by your\n *                           type's `toJSONValue` method.\n */\nEJSON.addType = (name, factory) => {\n  if (hasOwn(customTypes, name)) {\n    throw new Error(`Type ${name} already present`);\n  }\n  customTypes[name] = factory;\n};\n\nconst builtinConverters = [\n  { // Date\n    matchJSONValue(obj) {\n      return hasOwn(obj, '$date') && Object.keys(obj).length === 1;\n    },\n    matchObject(obj) {\n      return obj instanceof Date;\n    },\n    toJSONValue(obj) {\n      return {$date: obj.getTime()};\n    },\n    fromJSONValue(obj) {\n      return new Date(obj.$date);\n    },\n  },\n  { // RegExp\n    matchJSONValue(obj) {\n      return hasOwn(obj, '$regexp')\n        && hasOwn(obj, '$flags')\n        && Object.keys(obj).length === 2;\n    },\n    matchObject(obj) {\n      return obj instanceof RegExp;\n    },\n    toJSONValue(regexp) {\n      return {\n        $regexp: regexp.source,\n        $flags: regexp.flags\n      };\n    },\n    fromJSONValue(obj) {\n      // Replaces duplicate / invalid flags.\n      return new RegExp(\n        obj.$regexp,\n        obj.$flags\n          // Cut off flags at 50 chars to avoid abusing RegExp for DOS.\n          .slice(0, 50)\n          .replace(/[^gimuy]/g,'')\n          .replace(/(.)(?=.*\\1)/g, '')\n      );\n    },\n  },\n  { // NaN, Inf, -Inf. (These are the only objects with typeof !== 'object'\n    // which we match.)\n    matchJSONValue(obj) {\n      return hasOwn(obj, '$InfNaN') && Object.keys(obj).length === 1;\n    },\n    matchObject: isInfOrNan,\n    toJSONValue(obj) {\n      let sign;\n      if (Number.isNaN(obj)) {\n        sign = 0;\n      } else if (obj === Infinity) {\n        sign = 1;\n      } else {\n        sign = -1;\n      }\n      return {$InfNaN: sign};\n    },\n    fromJSONValue(obj) {\n      return obj.$InfNaN / 0;\n    },\n  },\n  { // Binary\n    matchJSONValue(obj) {\n      return hasOwn(obj, '$binary') && Object.keys(obj).length === 1;\n    },\n    matchObject(obj) {\n      return typeof Uint8Array !== 'undefined' && obj instanceof Uint8Array\n        || (obj && hasOwn(obj, '$Uint8ArrayPolyfill'));\n    },\n    toJSONValue(obj) {\n      return {$binary: Base64.encode(obj)};\n    },\n    fromJSONValue(obj) {\n      return Base64.decode(obj.$binary);\n    },\n  },\n  { // Escaping one level\n    matchJSONValue(obj) {\n      return hasOwn(obj, '$escape') && Object.keys(obj).length === 1;\n    },\n    matchObject(obj) {\n      let match = false;\n      if (obj) {\n        const keyCount = Object.keys(obj).length;\n        if (keyCount === 1 || keyCount === 2) {\n          match =\n            builtinConverters.some(converter => converter.matchJSONValue(obj));\n        }\n      }\n      return match;\n    },\n    toJSONValue(obj) {\n      const newObj = {};\n      Object.keys(obj).forEach(key => {\n        newObj[key] = EJSON.toJSONValue(obj[key]);\n      });\n      return {$escape: newObj};\n    },\n    fromJSONValue(obj) {\n      const newObj = {};\n      Object.keys(obj.$escape).forEach(key => {\n        newObj[key] = EJSON.fromJSONValue(obj.$escape[key]);\n      });\n      return newObj;\n    },\n  },\n  { // Custom\n    matchJSONValue(obj) {\n      return hasOwn(obj, '$type')\n        && hasOwn(obj, '$value') && Object.keys(obj).length === 2;\n    },\n    matchObject(obj) {\n      return EJSON._isCustomType(obj);\n    },\n    toJSONValue(obj) {\n      const jsonValue = Meteor._noYieldsAllowed(() => obj.toJSONValue());\n      return {$type: obj.typeName(), $value: jsonValue};\n    },\n    fromJSONValue(obj) {\n      const typeName = obj.$type;\n      if (!hasOwn(customTypes, typeName)) {\n        throw new Error(`Custom EJSON type ${typeName} is not defined`);\n      }\n      const converter = customTypes[typeName];\n      return Meteor._noYieldsAllowed(() => converter(obj.$value));\n    },\n  },\n];\n\nEJSON._isCustomType = (obj) => (\n  obj &&\n  typeof obj.toJSONValue === 'function' &&\n  typeof obj.typeName === 'function' &&\n  hasOwn(customTypes, obj.typeName())\n);\n\nEJSON._getTypes = () => customTypes;\n\nEJSON._getConverters = () => builtinConverters;\n\n// Either return the JSON-compatible version of the argument, or undefined (if\n// the item isn't itself replaceable, but maybe some fields in it are)\nconst toJSONValueHelper = item => {\n  for (let i = 0; i < builtinConverters.length; i++) {\n    const converter = builtinConverters[i];\n    if (converter.matchObject(item)) {\n      return converter.toJSONValue(item);\n    }\n  }\n  return undefined;\n};\n\n// for both arrays and objects, in-place modification.\nconst adjustTypesToJSONValue = obj => {\n  // Is it an atom that we need to adjust?\n  if (obj === null) {\n    return null;\n  }\n\n  const maybeChanged = toJSONValueHelper(obj);\n  if (maybeChanged !== undefined) {\n    return maybeChanged;\n  }\n\n  // Other atoms are unchanged.\n  if (typeof obj !== 'object') {\n    return obj;\n  }\n\n  // Iterate over array or object structure.\n  Object.keys(obj).forEach(key => {\n    const value = obj[key];\n    if (typeof value !== 'object' && value !== undefined &&\n        !isInfOrNan(value)) {\n      return; // continue\n    }\n\n    const changed = toJSONValueHelper(value);\n    if (changed) {\n      obj[key] = changed;\n      return; // on to the next key\n    }\n    // if we get here, value is an object but not adjustable\n    // at this level.  recurse.\n    adjustTypesToJSONValue(value);\n  });\n  return obj;\n};\n\nEJSON._adjustTypesToJSONValue = adjustTypesToJSONValue;\n\n/**\n * @summary Serialize an EJSON-compatible value into its plain JSON\n *          representation.\n * @locus Anywhere\n * @param {EJSON} val A value to serialize to plain JSON.\n */\nEJSON.toJSONValue = item => {\n  const changed = toJSONValueHelper(item);\n  if (changed !== undefined) {\n    return changed;\n  }\n\n  let newItem = item;\n  if (typeof item === 'object') {\n    newItem = EJSON.clone(item);\n    adjustTypesToJSONValue(newItem);\n  }\n  return newItem;\n};\n\n// Either return the argument changed to have the non-json\n// rep of itself (the Object version) or the argument itself.\n// DOES NOT RECURSE.  For actually getting the fully-changed value, use\n// EJSON.fromJSONValue\nconst fromJSONValueHelper = value => {\n  if (typeof value === 'object' && value !== null) {\n    const keys = Object.keys(value);\n    if (keys.length <= 2\n        && keys.every(k => typeof k === 'string' && k.substr(0, 1) === '$')) {\n      for (let i = 0; i < builtinConverters.length; i++) {\n        const converter = builtinConverters[i];\n        if (converter.matchJSONValue(value)) {\n          return converter.fromJSONValue(value);\n        }\n      }\n    }\n  }\n  return value;\n};\n\n// for both arrays and objects. Tries its best to just\n// use the object you hand it, but may return something\n// different if the object you hand it itself needs changing.\nconst adjustTypesFromJSONValue = obj => {\n  if (obj === null) {\n    return null;\n  }\n\n  const maybeChanged = fromJSONValueHelper(obj);\n  if (maybeChanged !== obj) {\n    return maybeChanged;\n  }\n\n  // Other atoms are unchanged.\n  if (typeof obj !== 'object') {\n    return obj;\n  }\n\n  Object.keys(obj).forEach(key => {\n    const value = obj[key];\n    if (typeof value === 'object') {\n      const changed = fromJSONValueHelper(value);\n      if (value !== changed) {\n        obj[key] = changed;\n        return;\n      }\n      // if we get here, value is an object but not adjustable\n      // at this level.  recurse.\n      adjustTypesFromJSONValue(value);\n    }\n  });\n  return obj;\n};\n\nEJSON._adjustTypesFromJSONValue = adjustTypesFromJSONValue;\n\n/**\n * @summary Deserialize an EJSON value from its plain JSON representation.\n * @locus Anywhere\n * @param {JSONCompatible} val A value to deserialize into EJSON.\n */\nEJSON.fromJSONValue = item => {\n  let changed = fromJSONValueHelper(item);\n  if (changed === item && typeof item === 'object') {\n    changed = EJSON.clone(item);\n    adjustTypesFromJSONValue(changed);\n  }\n  return changed;\n};\n\n/**\n * @summary Serialize a value to a string. For EJSON values, the serialization\n *          fully represents the value. For non-EJSON values, serializes the\n *          same way as `JSON.stringify`.\n * @locus Anywhere\n * @param {EJSON} val A value to stringify.\n * @param {Object} [options]\n * @param {Boolean | Integer | String} options.indent Indents objects and\n * arrays for easy readability.  When `true`, indents by 2 spaces; when an\n * integer, indents by that number of spaces; and when a string, uses the\n * string as the indentation pattern.\n * @param {Boolean} options.canonical When `true`, stringifies keys in an\n *                                    object in sorted order.\n */\nEJSON.stringify = (item, options) => {\n  let serialized;\n  const json = EJSON.toJSONValue(item);\n  if (options && (options.canonical || options.indent)) {\n    import canonicalStringify from './stringify';\n    serialized = canonicalStringify(json, options);\n  } else {\n    serialized = JSON.stringify(json);\n  }\n  return serialized;\n};\n\n/**\n * @summary Parse a string into an EJSON value. Throws an error if the string\n *          is not valid EJSON.\n * @locus Anywhere\n * @param {String} str A string to parse into an EJSON value.\n */\nEJSON.parse = item => {\n  if (typeof item !== 'string') {\n    throw new Error('EJSON.parse argument should be a string');\n  }\n  return EJSON.fromJSONValue(JSON.parse(item));\n};\n\n/**\n * @summary Returns true if `x` is a buffer of binary data, as returned from\n *          [`EJSON.newBinary`](#ejson_new_binary).\n * @param {Object} x The variable to check.\n * @locus Anywhere\n */\nEJSON.isBinary = obj => {\n  return !!((typeof Uint8Array !== 'undefined' && obj instanceof Uint8Array) ||\n    (obj && obj.$Uint8ArrayPolyfill));\n};\n\n/**\n * @summary Return true if `a` and `b` are equal to each other.  Return false\n *          otherwise.  Uses the `equals` method on `a` if present, otherwise\n *          performs a deep comparison.\n * @locus Anywhere\n * @param {EJSON} a\n * @param {EJSON} b\n * @param {Object} [options]\n * @param {Boolean} options.keyOrderSensitive Compare in key sensitive order,\n * if supported by the JavaScript implementation.  For example, `{a: 1, b: 2}`\n * is equal to `{b: 2, a: 1}` only when `keyOrderSensitive` is `false`.  The\n * default is `false`.\n */\nEJSON.equals = (a, b, options) => {\n  let i;\n  const keyOrderSensitive = !!(options && options.keyOrderSensitive);\n  if (a === b) {\n    return true;\n  }\n\n  // This differs from the IEEE spec for NaN equality, b/c we don't want\n  // anything ever with a NaN to be poisoned from becoming equal to anything.\n  if (Number.isNaN(a) && Number.isNaN(b)) {\n    return true;\n  }\n\n  // if either one is falsy, they'd have to be === to be equal\n  if (!a || !b) {\n    return false;\n  }\n\n  if (!(typeof a === 'object' && typeof b === 'object')) {\n    return false;\n  }\n\n  if (a instanceof Date && b instanceof Date) {\n    return a.valueOf() === b.valueOf();\n  }\n\n  if (EJSON.isBinary(a) && EJSON.isBinary(b)) {\n    if (a.length !== b.length) {\n      return false;\n    }\n    for (i = 0; i < a.length; i++) {\n      if (a[i] !== b[i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  if (typeof (a.equals) === 'function') {\n    return a.equals(b, options);\n  }\n\n  if (typeof (b.equals) === 'function') {\n    return b.equals(a, options);\n  }\n\n  if (a instanceof Array) {\n    if (!(b instanceof Array)) {\n      return false;\n    }\n    if (a.length !== b.length) {\n      return false;\n    }\n    for (i = 0; i < a.length; i++) {\n      if (!EJSON.equals(a[i], b[i], options)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  // fallback for custom types that don't implement their own equals\n  switch (EJSON._isCustomType(a) + EJSON._isCustomType(b)) {\n    case 1: return false;\n    case 2: return EJSON.equals(EJSON.toJSONValue(a), EJSON.toJSONValue(b));\n    default: // Do nothing\n  }\n\n  // fall back to structural equality of objects\n  let ret;\n  const aKeys = Object.keys(a);\n  const bKeys = Object.keys(b);\n  if (keyOrderSensitive) {\n    i = 0;\n    ret = aKeys.every(key => {\n      if (i >= bKeys.length) {\n        return false;\n      }\n      if (key !== bKeys[i]) {\n        return false;\n      }\n      if (!EJSON.equals(a[key], b[bKeys[i]], options)) {\n        return false;\n      }\n      i++;\n      return true;\n    });\n  } else {\n    i = 0;\n    ret = aKeys.every(key => {\n      if (!hasOwn(b, key)) {\n        return false;\n      }\n      if (!EJSON.equals(a[key], b[key], options)) {\n        return false;\n      }\n      i++;\n      return true;\n    });\n  }\n  return ret && i === bKeys.length;\n};\n\n/**\n * @summary Return a deep copy of `val`.\n * @locus Anywhere\n * @param {EJSON} val A value to copy.\n */\nEJSON.clone = v => {\n  let ret;\n  if (typeof v !== 'object') {\n    return v;\n  }\n\n  if (v === null) {\n    return null; // null has typeof \"object\"\n  }\n\n  if (v instanceof Date) {\n    return new Date(v.getTime());\n  }\n\n  // RegExps are not really EJSON elements (eg we don't define a serialization\n  // for them), but they're immutable anyway, so we can support them in clone.\n  if (v instanceof RegExp) {\n    return v;\n  }\n\n  if (EJSON.isBinary(v)) {\n    ret = EJSON.newBinary(v.length);\n    for (let i = 0; i < v.length; i++) {\n      ret[i] = v[i];\n    }\n    return ret;\n  }\n\n  if (Array.isArray(v)) {\n    return v.map(value => EJSON.clone(value));\n  }\n\n  if (isArguments(v)) {\n    return Array.from(v).map(value => EJSON.clone(value));\n  }\n\n  // handle general user-defined typed Objects if they have a clone method\n  if (typeof v.clone === 'function') {\n    return v.clone();\n  }\n\n  // handle other custom types\n  if (EJSON._isCustomType(v)) {\n    return EJSON.fromJSONValue(EJSON.clone(EJSON.toJSONValue(v)), true);\n  }\n\n  // handle other objects\n  ret = {};\n  Object.keys(v).forEach((key) => {\n    ret[key] = EJSON.clone(v[key]);\n  });\n  return ret;\n};\n\n/**\n * @summary Allocate a new buffer of binary data that EJSON can serialize.\n * @locus Anywhere\n * @param {Number} size The number of bytes of binary data to allocate.\n */\n// EJSON.newBinary is the public documented API for this functionality,\n// but the implementation is in the 'base64' package to avoid\n// introducing a circular dependency. (If the implementation were here,\n// then 'base64' would have to use EJSON.newBinary, and 'ejson' would\n// also have to use 'base64'.)\nEJSON.newBinary = Base64.newBinary;\n\nexport { EJSON };\n","// Based on json2.js from https://github.com/douglascrockford/JSON-js\n//\n//    json2.js\n//    2012-10-08\n//\n//    Public Domain.\n//\n//    NO WARRANTY EXPRESSED OR IMPLIED. USE AT YOUR OWN RISK.\n\nfunction quote(string) {\n  return JSON.stringify(string);\n}\n\nconst str = (key, holder, singleIndent, outerIndent, canonical) => {\n  const value = holder[key];\n\n  // What happens next depends on the value's type.\n  switch (typeof value) {\n  case 'string':\n    return quote(value);\n  case 'number':\n    // JSON numbers must be finite. Encode non-finite numbers as null.\n    return isFinite(value) ? String(value) : 'null';\n  case 'boolean':\n    return String(value);\n  // If the type is 'object', we might be dealing with an object or an array or\n  // null.\n  case 'object': {\n    // Due to a specification blunder in ECMAScript, typeof null is 'object',\n    // so watch out for that case.\n    if (!value) {\n      return 'null';\n    }\n    // Make an array to hold the partial results of stringifying this object\n    // value.\n    const innerIndent = outerIndent + singleIndent;\n    const partial = [];\n    let v;\n\n    // Is the value an array?\n    if (Array.isArray(value) || ({}).hasOwnProperty.call(value, 'callee')) {\n      // The value is an array. Stringify every element. Use null as a\n      // placeholder for non-JSON values.\n      const length = value.length;\n      for (let i = 0; i < length; i += 1) {\n        partial[i] =\n          str(i, value, singleIndent, innerIndent, canonical) || 'null';\n      }\n\n      // Join all of the elements together, separated with commas, and wrap\n      // them in brackets.\n      if (partial.length === 0) {\n        v = '[]';\n      } else if (innerIndent) {\n        v = '[\\n' +\n          innerIndent +\n          partial.join(',\\n' +\n          innerIndent) +\n          '\\n' +\n          outerIndent +\n          ']';\n      } else {\n        v = '[' + partial.join(',') + ']';\n      }\n      return v;\n    }\n\n    // Iterate through all of the keys in the object.\n    let keys = Object.keys(value);\n    if (canonical) {\n      keys = keys.sort();\n    }\n    keys.forEach(k => {\n      v = str(k, value, singleIndent, innerIndent, canonical);\n      if (v) {\n        partial.push(quote(k) + (innerIndent ? ': ' : ':') + v);\n      }\n    });\n\n    // Join all of the member texts together, separated with commas,\n    // and wrap them in braces.\n    if (partial.length === 0) {\n      v = '{}';\n    } else if (innerIndent) {\n      v = '{\\n' +\n        innerIndent +\n        partial.join(',\\n' +\n        innerIndent) +\n        '\\n' +\n        outerIndent +\n        '}';\n    } else {\n      v = '{' + partial.join(',') + '}';\n    }\n    return v;\n  }\n\n  default: // Do nothing\n  }\n};\n\n// If the JSON object does not yet have a stringify method, give it one.\nconst canonicalStringify = (value, options) => {\n  // Make a fake root object containing our value under the key of ''.\n  // Return the result of stringifying the value.\n  const allOptions = Object.assign({\n    indent: '',\n    canonical: false,\n  }, options);\n  if (allOptions.indent === true) {\n    allOptions.indent = '  ';\n  } else if (typeof allOptions.indent === 'number') {\n    let newIndent = '';\n    for (let i = 0; i < allOptions.indent; i++) {\n      newIndent += ' ';\n    }\n    allOptions.indent = newIndent;\n  }\n  return str('', {'': value}, allOptions.indent, '', allOptions.canonical);\n};\n\nexport default canonicalStringify;\n"]}