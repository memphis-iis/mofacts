{"version":3,"sources":["/tools/cordova/index.js"],"names":["module","export","CORDOVA_ARCH","CORDOVA_PLATFORMS","CORDOVA_DEV_BUNDLE_VERSIONS","CORDOVA_PLATFORM_VERSIONS","ensureDevBundleDependencies","displayNameForPlatform","displayNamesForPlatforms","filterPlatforms","splitPluginsAndPackages","pluginVersionsFromStarManifest","newPluginId","convertPluginVersions","convertToGitUrl","_","link","default","v","assert","utils","buildmessage","pathJoin","statOrNull","getDevBundle","rm_recursive","PLATFORM_TO_DISPLAY_NAME_MAP","enterJob","title","require","ensureDependencies","cordovaNodeModulesDir","forEach","pkg","path","stat","isDirectory","platform","platforms","map","join","intersection","packages","result","plugins","namespace","rest","split","name","push","star","cordovaProgram","findWhere","programs","arch","cordovaDependencies","id","oldToNewPluginIds","oldToNew","pluginVersions","assertInJob","newPluginVersions","each","version","isUrlWithSha","newId","has","url","match","organization","repository","sha","test","error","displayNameForHostPlatform","process"],"mappings":"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","sourcesContent":["import _ from 'underscore';\nimport assert from 'assert';\nimport utils from '../utils/utils.js';\nimport buildmessage from '../utils/buildmessage.js';\nimport {\n  pathJoin,\n  statOrNull,\n  getDevBundle,\n  rm_recursive,\n} from '../fs/files';\n\nexport const CORDOVA_ARCH = \"web.cordova\";\n\nexport const CORDOVA_PLATFORMS = ['ios', 'android'];\n\nexport const CORDOVA_DEV_BUNDLE_VERSIONS = {\n  'cordova-lib': '7.1.0',\n  'cordova-common': '2.1.1',\n  'cordova-registry-mapper': '1.1.15',\n};\n\nexport const CORDOVA_PLATFORM_VERSIONS = {\n  'android': '7.1.4',\n  'ios': '4.5.5',\n};\n\nconst PLATFORM_TO_DISPLAY_NAME_MAP = {\n  'ios': 'iOS',\n  'android': 'Android'\n};\n\nexport function ensureDevBundleDependencies() {\n  buildmessage.enterJob(\n    {\n      title: 'Installing Cordova in Meteor tool',\n    },\n    () => {\n      require(\"../cli/dev-bundle-helpers.js\")\n        .ensureDependencies(CORDOVA_DEV_BUNDLE_VERSIONS);\n\n      const cordovaNodeModulesDir = pathJoin(\n        getDevBundle(),\n        \"lib\",\n        \"node_modules\",\n        \"cordova-lib\",\n        \"node_modules\",\n      );\n\n      [\n        // Remove these bundled packages in preference to\n        // dev_bundle/lib/node_modules/<package name>:\n        \"graceful-fs\",\n        pathJoin(\"npm\", \"node_modules\", \"graceful-fs\"),\n      ].forEach(pkg => {\n        const path = pathJoin(cordovaNodeModulesDir, pkg);\n        const stat = statOrNull(path);\n        if (stat && stat.isDirectory()) {\n          rm_recursive(path);\n        }\n      });\n    }\n  );\n}\n\nexport function displayNameForPlatform(platform) {\n  return PLATFORM_TO_DISPLAY_NAME_MAP[platform] || platform;\n};\n\nexport function displayNamesForPlatforms(platforms) {\n  return platforms.map((platform) =>\n    displayNameForPlatform(platform)).join(', ');\n}\n\n// This filters the Cordova platforms from a list of app-level platforms.\n// Right now, the only other platforms are the default browser and server\n// platforms.\nexport function filterPlatforms(platforms) {\n  return _.intersection(platforms, CORDOVA_PLATFORMS);\n}\n\nexport function splitPluginsAndPackages(packages) {\n  let result = {\n    plugins: [],\n    packages: []\n  };\n\n  for (let pkg of packages) {\n    const [namespace, ...rest] = pkg.split(':');\n    if (namespace === 'cordova') {\n      const name = rest.join(':');\n      result.plugins.push(name);\n    } else {\n      result.packages.push(pkg);\n    }\n  }\n\n  return result;\n}\n\n// Returns the cordovaDependencies of the Cordova arch from a star manifest.\nexport function pluginVersionsFromStarManifest(star) {\n  var cordovaProgram = _.findWhere(star.programs, { arch: CORDOVA_ARCH });\n  return cordovaProgram ? cordovaProgram.cordovaDependencies : {};\n}\n\nexport function newPluginId(id) {\n  import { oldToNew as oldToNewPluginIds } from 'cordova-registry-mapper';\n  return oldToNewPluginIds[id];\n}\n\nexport function convertPluginVersions(pluginVersions) {\n  assert(pluginVersions);\n  buildmessage.assertInJob();\n\n  let newPluginVersions = {};\n\n  _.each(pluginVersions, (version, id) => {\n    if (utils.isUrlWithSha(version)) {\n      version = convertToGitUrl(version);\n      if (!version) {\n        // convertToGitUrl will add an error to buildmessage messages\n        return;\n      }\n    }\n\n    const newId = newPluginId(id);\n\n    if (newId) {\n      // If the plugin has already been added using the new ID, we do not\n      // overwrite the version.\n      if (!_.has(pluginVersions, newId)) {\n        newPluginVersions[newId] = version;\n      }\n    } else {\n      newPluginVersions[id] = version;\n    }\n  });\n\n  return newPluginVersions;\n}\n\n// Convert old-style GitHub tarball URLs to new Git URLs, and check if other\n// Git URLs contain a SHA reference.\nexport function convertToGitUrl(url) {\n  buildmessage.assertInJob();\n\n  // Matches GitHub tarball URLs, like:\n  // https://github.com/meteor/com.meteor.cordova-update/tarball/92fe99b7248075318f6446b288995d4381d24cd2\n  const match =\n    url.match(/^https?:\\/\\/github.com\\/(.+?)\\/(.+?)\\/tarball\\/([0-9a-f]{40})/);\n  if (match) {\n      const [, organization, repository, sha] = match;\n    // Convert them to a Git URL\n    return `https://github.com/${organization}/${repository}.git#${sha}`;\n  // We only support Git URLs with a SHA reference to guarantee repeatability\n  // of builds\n  } else if (/\\.git#[0-9a-f]{40}/.test(url)) {\n    return url;\n  } else {\n    buildmessage.error(`Meteor no longer supports installing Cordova plugins \\\nfrom arbitrary tarball URLs. You can either add a plugin from a Git URL with \\\na SHA reference, or from a local path. (Attempting to install from ${url}.)`);\n    return null;\n  }\n}\n\nfunction displayNameForHostPlatform(platform = process.platform) {\n  switch (platform) {\n    case 'darwin':\n      return \"Mac\";\n    case 'linux':\n      return \"Linux\";\n    case 'win32':\n      return \"Windows\";\n  }\n}\n"],"file":"tools/cordova/index.js.map"}