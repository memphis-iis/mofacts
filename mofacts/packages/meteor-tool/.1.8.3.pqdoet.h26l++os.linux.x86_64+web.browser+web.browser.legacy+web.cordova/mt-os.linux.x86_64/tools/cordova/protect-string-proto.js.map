{"version":3,"sources":["/tools/cordova/protect-string-proto.js"],"names":["makeDescriptor","value","enumerable","get","set","newValue","arguments","length","apply","Object","defineProperties","String","prototype","to","toEnd"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAASA,cAAT,GAA0B;AACxB,MAAIC,KAAJ,CADwB,CAGxB;AACA;;AACA,SAAO;AACLC,IAAAA,UAAU,EAAE,KADP;;AAGLC,IAAAA,GAAG,GAAG;AACJ,aAAOF,KAAP;AACD,KALI;;AAOLG,IAAAA,GAAG,CAACC,QAAD,EAAW;AACZ,UAAI,OAAOA,QAAP,KAAoB,UAAxB,EAAoC;AAClCJ,QAAAA,KAAK,GAAG,YAAY;AAClB;AACA;AACA,cAAIK,SAAS,CAACC,MAAV,GAAmB,CAAnB,IACA,QAAQ,YADZ,EAC0B;AACxB,mBAAOF,QAAQ,CAACG,KAAT,CAAe,IAAf,EAAqBF,SAArB,CAAP;AACD;AACF,SAPD;AAQD,OATD,MASO;AACLL,QAAAA,KAAK,GAAGI,QAAR;AACD;;AAED,aAAOA,QAAP;AACD;;AAtBI,GAAP;AAwBD;;AAEDI,MAAM,CAACC,gBAAP,CAAwBC,MAAM,CAACC,SAA/B,EAA0C;AACxCC,EAAAA,EAAE,EAAEb,cAAc,EADsB;AAExCc,EAAAA,KAAK,EAAEd,cAAc;AAFmB,CAA1C","sourcesContent":["// `cordova-lib` depends on `shelljs`, which modifies String.prototype\n// (which is BAD).  See:\n// https://github.com/arturadib/shelljs/issues/159\n//\n// The following code protects the tool environment (which is also\n// where build plugins run) from having a polluted String.prototype.\n// One JS library in particular, String.js (before v3.3.1), is\n// sensitive to String prototype pollution.\n//\n// This code can be removed when `shelljs` cleans up its act and\n// `cordova-lib` uses a new version, or when `cordova-lib` moves away\n// from `shelljs`.\n\nfunction makeDescriptor() {\n  let value;\n\n  // This descriptor allows the property to remain non-enumerable while\n  // still permitting controlled modifications of its value.\n  return {\n    enumerable: false,\n\n    get() {\n      return value;\n    },\n\n    set(newValue) {\n      if (typeof newValue === \"function\") {\n        value = function () {\n          // Ignore calls that likely originate from\n          // https://github.com/jprichardson/string.js/blob/adc2e9d1b8/lib/string.js#L726\n          if (arguments.length > 0 ||\n              this != \"teststring\") {\n            return newValue.apply(this, arguments);\n          }\n        };\n      } else {\n        value = newValue;\n      }\n\n      return newValue;\n    }\n  };\n}\n\nObject.defineProperties(String.prototype, {\n  to: makeDescriptor(),\n  toEnd: makeDescriptor()\n});\n"],"file":"tools/cordova/protect-string-proto.js.map"}