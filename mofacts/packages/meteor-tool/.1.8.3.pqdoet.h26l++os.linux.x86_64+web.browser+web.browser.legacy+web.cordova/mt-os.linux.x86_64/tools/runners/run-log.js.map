{"version":3,"sources":["/tools/runners/run-log.js"],"names":["_","require","Console","fiberHelpers","_Log","getLoggingPackage","loadIsopackage","Log","outputFormat","RunLog","self","rawLogs","messages","maxLength","consecutiveRestartMessages","consecutiveClientRestartMessages","temporaryMessageLength","extend","prototype","_record","msg","push","length","shift","_clearSpecial","info","spaces","Array","join","process","stdout","write","CARRIAGE_RETURN","setRawLogs","logAppOutput","line","isStderr","obj","objFromText","level","stderr","parse","noYieldsAllowed","rawInfo","format","color","log","options","time","Date","message","arrow","logTemporary","logRestart","pop","logClientRestart","finish","clearLog","getLog","runLogInstance","each","method","exports","bind"],"mappings":"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","sourcesContent":["var _ = require('underscore');\nvar Console = require('../console/console.js').Console;\nvar fiberHelpers = require('../utils/fiber-helpers.js');\n\n// runLog is primarily used by the parts of the tool which run apps locally. It\n// writes to standard output (and standard error, if rawLogs is set), and allows\n// special output forms like \"write this line, but let the next line overwrite\n// it\". It also makes its output available to the proxy, to be displayed to web\n// browsers if the app fails to run.\n//\n// It's not the only mechanism used for gathering messages! buildmessage is a\n// more structured way of gathering messages, but unlike log, it does not print\n// messages immediately.\n//\n// Some other parts of the code (eg commands and warehouse) write directly to\n// process.std{out,err} or to console.log; we should be careful to not do that\n// anywhere that may overlap with use of runLog.\n\nlet _Log;\nfunction getLoggingPackage() {\n  if (! _Log) {\n    _Log = require(\"../tool-env/isopackets.js\")\n      .loadIsopackage('logging')\n      .Log;\n  }\n\n  // Since no other process will be listening to stdout and parsing it,\n  // print directly in the same format as log messages from other apps\n  _Log.outputFormat = 'colored-text';\n\n  return _Log;\n};\n\nvar RunLog = function () {\n  var self = this;\n\n  self.rawLogs = false;\n\n  self.messages = []; // list of log objects\n  self.maxLength = 100;\n\n  // If non-null, the last thing logged was \"server restarted\"\n  // message, and the value will be the number of consecutive such\n  // messages that have been logged with no other intervening messages\n  self.consecutiveRestartMessages = null;\n  self.consecutiveClientRestartMessages = null;\n\n  // If non-null, the last thing that was logged was a temporary\n  // message (with a carriage return but no newline), and this is its\n  // length.\n  self.temporaryMessageLength = null;\n};\n\n_.extend(RunLog.prototype, {\n  _record: function (msg) {\n    var self = this;\n\n    self.messages.push(msg);\n    if (self.messages.length > self.maxLength) {\n      self.messages.shift();\n    }\n  },\n\n  _clearSpecial: function () {\n    var self = this;\n\n    if (self.consecutiveRestartMessages) {\n      self.consecutiveRestartMessages = null;\n      Console.info();\n    }\n\n    if (self.consecutiveClientRestartMessages) {\n      self.consecutiveClientRestartMessages = null;\n      Console.info();\n    }\n\n    if (self.temporaryMessageLength) {\n      var spaces = new Array(self.temporaryMessageLength + 1).join(' ');\n      process.stdout.write(spaces + Console.CARRIAGE_RETURN);\n      self.temporaryMessageLength = null;\n    }\n  },\n\n  setRawLogs: function (rawLogs) {\n    this.rawLogs = !!rawLogs;\n  },\n\n  logAppOutput: function (line, isStderr) {\n    var self = this;\n\n    var Log = getLoggingPackage();\n\n    var obj = (isStderr ?\n               Log.objFromText(line, { level: 'warn', stderr: true }) :\n               Log.parse(line) || Log.objFromText(line));\n    self._record(obj);\n\n    self._clearSpecial();\n    if (self.rawLogs) {\n      Console[isStderr ? \"rawError\" : \"rawInfo\"](line + \"\\n\");\n    } else {\n      // XXX deal with test server logging differently?!\n      return fiberHelpers.noYieldsAllowed(function() {\n        Console.rawInfo(Log.format(obj, { color: true }) + \"\\n\");\n      });\n    }\n  },\n\n  // Log the message.\n  //  msg: message\n  //  options:\n  //    - arrow: if true, preface with => and wrap accordingly.\n  log: function (msg, options) {\n    var self = this;\n    options = options || {};\n    var obj = {\n      time: new Date,\n      message: msg\n      // in the future, might want to add something else to\n      // distinguish messages from runner from message from the app,\n      // but for now, nothing would use it, so we'll keep it simple\n    };\n    self._record(obj);\n\n    self._clearSpecial();\n\n    // Process the options. By default, we want to wordwrap the message with\n    // Console.info. If we ask for raw output, then we don't want to do that. If\n    // we ask for an arrow, we want to wrap around with => as the bulletPoint.\n    Console[options.arrow ? 'arrowInfo' : 'info'](msg);\n  },\n\n  // Write a message to the terminal that will get overwritten by the\n  // next message logged. (Don't put it in the log that getLog\n  // returns.)\n  // XXX Maybe this should return an object that you have to pass to the\n  //     subsequent log call, and only such a log call will overwrite it (and an\n  //     intervening log call will cause this to stay on the screen)?\n  //     eg, a log call from the updater can interweave with the logTemporary\n  //     calls in run-all.js\n  logTemporary: function (msg) {\n    var self = this;\n\n    self._clearSpecial();\n    process.stdout.write(msg + Console.CARRIAGE_RETURN);\n    self.temporaryMessageLength = msg.length;\n  },\n\n  logRestart: function () {\n    var self = this;\n\n    if (self.consecutiveRestartMessages) {\n      // replace old message in place. this assumes that the new restart message\n      // is not shorter than the old one.\n      process.stdout.write(Console.CARRIAGE_RETURN);\n      self.messages.pop();\n      self.consecutiveRestartMessages ++;\n    } else {\n      self._clearSpecial();\n      self.consecutiveRestartMessages = 1;\n    }\n\n    var message = \"=> Meteor server restarted\";\n    if (self.consecutiveRestartMessages > 1) {\n      message += \" (x\" + self.consecutiveRestartMessages + \")\";\n    }\n    // no newline, so that we can overwrite it if we get another\n    // restart message right after this one\n    process.stdout.write(message);\n\n    self._record({\n      time: new Date,\n      message: message\n    });\n  },\n\n  logClientRestart: function () {\n    var self = this;\n\n    if (self.consecutiveClientRestartMessages) {\n      // replace old message in place. this assumes that the new restart message\n      // is not shorter than the old one.\n      process.stdout.write(Console.CARRIAGE_RETURN);\n      self.messages.pop();\n      self.consecutiveClientRestartMessages ++;\n    } else {\n      self._clearSpecial();\n      self.consecutiveClientRestartMessages = 1;\n    }\n\n    var message = \"=> Client modified -- refreshing\";\n    if (self.consecutiveClientRestartMessages > 1) {\n      message += \" (x\" + self.consecutiveClientRestartMessages + \")\";\n    }\n    // no newline, so that we can overwrite it if we get another\n    // restart message right after this one\n    process.stdout.write(message);\n\n    self._record({\n      time: new Date,\n      message: message\n    });\n  },\n\n  finish: function () {\n    var self = this;\n\n    self._clearSpecial();\n  },\n\n  clearLog: function () {\n    var self = this;\n    self.messages = [];\n  },\n\n  getLog: function () {\n    var self = this;\n    return self.messages;\n  }\n});\n\n// Create a singleton instance of RunLog. Expose its public methods on the\n// object you get with require('./run-log.js').\nvar runLogInstance = new RunLog;\n_.each(\n  ['log', 'logTemporary', 'logRestart', 'logClientRestart', 'logAppOutput',\n   'setRawLogs', 'finish', 'clearLog', 'getLog'],\n  function (method) {\n    exports[method] = _.bind(runLogInstance[method], runLogInstance);\n  });\n"],"file":"tools/runners/run-log.js.map"}