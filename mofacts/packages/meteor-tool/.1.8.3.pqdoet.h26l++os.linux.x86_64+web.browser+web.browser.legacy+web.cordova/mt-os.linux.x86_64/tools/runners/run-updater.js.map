{"version":3,"sources":["/tools/runners/run-updater.js"],"names":["_","require","Fiber","fiberHelpers","Console","Updater","self","timer","extend","prototype","start","Error","check","_check","setInterval","updater","tryToDownloadUpdate","showBanner","e","debug","stack","stop","clearInterval","exports"],"mappings":"AAAA,IAAIA,CAAC,GAAGC,OAAO,CAAC,YAAD,CAAf;;AACA,IAAIC,KAAK,GAAGD,OAAO,CAAC,QAAD,CAAnB;;AACA,IAAIE,YAAY,GAAGF,OAAO,CAAC,2BAAD,CAA1B;;AACA,IAAIG,OAAO,GAAGH,OAAO,CAAC,uBAAD,CAAP,CAAiCG,OAA/C;;AAEA,IAAIC,OAAO,GAAG,YAAY;AACxB,MAAIC,IAAI,GAAG,IAAX;AACAA,EAAAA,IAAI,CAACC,KAAL,GAAa,IAAb;AACD,CAHD,C,CAKA;AACA;AACA;;;AACAP,CAAC,CAACQ,MAAF,CAASH,OAAO,CAACI,SAAjB,EAA4B;AAC1BC,EAAAA,KAAK,EAAE,YAAY;AACjB,QAAIJ,IAAI,GAAG,IAAX;;AAEA,QAAIA,IAAI,CAACC,KAAT,EAAgB;AACd,YAAM,IAAII,KAAJ,CAAU,kBAAV,CAAN;AACD,KALgB,CAOjB;AACA;;;AACA,aAAeC,KAAf;AAAA,sCAAuB;AACrBN,QAAAA,IAAI,CAACO,MAAL;AACD,OAFD;AAAA;;AAIAP,IAAAA,IAAI,CAACC,KAAL,GAAaO,WAAW,CAACF,KAAD,EAAQ,IAAI,EAAJ,GAAS,EAAT,GAAc,IAAtB,CAAxB,CAbiB,CAejB;AACA;;AACAA,IAAAA,KAAK;AACN,GAnByB;AAqB1BC,EAAAA,MAAM,EAAE,YAAY;AAClB,QAAIP,IAAI,GAAG,IAAX;;AACA,QAAIS,OAAO,GAAGd,OAAO,CAAC,yBAAD,CAArB;;AACA,QAAI;AACFc,MAAAA,OAAO,CAACC,mBAAR,CAA4B;AAACC,QAAAA,UAAU,EAAE;AAAb,OAA5B;AACD,KAFD,CAEE,OAAOC,CAAP,EAAU;AACV;AACA;AACAd,MAAAA,OAAO,CAACe,KAAR,CAAc,uBAAd;AACAf,MAAAA,OAAO,CAACe,KAAR,CAAcD,CAAC,CAACE,KAAhB;AACA;AACD;AACF,GAjCyB;AAmC1B;AACA;AACAC,EAAAA,IAAI,EAAE,YAAY;AAChB,QAAIf,IAAI,GAAG,IAAX;;AAEA,QAAIA,IAAI,CAACC,KAAT,EAAgB;AACd;AACD;;AACDe,IAAAA,aAAa,CAAChB,IAAI,CAACC,KAAN,CAAb;AACAD,IAAAA,IAAI,CAACC,KAAL,GAAa,IAAb;AACD;AA7CyB,CAA5B;;AAiDAgB,OAAO,CAAClB,OAAR,GAAkBA,OAAlB","sourcesContent":["var _ = require('underscore');\nvar Fiber = require('fibers');\nvar fiberHelpers = require('../utils/fiber-helpers.js');\nvar Console = require('../console/console.js').Console;\n\nvar Updater = function () {\n  var self = this;\n  self.timer = null;\n};\n\n// XXX make it take a runLog?\n// XXX need to deal with updater writing messages (bypassing old\n// stdout interception.. maybe it should be global after all..)\n_.extend(Updater.prototype, {\n  start: function () {\n    var self = this;\n\n    if (self.timer) {\n      throw new Error(\"already running?\");\n    }\n\n    // Check every 3 hours. (Should not share buildmessage state with\n    // the main fiber.)\n    async function check() {\n      self._check();\n    }\n\n    self.timer = setInterval(check, 3 * 60 * 60 * 1000);\n\n    // Also start a check now, but don't block on it. (This should\n    // not share buildmessage state with the main fiber.)\n    check();\n  },\n\n  _check: function () {\n    var self = this;\n    var updater = require('../packaging/updater.js');\n    try {\n      updater.tryToDownloadUpdate({showBanner: true});\n    } catch (e) {\n      // oh well, this was the background. Only show errors if we are in debug\n      // mode.\n      Console.debug(\"Error inside updater.\");\n      Console.debug(e.stack);\n      return;\n    }\n  },\n\n  // Returns immediately. However if an update check is currently\n  // running it will complete in the background. Idempotent.\n  stop: function () {\n    var self = this;\n\n    if (self.timer) {\n      return;\n    }\n    clearInterval(self.timer);\n    self.timer = null;\n  }\n});\n\n\nexports.Updater = Updater;\n"],"file":"tools/runners/run-updater.js.map"}