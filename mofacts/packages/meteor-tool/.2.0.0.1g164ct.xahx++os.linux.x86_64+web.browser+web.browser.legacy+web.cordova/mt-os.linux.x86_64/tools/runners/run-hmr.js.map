{"version":3,"sources":["/tools/runners/run-hmr.js"],"names":["module","export","HMRServer","WS","link","default","v","runLog","crypto","AssertionError","Anser","constructor","proxy","hmrPath","secret","projectContext","wsServer","connByArch","Object","create","started","changeSetsByArch","maxChangeSets","cacheKeys","trimmedArchUntil","start","Error","Server","noServer","server","on","req","res","head","url","handleUpgrade","conn","_handleWsConn","stop","close","registered","connArch","_message","message","JSON","parse","type","arch","appId","appIdentifier","send","stringify","reason","length","timingSafeEqual","Buffer","from","push","after","trimmedUntil","changeSets","reloadable","archChangeSets","newChanges","filter","linkedAt","archConns","index","indexOf","splice","_sendAll","values","forEach","conns","setAppState","state","lines","getLog","map","line","ansiToHtml","escapeForHtml","log","compare","getFileOutput","name","hmrAvailable","files","cacheKey","previousCacheKey","previous","findLastChangeset","Date","now","_trimChangeSets","addedFiles","changedFiles","removedFilePaths","unreloadable","onlyReplaceableChanges","fileHashes","compareFiles","unreloadableHashes","couldCompare","saveFileDetails","file","content","toStringWithSourceMap","path","absModuleId","meteorInstallOptions","result","id","_createId","eager","removed","Math","random","_checkReloadable","bare","jsonData","previousHashes","Map","previousUnreloadable","currentFiles","currentHashes","unseenModules","fileConfig","ignoreHash","targetPath","sourcePath","implicit","sourceMap","mainModule","imported","alias","lazy","_inputHash","set","inputHash","config","previousInputHash","previousConfig","get","delete","Array","keys","unreloadableChanged","some","hash","i"],"mappings":"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","sourcesContent":["import WS from 'ws';\nimport runLog from './run-log.js';\nimport crypto from 'crypto';\nimport { AssertionError } from 'assert';\nimport Anser from \"anser\";\n\nexport class HMRServer {\n  constructor({ proxy, hmrPath, secret, projectContext }) {\n    this.proxy = proxy;\n    this.projectContext = projectContext;\n\n    this.hmrPath = hmrPath;\n    this.secret = secret;\n\n    this.wsServer = null;\n    this.connByArch = Object.create(null);\n    this.started = false;\n\n    this.changeSetsByArch = Object.create(null);\n\n    this.maxChangeSets = 300;\n    this.cacheKeys = Object.create(null);\n    this.trimmedArchUntil = Object.create(null);\n\n    this.started = false;\n  }\n\n  start() {\n    if (!this.proxy.started) {\n      throw new Error('Proxy must be started before HMR Server');\n    }\n\n    this.wsServer = new WS.Server({\n      noServer: true,\n    });\n    this.proxy.server.on('upgrade', (req, res, head) => {\n      if (req.url === this.hmrPath) {\n        this.wsServer.handleUpgrade(req, res, head, (conn) => {\n          this._handleWsConn(conn);\n        });\n      }\n    });\n\n    this.started = true;\n  }\n\n  stop() {\n    this.wsServer.close();\n    this.connByArch = Object.create(null);\n  }\n\n  _handleWsConn(conn) {\n    let registered = false;\n    let connArch = null;\n    conn.on('message', (_message) => {\n      const message = JSON.parse(_message);\n\n      switch (message.type) {\n        case 'register': {\n          const { arch, appId, secret = '' } = message;\n\n          if (appId !== this.projectContext.appIdentifier) {\n            // A different app is trying to request changes\n            conn.send(JSON.stringify({\n              type: 'register-failed',\n              reason: 'wrong-app'\n            }));\n          }\n          if (\n            secret.length !== this.secret.length ||\n            !crypto.timingSafeEqual(Buffer.from(secret), Buffer.from(this.secret))\n          ) {\n            conn.send(JSON.stringify({\n              type: 'register-failed',\n              reason: 'wrong-secret'\n            }));\n            conn.close();\n            return;\n          }\n\n          this.connByArch[arch] = this.connByArch[arch] || [];\n          this.connByArch[arch].push(conn);\n          connArch = arch;\n          registered = true;\n          break;\n        }\n\n        case 'request-changes': {\n          if (!registered) {\n            // Might have sent the wrong secret or be the wrong app\n            // Even if we closed the connection, it might still handle\n            // this message.\n            return;\n          }\n          const { after, arch } = message;\n\n          const trimmedUntil = this.trimmedArchUntil[arch] || 0;\n          if (trimmedUntil > after) {\n            // We've removed changeSets needed for the client to update with HMR\n            conn.send(\n              JSON.stringify({\n                type: 'changes',\n                changeSets: [\n                  { reloadable: false }\n                ]\n              })\n            );\n            return;\n          }\n\n          const archChangeSets = this.changeSetsByArch[arch] || [];\n          const newChanges = archChangeSets.filter(({ linkedAt }) => {\n            return linkedAt > after;\n          });\n\n          conn.send(JSON.stringify({\n            type: 'changes',\n            changeSets: newChanges\n          }));\n\n          break;\n        }\n\n        default:\n          throw new Error(`Unknown HMR message ${message.type}`);\n      }\n    });\n\n    // TODO: should use pings to detect disconnected sockets\n    conn.on('close', () => {\n      if (!connArch) {\n        return;\n      }\n\n      const archConns = this.connByArch[connArch] || [];\n      const index = archConns.indexOf(conn);\n      if (index > -1) {\n        archConns.splice(\n          index,\n          1\n        );\n      }\n    });\n  }\n\n  _sendAll(message) {\n    Object.values(this.connByArch).forEach(conns => {\n      conns.forEach(conn => {\n        conn.send(JSON.stringify(message));\n      });\n    });\n  }\n\n  setAppState(state) {\n    if (state === 'error') {\n      const lines = runLog.getLog().map(line => {\n        return Anser.ansiToHtml(Anser.escapeForHtml(line.message))\n      });\n      this._sendAll({\n        type: 'app-state',\n        state: 'error',\n        log: lines\n      });\n    } else if (state === 'okay') {\n      this._sendAll({\n        type: 'app-state',\n        state: 'okay'\n      });\n    }\n  }\n\n  compare({ name, arch, hmrAvailable, files, cacheKey }, getFileOutput) {\n    this.changeSetsByArch[arch] = this.changeSetsByArch[arch] || [];\n    const previousCacheKey = this.cacheKeys[`${arch}-${name}`];\n\n    if (previousCacheKey === cacheKey) {\n      return;\n    }\n\n    this.cacheKeys[`${arch}-${name}`] = cacheKey;\n    const previous = this.findLastChangeset(name, arch) || {};\n\n    if (!hmrAvailable) {\n      this.changeSetsByArch[arch].push({\n        name,\n        reloadable: false,\n        cacheKey,\n        // TODO: use more accurate name\n        linkedAt: Date.now()\n      });\n      this._trimChangeSets(arch);\n      return;\n    }\n\n    const {\n      addedFiles,\n      changedFiles,\n      removedFilePaths,\n      unreloadable,\n      onlyReplaceableChanges,\n      fileHashes\n    } = this.compareFiles(\n      previous.fileHashes,\n      previous.unreloadableHashes,\n      files\n    );\n\n    const couldCompare = !!previous.fileHashes\n    const reloadable = couldCompare &&\n      onlyReplaceableChanges &&\n      removedFilePaths.length === 0;\n\n    function saveFileDetails(file) {\n      return {\n        content: getFileOutput(file).toStringWithSourceMap({}),\n        path: file.absModuleId,\n        meteorInstallOptions: file.meteorInstallOptions\n      };\n    }\n\n    const result = {\n      fileHashes,\n      unreloadableHashes: unreloadable,\n      reloadable,\n      addedFiles: reloadable ? addedFiles.map(saveFileDetails) : [],\n      changedFiles: reloadable ? changedFiles.map(saveFileDetails) : [],\n      linkedAt: Date.now(),\n      id: this._createId(),\n      name\n    };\n\n    // TODO: we should also store the latest change set\n    // for each arch and name someplace else so it doesn't\n    // get removed when trimming changesets\n    this.changeSetsByArch[arch].push(result);\n    this._trimChangeSets(arch);\n\n    // Try to do HMR without waiting for the build to finish\n    // If it fails, it will retry after the build finishes so\n    // it can fall back to hot code push\n    if (this.connByArch[arch]) {\n      this.connByArch[arch].forEach(conn => {\n        conn.send(JSON.stringify({\n          type: 'changes',\n          changeSets: [result],\n          eager: true\n        }));\n      });\n    }\n    return;\n  }\n\n  _trimChangeSets(arch) {\n    if (this.changeSetsByArch[arch].length > this.maxChangeSets) {\n      const removed = this.changeSetsByArch[arch].splice(\n        0,\n        this.changeSetsByArch[arch].length - this.maxChangeSets\n      );\n      this.trimmedArchUntil[arch] = removed[removed.length - 1].linkedAt;\n    }\n  }\n\n  _createId() {\n    return `${Date.now()}-${Math.random()}`;\n  }\n\n  _checkReloadable(file) {\n    return file.absModuleId &&\n      !file.bare &&\n      // TODO: support jsonData\n      !file.jsonData &&\n      file.meteorInstallOptions\n  }\n\n  compareFiles(previousHashes = new Map(), previousUnreloadable = [], currentFiles) {\n    const unreloadable = [];\n    const currentHashes = new Map();\n    const unseenModules = new Map(previousHashes);\n\n    const changedFiles = [];\n    const addedFiles = [];\n    let onlyReplaceableChanges = true;\n\n    currentFiles.forEach(file => {\n      let fileConfig;\n      let ignoreHash = false;\n\n      if (file.targetPath !== file.sourcePath && file.implicit) {\n        // The import scanner created this file as an alias to the target path\n        // This file's content does not change when the hash does, only the\n        // content of the new file created at the target path.\n        ignoreHash = true;\n        fileConfig = JSON.stringify({\n          implicit: file.implicit,\n          sourcePath: file.sourcePath,\n          targetPath: file.targetPath\n        });\n      } else {\n        fileConfig = JSON.stringify({\n          meteorInstallOptions: file.meteorInstallOptions,\n          absModuleId: file.absModuleId,\n          sourceMap: !!file.sourceMap,\n          mainModule: file.mainModule,\n          imported: file.imported,\n          alias: file.alias,\n          lazy: file.lazy,\n          bare: file.bare\n        })\n      }\n\n      if (\n        !this._checkReloadable(file)\n      ) {\n        unreloadable.push(`${fileConfig}-${file._inputHash}`);\n        return;\n      }\n\n      currentHashes.set(file.absModuleId, {\n        inputHash: file._inputHash,\n        config: fileConfig\n      });\n\n      const {\n        inputHash: previousInputHash,\n        config: previousConfig\n      } = previousHashes.get(file.absModuleId) || {};\n\n      if (!previousInputHash) {\n        addedFiles.push(file);\n      } else if (previousConfig !== fileConfig) {\n        onlyReplaceableChanges = false;\n      } else if (!ignoreHash && previousInputHash !== file._inputHash) {\n        changedFiles.push(file);\n      }\n\n      unseenModules.delete(file.absModuleId);\n    });\n\n    const removedFilePaths = Array.from(unseenModules.keys());\n    if (onlyReplaceableChanges) {\n      const unreloadableChanged = unreloadable.length !== previousUnreloadable.length ||\n        unreloadable.some((hash, i) => hash !== previousUnreloadable[i]);\n      onlyReplaceableChanges = !unreloadableChanged;\n    }\n\n    return {\n      fileHashes: currentHashes,\n      addedFiles,\n      changedFiles,\n      removedFilePaths,\n      unreloadable,\n      onlyReplaceableChanges,\n    };\n  }\n\n  findLastChangeset(name, arch) {\n    const changeSets = this.changeSetsByArch[arch] || [];\n    for (let i = changeSets.length - 1; i >= 0; i--) {\n      if (changeSets[i].name === name) {\n        return changeSets[i];\n      }\n    }\n  }\n}\n"],"file":"tools/runners/run-hmr.js.map"}