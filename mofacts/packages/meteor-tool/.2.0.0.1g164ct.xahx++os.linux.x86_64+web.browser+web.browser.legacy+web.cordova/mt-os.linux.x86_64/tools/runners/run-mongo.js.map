{"version":3,"sources":["/tools/runners/run-mongo.js"],"names":["_objectWithoutProperties","module","link","default","v","MongoExitCodes","loadIsopackage","files","require","utils","fiberHelpers","runLog","child_process","_","Console","runMongoShell","url","mongoPath","pathJoin","getDevBundle","mongoUrl","parse","auth","split","ssl","query","args","push","hostname","port","pathname","spawn","convertToOSPath","stdio","spawnMongod","mongodPath","dbPath","replSetName","process","env","METEOR_MONGO_BIND_IP","arch","platform","extend","LANG","LC_ALL","findMongoPids","dbDir_unused","promise","makeFulfillablePromise","exec","error","stdout","stderr","additionalInfo","JSON","stringify","code","reject","Error","mongo_pids","each","line","m","match","maxBuffer","pids","found_pid","parseInt","found_port","pid","app_dir","resolve","await","dbDir","psScript","LANGUAGE","Object","assign","message","ret","length","foundPid","foundPort","foundPath","findMongoPort","kill","e","mongoPort","portFile","exists","readFile","replace","net","Promise","client","connect","end","on","catch","findMongoAndKillItDead","processInfo","attempts","signal","sleepMs","mongodLockFile","unlink","StoppedDuringLaunch","launchMongo","options","onExit","noOplog","mongod_path","METEOR_TEST_FAKE_MONGOD_CONTROL_PORT","multiple","fakeMongodCommand","getCurrentToolsDir","subHandles","stopped","handle","stopPromise","stop","onStopped","yieldingMethod","object","methodName","race","err","res","launchOneMongoAndWaitForReadyForInitiate","mkdir_p","proc","allowKilling","rm_recursive","portFileExists","matchingPortFileExists","dbFiles","readdir","dbFile","test","removeListener","procExitHandler","bindEnvironment","stderrOutput","detectedErrors","listening","replSetReadyToBeInitiated","replSetReady","maybeReadyToTalk","readyToTalkPromise","stdoutOnData","stopOrReadyPromise","data","freeSpace","warn","command","badLocale","setEncoding","initiateReplSetAndWaitForReady","MongoClient","Server","NpmModuleMongodb","poolSize","socketOptions","connectTimeoutMS","db","configuration","_id","version","protocolVersion","members","host","priority","config","admin","replSetGetConfig","has","replSetInitiate","replSetReconfig","force","writableTimestamp","Date","now","ismaster","isMaster","status","replSetGetStatus","close","dbBasePath","projectLocalDir","range","i","writeFile","MongoRunner","self","onFailure","shuttingDown","resolveStartupPromise","errorCount","errorTimer","restartTimer","firstStart","suppressExitMessage","MRp","prototype","start","_startOrRestart","bind","_exited","_allowStartupToReturn","log","slice","join","_fail","clearTimeout","setTimeout","explanation","symbol","longText","_mongoHosts","ports","map","oplogUrl","exports"],"mappings":"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","sourcesContent":["import { MongoExitCodes } from '../utils/mongo-exit-codes';\n\nvar files = require('../fs/files');\nvar utils = require('../utils/utils.js');\nvar fiberHelpers = require('../utils/fiber-helpers.js');\nvar runLog = require('./run-log.js');\nvar child_process = require('child_process');\n\nvar _ = require('underscore');\nimport { loadIsopackage } from '../tool-env/isopackets.js';\nvar Console = require('../console/console.js').Console;\n\n// Given a Mongo URL, open an interative Mongo shell on this terminal\n// on that database.\nvar runMongoShell = function (url) {\n  var mongoPath = files.pathJoin(\n    files.getDevBundle(), 'mongodb', 'bin', 'mongo'\n  );\n  // XXX mongo URLs are not real URLs (notably, the comma-separation for\n  // multiple hosts). We've had a little better luck using the mongodb-uri npm\n  // package.\n  var mongoUrl = require('url').parse(url);\n  var auth = mongoUrl.auth && mongoUrl.auth.split(':');\n  var ssl = require('querystring').parse(mongoUrl.query).ssl === \"true\";\n\n  var args = [];\n  if (ssl) {\n    args.push('--ssl');\n  }\n  if (auth) {\n    args.push('-u', auth[0]);\n  }\n  if (auth) {\n    args.push('-p', auth[1]);\n  }\n  args.push(mongoUrl.hostname + ':' + mongoUrl.port + mongoUrl.pathname);\n\n  child_process.spawn(files.convertToOSPath(mongoPath),\n    args, { stdio: 'inherit' });\n};\n\n// Start mongod with a dummy replSet and wait for it to listen.\nfunction spawnMongod(mongodPath, port, dbPath, replSetName) {\n  const child_process = require('child_process');\n\n  mongodPath = files.convertToOSPath(mongodPath);\n  dbPath = files.convertToOSPath(dbPath);\n\n  const args = [\n    // nb: cli-test.sh and findMongoPids make strong assumptions about the\n    // order of the arguments! Check them before changing any arguments.\n    '--bind_ip', (process.env.METEOR_MONGO_BIND_IP || '127.0.0.1'),\n    '--port', port,\n    '--dbpath', dbPath,\n    // Use an 8MB oplog rather than 256MB. Uses less space on disk and\n    // initializes faster. (Not recommended for production!)\n    '--oplogSize', '8',\n    '--replSet', replSetName,\n    '--noauth',\n\n    // Starting with version 4.0.8/4.1.10, MongoDB performs a step down\n    // procedure if the primary receives a SIGTERM signal\n    // (https://jira.mongodb.org/browse/SERVER-38994). During this procedure,\n    // the process doesn't shut down for up to ten seconds until a secondary\n    // becomes the new primary. Since Meteor starts a single-node replica set,\n    // this is unnecessary because there are no secondaries. The following\n    // parameter disables the step down. This will be the default for single-\n    // node replica sets in MongoDB 4.3 (relevant commit: https://git.io/JeNkT),\n    // so the parameter can be removed in the future.\n    '--setParameter', 'waitForStepDownOnNonCommandShutdown=false'\n  ];\n\n  // Use mmapv1 on 32bit platforms, as our binary doesn't support WT\n  if (process.arch === 'ia32') {\n    args.push('--storageEngine', 'mmapv1', '--smallfiles');\n  } else if (process.platform !== 'linux') {\n    // MongoDB 4, which we use on 64-bit systems, displays a banner in the\n    // Mongo shell about a free monitoring service, which can be disabled\n    // with this flag. However, the custom Linux build (see MONGO_BASE_URL\n    // in scripts/generate-dev-bundle.sh) neither displays the banner nor\n    // supports the flag, so it's safe/important to avoid passing the flag\n    // to mongod on 64-bit linux.\n    args.push('--enableFreeMonitoring', 'off');\n  }\n\n  return child_process.spawn(mongodPath, args, {\n    // Apparently in some contexts, Mongo crashes if your locale isn't set up\n    // right. I wasn't able to reproduce it, but many people on #4019\n    // were. Let's default a couple environment variables to English UTF-8 if\n    // they aren't set already. If these few aren't good enough, we'll at least\n    // detect the locale error and print a link to #4019 (look for\n    // `detectedErrors.badLocale` below).\n    env: _.extend({\n      LANG: 'en_US.UTF-8',\n      LC_ALL: 'en_US.UTF-8'\n    }, process.env)\n  });\n}\n\n// Find all running Mongo processes that were started by this program\n// (even by other simultaneous runs of this program). If passed,\n// dbDir and port act as filters on the list of running mongos.\n//\n// Yields. Returns an array of objects with keys pid, port, dbDir.\nvar findMongoPids;\nif (process.platform === 'win32') {\n  // Windows doesn't have a ps equivalent that (reliably) includes the command\n  // line, so approximate using the combined output of tasklist and netstat.\n  findMongoPids = function (dbDir_unused, port) {\n    var promise = fiberHelpers.makeFulfillablePromise();\n\n    child_process.exec('tasklist /fi \"IMAGENAME eq mongod.exe\"',\n      function (error, stdout, stderr) {\n        if (error) {\n          var additionalInfo = JSON.stringify(error);\n          if (error.code === 'ENOENT') {\n            additionalInfo = \"tasklist wasn't found on your system, it usually can be found at C:\\\\Windows\\\\System32\\\\.\";\n          }\n          promise.reject(\n            new Error(\"Couldn't run tasklist.exe: \" + additionalInfo)\n          );\n          return;\n        } else {\n          // Find the pids of all mongod processes\n          var mongo_pids = [];\n          _.each(stdout.split('\\n'), function (line) {\n            var m = line.match(/^mongod.exe\\s+(\\d+) /);\n            if (m) {\n              mongo_pids[m[1]] = true;\n            }\n          });\n\n          // Now get the corresponding port numbers\n          child_process.exec(\n            'netstat -ano',\n            {maxBuffer: 1024 * 1024 * 10},\n            function (error, stdout, stderr) {\n            if (error) {\n              promise.reject(\n                new Error(\"Couldn't run netstat -ano: \" +\n                          JSON.stringify(error))\n              );\n              return;\n            } else {\n              var pids = [];\n              _.each(stdout.split('\\n'), function (line) {\n                var m = line.match(/^\\s*TCP\\s+\\S+:(\\d+)\\s+\\S+\\s+LISTENING\\s+(\\d+)/);\n                if (m) {\n                  var found_pid =  parseInt(m[2], 10);\n                  var found_port = parseInt(m[1], 10);\n\n                  // We can't check the path app_dir so assume it always matches\n                  if (mongo_pids[found_pid] && (!port || port === found_port)) {\n                    // Note that if the mongo rest interface is enabled the\n                    // initial port + 1000 is also likely to be open.\n                    // So remove the pid so we only match it once.\n                    delete mongo_pids[found_pid];\n                    pids.push({\n                      pid: found_pid,\n                      port: found_port,\n                      app_dir: null});\n                  }\n                }\n              });\n\n              promise.resolve(pids);\n            }\n          });\n        }\n      });\n\n    return promise.await();\n  };\n} else {\n  findMongoPids = function (dbDir, port) {\n    var promise = fiberHelpers.makeFulfillablePromise();\n\n    // 'ps ax' should be standard across all MacOS and Linux.\n    // However, ps on OS X corrupts some non-ASCII characters in arguments,\n    // such as т (CYRILLIC SMALL LETTER TE), leading to this function\n    // failing to properly match pathnames with those characters.  #3999\n    //\n    // pgrep appears to do a better job (and has output that is roughly\n    // similar; it lacks a few fields that we don't care about).  Plus,\n    // it can do some of the grepping for us.\n    //\n    // However, 'pgrep' only started shipping with OS X 10.8 (and may be less\n    // common on Linux too), so we check to see if it exists and fall back to\n    // 'ps' if we can't find it.\n    //\n    // We avoid using pgrep on Linux, because some versions of Linux pgrep\n    // require you to pass -a/--list-full to include the arguments in the\n    // output, and other versions fail if you pass that option. We have not\n    // observed the Unicode corruption on Linux, so using ps ax there is fine.\n    var psScript = 'ps ax';\n    if (process.platform === 'darwin') {\n      psScript =\n        'if type pgrep >/dev/null 2>&1; then ' +\n        // -lf means to display and match against full argument lists.\n        // pgrep exits 1 if no processes match the argument; we're OK\n        // considering this as a success, but we don't want other errors\n        // to be ignored.  Note that this is sh not bash, so we can't use\n        // [[.\n        'pgrep -lf mongod; test \"$?\" -eq 0 -o \"$?\" -eq 1;' +\n        'else ps ax; fi';\n    }\n\n    // If the child process output includes unicode, make sure it's\n    // handled properly.\n    const {\n      LANG = \"en_US.UTF-8\",\n      LC_ALL = LANG,\n      LANGUAGE = LANG,\n      // Remainder of process.env without above properties.\n      ...env\n    } = process.env;\n\n    // Make sure all three properties are set to the same value, which\n    // defaults to \"en_US.UTF-8\" or whatever LANG was already set to.\n    Object.assign(env, { LANG, LC_ALL, LANGUAGE });\n\n    child_process.exec(\n      psScript,\n      {\n        env,\n        // we don't want this to randomly fail just because you're running\n        // lots of processes. 10MB should be more than ps ax will ever\n        // spit out; the default is 200K, which at least one person hit\n        // (#2158).\n        maxBuffer: 1024 * 1024 * 10,\n      },\n      function (error, stdout, stderr) {\n        if (error) {\n          promise.reject(\n            new Error(\"Couldn't run ps ax: \" +\n                      JSON.stringify(error) + \"; \" +\n                      error.message)\n          );\n          return;\n        }\n\n        var ret = [];\n        _.each(stdout.split('\\n'), function (line) {\n          // Matches mongos we start. Note that this matches\n          // 'fake-mongod' (our mongod stub for automated tests) as well\n          // as 'mongod'.\n          var m = line.match(/^\\s*(\\d+).+mongod .+--port (\\d+) --dbpath (.+(?:\\/|\\\\)db)/);\n          if (m && m.length === 4) {\n            var foundPid =  parseInt(m[1], 10);\n            var foundPort = parseInt(m[2], 10);\n            var foundPath = m[3];\n\n            if ( (! port || port === foundPort) &&\n                 (! dbDir || dbDir === foundPath)) {\n              ret.push({\n                pid: foundPid,\n                port: foundPort,\n                dbDir: foundPath\n              });\n            }\n          }\n        });\n\n        promise.resolve(ret);\n      });\n\n    return promise.await();\n  };\n}\n\n// See if mongo is running already. Yields. Returns the port that\n// mongo is running on or null if mongo is not running.\nvar findMongoPort = function (dbDir) {\n  var pids = findMongoPids(dbDir);\n\n  if (pids.length !== 1) {\n    return null;\n  }\n\n  var pid = pids[0].pid;\n  try {\n    process.kill(pid, 0); // make sure it is still alive\n  } catch (e) {\n    return null;\n  }\n\n  return pids[0].port;\n};\n\n// XXX actually -- the code below is probably more correct than the code we\n// have above for non-Windows platforms (since that code relies on\n// `findMongoPids`). But changing this a few days before the 1.1 release\n// seemed too bold. But if you're changing code around here, consider using\n// the implementation below on non-Windows platforms as well.\nif (process.platform === 'win32') {\n  // On Windows, finding the Mongo pid, checking it and extracting the port\n  // is often unreliable (XXX reliable in what specific way?). There is an\n  // easier way to find the port of running Mongo: look it up in a METEOR-\n  // PORT file that we generate when running. This may result into problems\n  // where we try to connect to a mongod that is not running, or a wrong\n  // mongod if our current app is not running but there is a left-over file\n  // lying around. This still can be better than always failing to connect.\n  findMongoPort = function (dbPath) {\n    var mongoPort = null;\n\n    var portFile = files.pathJoin(dbPath, 'METEOR-PORT');\n    if (files.exists(portFile)) {\n      mongoPort = files.readFile(portFile, 'utf8').replace(/\\s/g, '');\n    }\n\n    // Now, check if there really is a Mongo server running on this port.\n    // (The METEOR-PORT file may point to an old Mongo server that's now\n    // stopped)\n    var net = require('net');\n\n    return new Promise(resolve => {\n      var client = net.connect({\n        port: mongoPort\n      }, () => {\n        // The server is running.\n        client.end();\n        resolve(mongoPort);\n      });\n      client.on('error', () => resolve(null));\n    }).catch(() => null).await();\n  }\n}\n\n\n// Kill any mongos running on 'port'. Yields, and returns once they\n// are all dead. Throws an exception on failure.\n//\n// This is a big hammer for dealing with still running mongos, but\n// smaller hammers have failed before and it is getting tiresome.\nvar findMongoAndKillItDead = function (port, dbPath) {\n  var pids = findMongoPids(null, port);\n\n  // Go through the list serially. There really should only ever be\n  // at most one but we're not taking any chances.\n  _.each(pids, function (processInfo) {\n    var pid = processInfo.pid;\n\n    // Send kill attempts and wait. First a SIGINT, then if it isn't\n    // dead within 2 sec, SIGKILL. Check every 100ms to see if it's\n    // dead.\n    for (var attempts = 1; attempts <= 40; attempts ++) {\n      var signal = 0;\n      if (attempts === 1) {\n        signal = 'SIGINT';\n      } else if (attempts === 20 || attempts === 30) {\n        signal = 'SIGKILL';\n      }\n\n      try {\n        process.kill(pid, signal);\n      } catch (e) {\n        // it's dead. on to the next one\n        return;\n      }\n\n      utils.sleepMs(100);\n    }\n\n    // give up after 4 seconds.\n    // XXX should actually catch this higher up and print a nice\n    // error. foreseeable conditions should never result in exceptions\n    // for the user.\n    throw new Error(\"Can't kill running mongo (pid \" + pid + \").\");\n  });\n\n  // If we had to kill mongod with SIGKILL, or on Windows where all calls to\n  // `process.kill` work like SIGKILL, mongod will not have the opportunity to\n  // close gracefully. Delete a lock file that may have been left over.\n  var mongodLockFile = files.pathJoin(dbPath, \"mongod.lock\");\n  if (files.exists(mongodLockFile)) {\n    files.unlink(mongodLockFile)\n  }\n};\n\nvar StoppedDuringLaunch = function () {};\n\n// Starts a single instance of mongod, and configures it properly as a singleton\n// replica set. Yields.  Returns once the mongod is successfully listening (or\n// the process exited).\n//\n// Takes an onExit handler, which will be invoked when the process exits (which\n// may be before or after this function returns depending on whether or not it\n// ever successfully started).\n//\n// If the 'multiple' option is set, it actually sets up three mongod instances\n// (launching the second and third on the next two ports after the specified\n// port). In this case, if any of the three instances exit for any reason, all\n// are killed (and onExit is then invoked). Also, the entirety of all three\n// databases is deleted before starting up.  This is mode intended for testing\n// mongo failover, not for normal development or production use.\nvar launchMongo = function (options) {\n  var onExit = options.onExit || function () {};\n\n  var noOplog = false;\n  var mongod_path = files.pathJoin(\n    files.getDevBundle(), 'mongodb', 'bin', 'mongod'\n  );\n  var replSetName = 'meteor';\n\n  // Automated testing: If this is set, instead of starting mongod, we\n  // start our stub (fake-mongod) which can then be remote-controlled\n  // by the test.\n  if (process.env.METEOR_TEST_FAKE_MONGOD_CONTROL_PORT) {\n    if (options.multiple) {\n      throw Error(\"Can't specify multiple with fake mongod\");\n    }\n\n    var fakeMongodCommand =\n      process.platform === \"win32\" ? \"fake-mongod.bat\" : \"fake-mongod\";\n    mongod_path = files.pathJoin(\n      files.getCurrentToolsDir(), 'tools',\n      'tests', 'fake-mongod', fakeMongodCommand);\n\n    // oplog support requires sending admin commands to mongod, so\n    // it'd be hard to make fake-mongod support it.\n    noOplog = true;\n  }\n\n  var subHandles = [];\n  var stopped = false;\n  var handle = {};\n  var stopPromise = new Promise((resolve, reject) => {\n    handle.stop = function () {\n      if (stopped) {\n        return;\n      }\n      stopped = true;\n      _.each(subHandles, function (handle) {\n        handle.stop();\n      });\n\n      if (options.onStopped) {\n        options.onStopped();\n      }\n\n      reject(new StoppedDuringLaunch);\n    };\n  });\n\n  var yieldingMethod = function (object, methodName, ...args) {\n    return Promise.race([\n      stopPromise,\n      new Promise((resolve, reject) => {\n        object[methodName](...args, (err, res) => {\n          err ? reject(err) : resolve(res);\n        });\n      })\n    ]).await();\n  };\n\n  var launchOneMongoAndWaitForReadyForInitiate = function (dbPath, port,\n                                                           portFile) {\n    files.mkdir_p(dbPath, 0o755);\n\n    var proc = null;\n\n    if (options.allowKilling) {\n      findMongoAndKillItDead(port, dbPath);\n    }\n\n    if (options.multiple) {\n      // This is only for testing, so we're OK with incurring the replset\n      // setup on each startup.\n      files.rm_recursive(dbPath);\n      files.mkdir_p(dbPath, 0o755);\n    } else if (portFile) {\n      var portFileExists = false;\n      var matchingPortFileExists = false;\n      try {\n        matchingPortFileExists = +(files.readFile(portFile)) === port;\n        portFileExists = true;\n      } catch (e) {\n        if (!e || e.code !== 'ENOENT') {\n          throw e;\n        }\n      }\n\n      // If this is the first time we're using this DB, or we changed port since\n      // the last time, then we want to destroy any existing replSet\n      // configuration and create a new one. First we delete the \"local\"\n      // database if it exists. (It's a pain and slow to change the port in an\n      // existing replSet configuration. It's also a little slow to initiate a\n      // new replSet, thus the attempt to not do it unless the port changes.)\n      //\n      // In the \"multiple\" case, we just wipe out the entire database and incur\n      // the cost, because this won't affect normal users running meteor.\n      if (!matchingPortFileExists) {\n        // Delete the port file if it exists, so we don't mistakenly believe\n        // that the DB is still configured.\n        if (portFileExists) {\n          files.unlink(portFile);\n        }\n\n        try {\n          var dbFiles = files.readdir(dbPath);\n        } catch (e) {\n          if (!e || e.code !== 'ENOENT') {\n            throw e;\n          }\n        }\n        _.each(dbFiles, function (dbFile) {\n          if (/^local\\./.test(dbFile)) {\n            files.unlink(files.pathJoin(dbPath, dbFile));\n          }\n        });\n      }\n    }\n\n    // Let's not actually start a process if we yielded (eg during\n    // findMongoAndKillItDead) and we decided to stop in the middle (eg, because\n    // we're in multiple mode and another process exited).\n    if (stopped) {\n      return;\n    }\n\n    proc = spawnMongod(mongod_path, port, dbPath, replSetName);\n\n    function stop() {\n      if (proc) {\n        proc.removeListener('exit', procExitHandler);\n        proc.kill('SIGINT');\n        proc = null;\n      }\n    }\n    require(\"../tool-env/cleanup.js\").onExit(stop);\n    subHandles.push({ stop });\n\n    var procExitHandler = fiberHelpers.bindEnvironment(function (code, signal) {\n      // Defang subHandle.stop().\n      proc = null;\n\n      // Kill any other processes too. This will also remove\n      // procExitHandler from the other processes, so onExit will only be called\n      // once.\n      handle.stop();\n\n      // Invoke the outer onExit callback.\n      onExit(code, signal, stderrOutput, detectedErrors);\n    });\n    proc.on('exit', procExitHandler);\n\n    var listening = false;\n    var replSetReadyToBeInitiated = false;\n    var replSetReady = false;\n\n    var maybeReadyToTalk;\n    var readyToTalkPromise = new Promise(function (resolve) {\n      maybeReadyToTalk = function () {\n        if (resolve &&\n            listening &&\n            (noOplog || replSetReadyToBeInitiated || replSetReady)) {\n          proc.stdout.removeListener('data', stdoutOnData);\n          resolve();\n          resolve = null;\n        }\n      };\n    });\n\n    var stopOrReadyPromise = Promise.race([\n      stopPromise,\n      readyToTalkPromise,\n    ]);\n\n    var detectedErrors = {};\n    var stdoutOnData = fiberHelpers.bindEnvironment(function (data) {\n      // note: don't use \"else ifs\" in this, because 'data' can have multiple\n      // lines\n      if (/\\[initandlisten\\] Did not find local replica set configuration document at startup/.test(data) ||\n          /\\[.*\\] Locally stored replica set configuration does not have a valid entry for the current node/.test(data)) {\n        replSetReadyToBeInitiated = true;\n        maybeReadyToTalk();\n      }\n\n      if (/ \\[.*\\] waiting for connections on port/.test(data)) {\n        listening = true;\n        maybeReadyToTalk();\n      }\n\n      if (/ \\[rsSync-0\\] transition to primary complete/.test(data)) {\n        replSetReady = true;\n        maybeReadyToTalk();\n      }\n\n      if (/Insufficient free space/.test(data)) {\n        detectedErrors.freeSpace = true;\n      }\n\n      // Running against a old mmapv1 engine, probably from pre-mongo-3.2 Meteor\n      if (/created by the 'mmapv1' storage engine, so setting the active storage engine to 'mmapv1'/.test(data)) {\n        Console.warn();\n        Console.warn('Your development database is using mmapv1, '\n          + 'the old, pre-MongoDB 3.0 database engine. '\n          + 'You should consider upgrading to Wired Tiger, the new engine. '\n          + 'The easiest way to do so in development is to run '\n          + Console.command('meteor reset') + '. '\n          + \"If you'd like to migrate your database, please consult \"\n          + Console.url('https://docs.mongodb.org/v3.0/release-notes/3.0-upgrade/'))\n        Console.warn();\n      }\n\n      if (/Invalid or no user locale set/.test(data)) {\n        detectedErrors.badLocale = true;\n      }\n    });\n    proc.stdout.setEncoding('utf8');\n    proc.stdout.on('data', stdoutOnData);\n\n    var stderrOutput = '';\n    proc.stderr.setEncoding('utf8');\n    proc.stderr.on('data', function (data) {\n      stderrOutput += data;\n    });\n\n    stopOrReadyPromise.await();\n  };\n\n\n  var initiateReplSetAndWaitForReady = function () {\n    try {\n      // Load mongo so we'll be able to talk to it.\n      const {\n        MongoClient,\n        Server\n      } = loadIsopackage('npm-mongo').NpmModuleMongodb;\n\n      // Connect to the intended primary and start a replset.\n      const client = new MongoClient(\n        new Server('127.0.0.1', options.port, {\n          poolSize: 1,\n          socketOptions: {\n            connectTimeoutMS: 60000\n          }\n        })\n      );\n\n      yieldingMethod(client, 'connect');\n      const db = client.db('meteor');\n\n      if (stopped) {\n        return;\n      }\n\n      var configuration = {\n        _id: replSetName,\n        version: 1,\n        protocolVersion: 1,\n        members: [{_id: 0, host: '127.0.0.1:' + options.port, priority: 100}]\n      };\n\n      try {\n        const config = yieldingMethod(db.admin(), \"command\", {\n          replSetGetConfig: 1,\n        }).config;\n\n        // If a replication set configuration already exists, it's\n        // important that the new version number is greater than the old.\n        if (config && _.has(config, \"version\")) {\n          configuration.version = config.version + 1;\n        }\n      } catch (e) {}\n\n      if (options.multiple) {\n        // Add two more members: one of which should start as secondary but\n        // could in theory become primary, and one of which can never be\n        // primary.\n        configuration.members.push({\n          _id: 1, host: '127.0.0.1:' + (options.port + 1), priority: 5\n        });\n        configuration.members.push({\n          _id: 2, host: '127.0.0.1:' + (options.port + 2), priority: 0\n        });\n      }\n\n      try {\n        yieldingMethod(db.admin(), 'command', {\n          replSetInitiate: configuration,\n        });\n      } catch (e) {\n        if (e.message === 'already initialized') {\n          yieldingMethod(db.admin(), 'command', {\n            replSetReconfig: configuration,\n            force: true,\n          });\n        } else {\n          throw Error(\"rs.initiate error: \" + e.message);\n        }\n      }\n\n      if (stopped) {\n        return;\n      }\n\n      let writableTimestamp = Date.now();\n\n      // Wait until the primary is writable. If it isn't writable after one\n      // minute, throw an error and report the replica set status.\n      while (!stopped) {\n        const { ismaster } = yieldingMethod(db.admin(), \"command\", {\n          isMaster: 1\n        });\n\n        if (ismaster) {\n          break;\n        } else if (Date.now() - writableTimestamp > 60000) {\n          const status = yieldingMethod(db.admin(), \"command\", {\n            replSetGetStatus: 1\n          });\n\n          throw new Error(\n            \"Primary not writable after one minute. Last replica set status: \" +\n             JSON.stringify(status)\n          );\n        }\n\n        utils.sleepMs(50);\n      }\n\n      client.close(true /* means \"the app is closing the connection\" */);\n    } catch (e) {\n      // If the process has exited, we're doing another form of error\n      // handling. No need to throw random low-level errors farther.\n      if (!stopped || (e instanceof StoppedDuringLaunch)) {\n        throw e;\n      }\n    }\n  };\n\n  try {\n    if (options.multiple) {\n      var dbBasePath = files.pathJoin(options.projectLocalDir, 'dbs');\n      _.each(_.range(3), function (i) {\n        // Did we get stopped (eg, by one of the processes exiting) by now? Then\n        // don't start anything new.\n        if (stopped) {\n          return;\n        }\n        var dbPath = files.pathJoin(options.projectLocalDir, 'dbs', ''+i);\n        launchOneMongoAndWaitForReadyForInitiate(dbPath, options.port + i);\n      });\n      if (!stopped) {\n        initiateReplSetAndWaitForReady();\n      }\n    } else {\n      var dbPath = files.pathJoin(options.projectLocalDir, 'db');\n      var portFile = !noOplog && files.pathJoin(dbPath, 'METEOR-PORT');\n      launchOneMongoAndWaitForReadyForInitiate(dbPath, options.port, portFile);\n      if (!stopped && !noOplog) {\n        initiateReplSetAndWaitForReady();\n        if (!stopped) {\n          // Write down that we configured the database properly.\n          files.writeFile(portFile, options.port);\n        }\n      }\n    }\n  } catch (e) {\n    if (!(e instanceof StoppedDuringLaunch)) {\n      throw e;\n    }\n  }\n\n  if (stopped) {\n    return null;\n  }\n\n  return handle;\n};\n\n// This runs a Mongo process and restarts it whenever it fails. If it\n// restarts too often, we give up on restarting it, diagnostics are\n// logged, and onFailure is called.\n//\n// options: projectLocalDir, port, onFailure, multiple\nvar MongoRunner = function (options) {\n  var self = this;\n  self.projectLocalDir = options.projectLocalDir;\n  self.port = options.port;\n  self.onFailure = options.onFailure;\n  self.multiple = options.multiple;\n\n  self.handle = null;\n  self.shuttingDown = false;\n  self.resolveStartupPromise = null;\n\n  self.errorCount = 0;\n  self.errorTimer = null;\n  self.restartTimer = null;\n  self.firstStart = true;\n  self.suppressExitMessage = false;\n};\n\nvar MRp = MongoRunner.prototype;\n\n_.extend(MRp, {\n  // Blocks (yields) until the server has started for the first time and\n  // is accepting connections. (It might subsequently die and be\n  // restarted; we won't tell you about that.)\n  //\n  // If the server fails to start for the first time (after a few\n  // restarts), we'll print a message and give up.\n  start: function () {\n    var self = this;\n\n    if (self.handle) {\n      throw new Error(\"already running?\");\n    }\n\n    self._startOrRestart();\n\n    // Did we properly start up? Great!\n    if (self.handle) {\n      return;\n    }\n\n    // Are we shutting down? OK.\n    if (self.shuttingDown) {\n      return;\n    }\n\n    // Otherwise, wait for a successful _startOrRestart, or a failure.\n    if (! self.resolveStartupPromise) {\n      new Promise(function (resolve) {\n        self.resolveStartupPromise = resolve;\n      }).await();\n    }\n  },\n\n  // Tries to launch Mongo once.  It returns when either (a) Mongo is listening\n  // or (b) mongod exited before it got to the point of listening.\n  //\n  // (To be specific: in non-multiple mode, this means that the single mongod is\n  // listening and the primary, or that the single mongod died. In multiple\n  // mode, it means that the first mongod is listening and is primary and the\n  // other mongods are listening and are secondary, or that any mongod died (and\n  // it tried to kill the others).)\n  //\n  // In case (a), self.handle will be the handle returned from launchMongo; in\n  // case (b) self.handle will be null.\n  _startOrRestart: function () {\n    var self = this;\n\n    if (self.handle) {\n      throw new Error(\"already running?\");\n    }\n\n    var allowKilling = self.multiple || self.firstStart;\n    self.firstStart = false;\n    if (! allowKilling) {\n      // If we're not going to try to kill an existing mongod first, then we\n      // shouldn't annoy the user by telling it that we couldn't start up.\n      self.suppressExitMessage = true;\n    }\n\n    self.handle = launchMongo({\n      projectLocalDir: self.projectLocalDir,\n      port: self.port,\n      multiple: self.multiple,\n      allowKilling: allowKilling,\n      onExit: _.bind(self._exited, self),\n      onStopped() {\n        self.suppressExitMessage = false;\n      },\n    });\n    // It has successfully started up, so if it exits after this point, that\n    // actually is an interesting fact and we shouldn't suppress it.\n    self.suppressExitMessage = false;\n\n    if (self.handle) {\n      self._allowStartupToReturn();\n    }\n  },\n\n  _exited: function (code, signal, stderr, detectedErrors) {\n    var self = this;\n\n    self.handle = null;\n\n    // If Mongo exited because (or rather, anytime after) we told it\n    // to exit, great, nothing to do. Otherwise, we'll print an error\n    // and try to restart.\n    if (self.shuttingDown) {\n      return;\n    }\n\n    // Only print an error if we tried to kill Mongo and something went\n    // wrong. If we didn't try to kill Mongo, we'll do that on the next\n    // restart. Not killing it on the first try is important for speed,\n    // since findMongoAndKillItDead is a very slow operation.\n    if (! self.suppressExitMessage) {\n      // Print the last 20 lines of stderr.\n      runLog.log(\n        stderr.split('\\n').slice(-20).join('\\n') +\n          \"Unexpected mongo exit code \" + code +\n          (self.multiple ? \".\" : \". Restarting.\"));\n    }\n\n    // If we're in multiple mode, we never try to restart. That's to keep the\n    // test-only multiple code simple.\n    if (self.multiple) {\n      self._fail();\n      return;\n    }\n\n    // We'll restart it up to 3 times in a row. The counter is reset\n    // when 5 seconds goes without a restart. (Note that by using a\n    // timer instead of looking at the current date, we avoid getting\n    // confused by time changes.)\n    self.errorCount ++;\n    if (self.errorTimer) {\n      clearTimeout(self.errorTimer);\n    }\n    self.errorTimer = setTimeout(function () {\n      self.errorTimer = null;\n      self.errorCount = 0;\n    }, 5000);\n\n    if (self.errorCount < 3) {\n      // Wait a second, then restart.\n      self.restartTimer = setTimeout(fiberHelpers.bindEnvironment(function () {\n        self.restartTimer = null;\n        self._startOrRestart();\n      }), 1000);\n      return;\n    }\n\n    // Too many restarts, too quicky. It's dead. Print friendly\n    // diagnostics and give up.\n    var explanation = MongoExitCodes[code];\n    var message = \"Can't start Mongo server.\";\n\n    if (explanation && explanation.symbol === 'EXIT_UNCAUGHT' &&\n        detectedErrors.freeSpace) {\n      message += \"\\n\\n\" +\n        \"Looks like you are out of free disk space under .meteor/local.\";\n    } else if (explanation) {\n      message += \"\\n\" + explanation.longText;\n    } else if (process.platform === 'win32') {\n      message += \"\\n\\n\" +\n        \"Check how to troubleshoot here \" +\n        \"https://docs.meteor.com/windows.html#cant-start-mongo-server\";\n    }\n\n    if (explanation && explanation.symbol === 'EXIT_NET_ERROR') {\n      message += \"\\n\\n\" +\n\"Check for other processes listening on port \" + self.port + \"\\n\" +\n\"or other Meteor instances running in the same project.\";\n    }\n\n    if (! explanation && /GLIBC/i.test(stderr)) {\n      message += \"\\n\\n\" +\n\"Looks like you are trying to run Meteor on an old Linux distribution.\\n\" +\n\"Meteor on Linux requires glibc version 2.9 or above. Try upgrading your\\n\" +\n\"distribution to the latest version.\";\n    }\n\n    if (detectedErrors.badLocale) {\n      message += \"\\n\\n\" +\n\"Looks like MongoDB doesn't understand your locale settings. See\\n\" +\n\"https://github.com/meteor/meteor/issues/4019 for more details.\";\n    }\n\n    runLog.log(message);\n    self._fail();\n  },\n\n  // Idempotent\n  stop: function () {\n    var self = this;\n\n    if (self.shuttingDown) {\n      return;\n    }\n\n    self.shuttingDown = true;\n\n    self.errorTimer && clearTimeout(self.errorTimer);\n    self.restartTimer && clearTimeout(self.restartTimer);\n\n    if (self.handle) {\n      self.handle.stop();\n      self.handle = null;\n    }\n  },\n\n  _allowStartupToReturn: function () {\n    var self = this;\n    if (self.resolveStartupPromise) {\n      var resolve = self.resolveStartupPromise;\n      self.resolveStartupPromise = null;\n      resolve();\n    }\n  },\n\n  _fail: function () {\n    var self = this;\n    self.stop();\n    self.onFailure && self.onFailure();\n    self._allowStartupToReturn();\n  },\n\n  _mongoHosts: function () {\n    var self = this;\n    var ports = [self.port];\n    if (self.multiple) {\n      ports.push(self.port + 1, self.port + 2);\n    }\n    return _.map(ports, function (port) {\n      return \"127.0.0.1:\" + port;\n    }).join(\",\");\n  },\n\n  mongoUrl: function () {\n    var self = this;\n    return \"mongodb://\" + self._mongoHosts() + \"/meteor\";\n  },\n\n  oplogUrl: function () {\n    var self = this;\n    return \"mongodb://\" + self._mongoHosts() + \"/local\";\n  }\n});\n\n\nexports.runMongoShell = runMongoShell;\nexports.findMongoPort = findMongoPort;\nexports.MongoRunner = MongoRunner;\nexports.findMongoAndKillItDead = findMongoAndKillItDead;\n"],"file":"tools/runners/run-mongo.js.map"}