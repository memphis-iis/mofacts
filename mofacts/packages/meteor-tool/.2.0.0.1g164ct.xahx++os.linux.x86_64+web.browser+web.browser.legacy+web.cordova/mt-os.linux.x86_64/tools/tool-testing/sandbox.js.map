{"version":3,"sources":["/tools/tool-testing/sandbox.js"],"names":["module","export","default","Sandbox","files","link","v","PhantomClient","PuppeteerClient","BrowserStackClient","Builder","Run","Console","getPackagesDirectoryName","getPackageStorage","archInfoHost","host","releaseCurrent","current","FinishedUpgraders","allUpgraders","DEFAULT_TRACK","RemoteCatalog","IsopackCache","randomToken","Tropohouse","PackageMap","capture","enterJob","hasOwn","Object","prototype","hasOwnProperty","constructor","options","root","mkdtemp","warehouse","home","pathJoin","mkdir","cwd","env","fakeMongo","call","inCheckout","Error","_makeWarehouse","meteorScript","process","platform","execPath","getCurrentToolsDir","run","args","sandbox","_makeEnv","testWithAllClients","f","filter","arg","clients","clientOptions","appConfig","port","phantom","pushClients","puppeteer","browserstack","prerequisitesMet","console","log","length","keys","forEach","clientKey","index","array","client","name","baseTimeout","timeout","createApp","to","template","absoluteTo","absoluteFrom","convertToStandardPath","__dirname","cp_r","ignore","preserveSymlinks","release","write","isProperRelease","upgradersFile","projectDir","readUpgraders","appendUpgraders","require","install","dontPrepareApp","cd","waitSecs","expectExit","createPackage","packageDir","packageName","packagePath","templatePackagePath","readdir","file","match","packageJsFile","writeFile","readFile","replace","relativePath","callback","previous","pathResolve","set","value","unset","filename","contents","append","appendFile","read","exists","cp","from","unlink","dirname","dirPath","rename","oldName","newName","readSessionFile","writeSessionFile","assign","create","METEOR_SESSION_FILE","convertToOSPath","METEOR_WAREHOUSE_DIR","METEOR_OFFLINE_CATALOG","METEOR_TEST_LATEST_RELEASE","TOOL_NODE_FLAGS","SELF_TEST_TOOL_NODE_FLAGS","releases","setUpBuiltPackageTropohouse","serverUrl","METEOR_PACKAGE_SERVER_URL","packagesDirectoryName","builder","outputPath","copyDirectory","builtPackageTropohouseDir","symlink","complete","stubCatalog","syncToken","formatVersion","collections","packages","versions","builds","releaseTracks","releaseVersions","packageVersions","toolPackageVersion","tropohouseIsopackCache","eachBuiltIsopack","isopack","packageRec","tropohouseLocalCatalog","getPackage","push","versionRec","getLatestVersion","buildArchitectures","versionId","_id","version","releaseName","configuration","track","Math","random","toString","orderKey","description","recommended","tool","dataFile","warehouseOfficialCatalog","initialize","packageStorage","insertData","linkToMeteorScript","doOrThrow","ret","messages","hasMessages","formatMessages","tropohouse","newSelfTestCatalog","getAllNonTestPackageNames","packageMap","localCatalog","includeCordovaUnibuild","buildLocalPackages","ROOT_PACKAGES_TO_BUILD_IN_SANDBOX","_saveIsopack","catalogLocal","selfTestCatalog","LocalCatalog","title","packagesDir","localPackageSearchDirs","arrowError","printMessages"],"mappings":"AAAAA,MAAM,CAACC,MAAP,CAAc;AAACC,EAAAA,OAAO,EAAC,MAAIC;AAAb,CAAd;AAAqC,IAAIC,KAAJ;AAAUJ,MAAM,CAACK,IAAP,CAAY,aAAZ,EAA0B;AAAC,MAAIC,CAAJ,EAAM;AAACF,IAAAA,KAAK,GAACE,CAAN;AAAQ;;AAAhB,CAA1B,EAA4C,CAA5C;AAA+C,IAAIC,aAAJ;AAAkBP,MAAM,CAACK,IAAP,CAAY,4BAAZ,EAAyC;AAACH,EAAAA,OAAO,CAACI,CAAD,EAAG;AAACC,IAAAA,aAAa,GAACD,CAAd;AAAgB;;AAA5B,CAAzC,EAAuE,CAAvE;AAA0E,IAAIE,eAAJ;AAAoBR,MAAM,CAACK,IAAP,CAAY,8BAAZ,EAA2C;AAACH,EAAAA,OAAO,CAACI,CAAD,EAAG;AAACE,IAAAA,eAAe,GAACF,CAAhB;AAAkB;;AAA9B,CAA3C,EAA2E,CAA3E;AAA8E,IAAIG,kBAAJ;AAAuBT,MAAM,CAACK,IAAP,CAAY,iCAAZ,EAA8C;AAACH,EAAAA,OAAO,CAACI,CAAD,EAAG;AAACG,IAAAA,kBAAkB,GAACH,CAAnB;AAAqB;;AAAjC,CAA9C,EAAiF,CAAjF;AAAoF,IAAII,OAAJ;AAAYV,MAAM,CAACK,IAAP,CAAY,wBAAZ,EAAqC;AAACH,EAAAA,OAAO,CAACI,CAAD,EAAG;AAACI,IAAAA,OAAO,GAACJ,CAAR;AAAU;;AAAtB,CAArC,EAA6D,CAA7D;AAAgE,IAAIK,GAAJ;AAAQX,MAAM,CAACK,IAAP,CAAY,UAAZ,EAAuB;AAACH,EAAAA,OAAO,CAACI,CAAD,EAAG;AAACK,IAAAA,GAAG,GAACL,CAAJ;AAAM;;AAAlB,CAAvB,EAA2C,CAA3C;AAA8C,IAAIM,OAAJ;AAAYZ,MAAM,CAACK,IAAP,CAAY,uBAAZ,EAAoC;AAACO,EAAAA,OAAO,CAACN,CAAD,EAAG;AAACM,IAAAA,OAAO,GAACN,CAAR;AAAU;;AAAtB,CAApC,EAA4D,CAA5D;AAA+D,IAAIO,wBAAJ,EAA6BC,iBAA7B;AAA+Cd,MAAM,CAACK,IAAP,CAAY,8BAAZ,EAA2C;AAACQ,EAAAA,wBAAwB,CAACP,CAAD,EAAG;AAACO,IAAAA,wBAAwB,GAACP,CAAzB;AAA2B,GAAxD;;AAAyDQ,EAAAA,iBAAiB,CAACR,CAAD,EAAG;AAACQ,IAAAA,iBAAiB,GAACR,CAAlB;AAAoB;;AAAlG,CAA3C,EAA+I,CAA/I;AAAkJ,IAAIS,YAAJ;AAAiBf,MAAM,CAACK,IAAP,CAAY,mBAAZ,EAAgC;AAACW,EAAAA,IAAI,CAACV,CAAD,EAAG;AAACS,IAAAA,YAAY,GAACT,CAAb;AAAe;;AAAxB,CAAhC,EAA0D,CAA1D;AAA6D,IAAIW,cAAJ;AAAmBjB,MAAM,CAACK,IAAP,CAAY,yBAAZ,EAAsC;AAACa,EAAAA,OAAO,CAACZ,CAAD,EAAG;AAACW,IAAAA,cAAc,GAACX,CAAf;AAAiB;;AAA7B,CAAtC,EAAqE,CAArE;AAAwE,IAAIa,iBAAJ;AAAsBnB,MAAM,CAACK,IAAP,CAAY,uBAAZ,EAAoC;AAACc,EAAAA,iBAAiB,CAACb,CAAD,EAAG;AAACa,IAAAA,iBAAiB,GAACb,CAAlB;AAAoB;;AAA1C,CAApC,EAAgF,EAAhF;AAAoF,IAAIc,YAAJ;AAAiBpB,MAAM,CAACK,IAAP,CAAY,iBAAZ,EAA8B;AAACe,EAAAA,YAAY,CAACd,CAAD,EAAG;AAACc,IAAAA,YAAY,GAACd,CAAb;AAAe;;AAAhC,CAA9B,EAAgE,EAAhE;AAAoE,IAAIe,aAAJ;AAAkBrB,MAAM,CAACK,IAAP,CAAY,iCAAZ,EAA8C;AAACgB,EAAAA,aAAa,CAACf,CAAD,EAAG;AAACe,IAAAA,aAAa,GAACf,CAAd;AAAgB;;AAAlC,CAA9C,EAAkF,EAAlF;AAAsF,IAAIgB,aAAJ;AAAkBtB,MAAM,CAACK,IAAP,CAAY,wCAAZ,EAAqD;AAACiB,EAAAA,aAAa,CAAChB,CAAD,EAAG;AAACgB,IAAAA,aAAa,GAAChB,CAAd;AAAgB;;AAAlC,CAArD,EAAyF,EAAzF;AAA6F,IAAIiB,YAAJ;AAAiBvB,MAAM,CAACK,IAAP,CAAY,8BAAZ,EAA2C;AAACkB,EAAAA,YAAY,CAACjB,CAAD,EAAG;AAACiB,IAAAA,YAAY,GAACjB,CAAb;AAAe;;AAAhC,CAA3C,EAA6E,EAA7E;AAAiF,IAAIkB,WAAJ;AAAgBxB,MAAM,CAACK,IAAP,CAAY,mBAAZ,EAAgC;AAACmB,EAAAA,WAAW,CAAClB,CAAD,EAAG;AAACkB,IAAAA,WAAW,GAAClB,CAAZ;AAAc;;AAA9B,CAAhC,EAAgE,EAAhE;AAAoE,IAAImB,UAAJ;AAAezB,MAAM,CAACK,IAAP,CAAY,4BAAZ,EAAyC;AAACoB,EAAAA,UAAU,CAACnB,CAAD,EAAG;AAACmB,IAAAA,UAAU,GAACnB,CAAX;AAAa;;AAA5B,CAAzC,EAAuE,EAAvE;AAA2E,IAAIoB,UAAJ;AAAe1B,MAAM,CAACK,IAAP,CAAY,6BAAZ,EAA0C;AAACqB,EAAAA,UAAU,CAACpB,CAAD,EAAG;AAACoB,IAAAA,UAAU,GAACpB,CAAX;AAAa;;AAA5B,CAA1C,EAAwE,EAAxE;AAA4E,IAAIqB,OAAJ,EAAYC,QAAZ;AAAqB5B,MAAM,CAACK,IAAP,CAAY,0BAAZ,EAAuC;AAACsB,EAAAA,OAAO,CAACrB,CAAD,EAAG;AAACqB,IAAAA,OAAO,GAACrB,CAAR;AAAU,GAAtB;;AAAuBsB,EAAAA,QAAQ,CAACtB,CAAD,EAAG;AAACsB,IAAAA,QAAQ,GAACtB,CAAT;AAAW;;AAA9C,CAAvC,EAAuF,EAAvF;AA8DptD,MAAMuB,MAAM,GAAGC,MAAM,CAACC,SAAP,CAAiBC,cAAhC;;AAEe,MAAM7B,OAAN,CAAc;AAC3B8B,EAAAA,WAAW,GAAe;AAAA,QAAdC,OAAc,uEAAJ,EAAI;AACxB,SAAKA,OAAL,GAAeA,OAAf;AAEA,SAAKC,IAAL,GAAY/B,KAAK,CAACgC,OAAN,EAAZ;AACA,SAAKC,SAAL,GAAiB,IAAjB;AAEA,SAAKC,IAAL,GAAYlC,KAAK,CAACmC,QAAN,CAAe,KAAKJ,IAApB,EAA0B,MAA1B,CAAZ;AACA/B,IAAAA,KAAK,CAACoC,KAAN,CAAY,KAAKF,IAAjB,EAAuB,GAAvB;AACA,SAAKG,GAAL,GAAW,KAAKH,IAAhB;AACA,SAAKI,GAAL,GAAW,EAAX;AACA,SAAKC,SAAL,GAAiB,KAAKT,OAAL,CAAaS,SAA9B;;AAEA,QAAId,MAAM,CAACe,IAAP,CAAY,KAAKV,OAAjB,EAA0B,WAA1B,CAAJ,EAA4C;AAC1C,UAAI,CAAC9B,KAAK,CAACyC,UAAN,EAAL,EAAyB;AACvB,cAAMC,KAAK,CACT,gEADS,CAAX;AAED;;AACD,WAAKT,SAAL,GAAiBjC,KAAK,CAACmC,QAAN,CAAe,KAAKJ,IAApB,EAA0B,YAA1B,CAAjB;;AACA,WAAKY,cAAL,CAAoB,KAAKb,OAAL,CAAaG,SAAjC;AACD;;AAED,UAAMW,YAAY,GAAGC,OAAO,CAACC,QAAR,KAAqB,OAArB,GAA+B,YAA/B,GAA8C,QAAnE,CArBwB,CAuBxB;;AACA,QAAI,KAAKb,SAAT,EAAoB;AAClB,WAAKc,QAAL,GAAgB/C,KAAK,CAACmC,QAAN,CAAe,KAAKF,SAApB,EAA+BW,YAA/B,CAAhB;AACD,KAFD,MAEO;AACL,WAAKG,QAAL,GAAgB/C,KAAK,CAACmC,QAAN,CAAenC,KAAK,CAACgD,kBAAN,EAAf,EAA2CJ,YAA3C,CAAhB;AACD;AACF,GA9B0B,CAgC3B;;;AACAK,EAAAA,GAAG,GAAU;AAAA,sCAANC,IAAM;AAANA,MAAAA,IAAM;AAAA;;AACX,WAAO,IAAI3C,GAAJ,CAAQ,KAAKwC,QAAb,EAAuB;AAC5BI,MAAAA,OAAO,EAAE,IADmB;AAE5BD,MAAAA,IAF4B;AAG5Bb,MAAAA,GAAG,EAAE,KAAKA,GAHkB;AAI5BC,MAAAA,GAAG,EAAE,KAAKc,QAAL,EAJuB;AAK5Bb,MAAAA,SAAS,EAAE,KAAKA;AALY,KAAvB,CAAP;AAOD,GAzC0B,CA2C3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAc,EAAAA,kBAAkB,CAACC,CAAD,EAAa;AAAA,uCAANJ,IAAM;AAANA,MAAAA,IAAM;AAAA;;AAC7BA,IAAAA,IAAI,GAAGA,IAAI,CAACK,MAAL,CAAYC,GAAG,IAAIA,GAAnB,CAAP,CAD6B,CAG7B;;AACA,QAAI,OAAO,KAAKC,OAAZ,KAAwB,WAA5B,EAAyC;AACvC,WAAKA,OAAL,GAAe,EAAf;AAEA,YAAMC,aAAa,GAAG,KAAK5B,OAAL,CAAa2B,OAAb,IAAwB,EAA9C;AAEA,YAAME,SAAS,GAAG;AAChB/C,QAAAA,IAAI,EAAE,WADU;AAEhBgD,QAAAA,IAAI,EAAEF,aAAa,CAACE,IAAd,IAAsB;AAFZ,OAAlB;;AAKA,UAAIF,aAAa,CAACG,OAAlB,EAA2B;AACzB1D,QAAAA,aAAa,CAAC2D,WAAd,CAA0B,KAAKL,OAA/B,EAAwCE,SAAxC;AACD;;AAED,UAAID,aAAa,CAACK,SAAlB,EAA6B;AAC3B3D,QAAAA,eAAe,CAAC0D,WAAhB,CAA4B,KAAKL,OAAjC,EAA0CE,SAA1C;AACD;;AAED,UAAID,aAAa,CAACM,YAAd,IAA8B3D,kBAAkB,CAAC4D,gBAAnB,EAAlC,EAAyE;AACvE5D,QAAAA,kBAAkB,CAACyD,WAAnB,CAA+B,KAAKL,OAApC,EAA6CE,SAA7C;AACD;AACF;;AAEDO,IAAAA,OAAO,CAACC,GAAR,6BAAiC,KAAKV,OAAL,CAAaW,MAA9C;AAEA1C,IAAAA,MAAM,CAAC2C,IAAP,CAAY,KAAKZ,OAAjB,EAA0Ba,OAA1B,CAAkC,CAACC,SAAD,EAAYC,KAAZ,EAAmBC,KAAnB,KAA6B;AAC7D,YAAMC,MAAM,GAAG,KAAKjB,OAAL,CAAac,SAAb,CAAf;AACAL,MAAAA,OAAO,CAACC,GAAR,YACMK,KAAK,GAAC,CADZ,cACiBC,KAAK,CAACL,MADvB,4BAC+CM,MAAM,CAACC,IADtD;AAEA,YAAM1B,GAAG,GAAG,IAAI1C,GAAJ,CAAQ,KAAKwC,QAAb,EAAuB;AACjCI,QAAAA,OAAO,EAAE,IADwB;AAEjCD,QAAAA,IAFiC;AAGjCb,QAAAA,GAAG,EAAE,KAAKA,GAHuB;AAIjCC,QAAAA,GAAG,EAAE,KAAKc,QAAL,EAJ4B;AAKjCb,QAAAA,SAAS,EAAE,KAAKA,SALiB;AAMjCmC,QAAAA;AANiC,OAAvB,CAAZ;AAQAzB,MAAAA,GAAG,CAAC2B,WAAJ,GAAkBF,MAAM,CAACG,OAAzB;AACAvB,MAAAA,CAAC,CAACL,GAAD,CAAD;AACD,KAdD;AAeD,GA/F0B,CAiG3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA6B,EAAAA,SAAS,CAACC,EAAD,EAAKC,QAAL,EAAelD,OAAf,EAAwB;AAC/BA,IAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;AACA,UAAMmD,UAAU,GAAGjF,KAAK,CAACmC,QAAN,CAAe,KAAKE,GAApB,EAAyB0C,EAAzB,CAAnB;AACA,UAAMG,YAAY,GAAGlF,KAAK,CAACmC,QAAN,CACnBnC,KAAK,CAACmF,qBAAN,CAA4BC,SAA5B,CADmB,EAEnB,IAFmB,EAEb,OAFa,EAEJ,MAFI,EAEIJ,QAFJ,CAArB;AAIAhF,IAAAA,KAAK,CAACqF,IAAN,CAAWH,YAAX,EAAyBD,UAAzB,EAAqC;AACnCK,MAAAA,MAAM,EAAE,CAAC,SAAD,CAD2B;AAEnCC,MAAAA,gBAAgB,EAAE;AAFiB,KAArC,EAP+B,CAW/B;AACA;;AACA,QAAIzD,OAAO,CAAC0D,OAAZ,EAAqB;AACnB,WAAKC,KAAL,CAAWzF,KAAK,CAACmC,QAAN,CAAe4C,EAAf,EAAmB,iBAAnB,CAAX,EAAkDjD,OAAO,CAAC0D,OAA1D;AACD,KAFD,MAEO,IAAI,CAAC,KAAKvD,SAAN,IAAmBpB,cAAc,CAAC6E,eAAf,EAAvB,EAAyD;AAC9D,WAAKD,KAAL,CAAWzF,KAAK,CAACmC,QAAN,CAAe4C,EAAf,EAAmB,iBAAnB,CAAX,EAAkDlE,cAAc,CAAC8D,IAAjE;AACD,KAjB8B,CAmB/B;AACA;;;AACA,UAAMgB,aAAa,GACjB,IAAI5E,iBAAJ,CAAsB;AAAE6E,MAAAA,UAAU,EAAEX;AAAd,KAAtB,CADF;;AAEA,QAAIU,aAAa,CAACE,aAAd,GAA8BzB,MAA9B,KAAyC,CAA7C,EAAgD;AAC9CuB,MAAAA,aAAa,CAACG,eAAd,CAA8B9E,YAAY,EAA1C;AACD;;AAED+E,IAAAA,OAAO,CAAC,4BAAD,CAAP,CAAsCC,OAAtC,CAA8Cf,UAA9C;;AAEA,QAAInD,OAAO,CAACmE,cAAZ,EAA4B;AAC1B;AACD,KA/B8B,CAiC/B;AACA;AACA;;;AACA,SAAKC,EAAL,CAAQnB,EAAR,EAAY,MAAM;AAChB,YAAM9B,GAAG,GAAG,KAAKA,GAAL,CAAS,eAAT,CAAZ,CADgB,CAEhB;AACA;AACA;AACA;;AACAA,MAAAA,GAAG,CAACkD,QAAJ,CAAa,GAAb;AACAlD,MAAAA,GAAG,CAACmD,UAAJ,CAAe,CAAf;AACD,KARD;AASD,GAxJ0B,CA0J3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAC,EAAAA,aAAa,CAACC,UAAD,EAAaC,WAAb,EAA0BvB,QAA1B,EAAoC;AAC/C,UAAMwB,WAAW,GAAGxG,KAAK,CAACmC,QAAN,CAAe,KAAKE,GAApB,EAAyBiE,UAAzB,CAApB;AACA,UAAMG,mBAAmB,GAAGzG,KAAK,CAACmC,QAAN,CAC1BnC,KAAK,CAACmF,qBAAN,CAA4BC,SAA5B,CAD0B,EACc,IADd,EACoB,OADpB,EAC6B,UAD7B,EACyCJ,QADzC,CAA5B;AAEAhF,IAAAA,KAAK,CAACqF,IAAN,CAAWoB,mBAAX,EAAgCD,WAAhC,EAA6C;AAC3CjB,MAAAA,gBAAgB,EAAE;AADyB,KAA7C;AAIAvF,IAAAA,KAAK,CAAC0G,OAAN,CAAcF,WAAd,EAA2BlC,OAA3B,CAAoCqC,IAAD,IAAU;AAC3C,UAAIA,IAAI,CAACC,KAAL,CAAW,iBAAX,CAAJ,EAAmC;AACjC,cAAMC,aAAa,GAAG7G,KAAK,CAACmC,QAAN,CAAeqE,WAAf,EAA4BG,IAA5B,CAAtB;AACA3G,QAAAA,KAAK,CAAC8G,SAAN,CACED,aADF,EAEE7G,KAAK,CAAC+G,QAAN,CAAeF,aAAf,EAA8B,MAA9B,EACGG,OADH,CACW,gBADX,EAC6BT,WAD7B,CAFF;AAID;AACF,KARD;AASD,GAvL0B,CAyL3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAL,EAAAA,EAAE,CAACe,YAAD,EAAeC,QAAf,EAAyB;AACzB,UAAMC,QAAQ,GAAG,KAAK9E,GAAtB;AACA,SAAKA,GAAL,GAAWrC,KAAK,CAACoH,WAAN,CAAkB,KAAK/E,GAAvB,EAA4B4E,YAA5B,CAAX;;AACA,QAAIC,QAAJ,EAAc;AACZA,MAAAA,QAAQ;AACR,WAAK7E,GAAL,GAAW8E,QAAX;AACD;AACF,GA5M0B,CA8M3B;;;AACAE,EAAAA,GAAG,CAAC1C,IAAD,EAAO2C,KAAP,EAAc;AACf,SAAKhF,GAAL,CAASqC,IAAT,IAAiB2C,KAAjB;AACD,GAjN0B,CAmN3B;;;AACAC,EAAAA,KAAK,CAAC5C,IAAD,EAAO;AACV,WAAO,KAAKrC,GAAL,CAASqC,IAAT,CAAP;AACD,GAtN0B,CAwN3B;AACA;AACA;;;AACAc,EAAAA,KAAK,CAAC+B,QAAD,EAAWC,QAAX,EAAqB;AACxBzH,IAAAA,KAAK,CAAC8G,SAAN,CAAgB9G,KAAK,CAACmC,QAAN,CAAe,KAAKE,GAApB,EAAyBmF,QAAzB,CAAhB,EAAoDC,QAApD,EAA8D,MAA9D;AACD,GA7N0B,CA+N3B;;;AACAC,EAAAA,MAAM,CAACF,QAAD,EAAWC,QAAX,EAAqB;AACzBzH,IAAAA,KAAK,CAAC2H,UAAN,CAAiB3H,KAAK,CAACmC,QAAN,CAAe,KAAKE,GAApB,EAAyBmF,QAAzB,CAAjB,EAAqDC,QAArD,EAA+D,MAA/D;AACD,GAlO0B,CAoO3B;AACA;AACA;;;AACAG,EAAAA,IAAI,CAACJ,QAAD,EAAW;AACb,UAAMb,IAAI,GAAG3G,KAAK,CAACmC,QAAN,CAAe,KAAKE,GAApB,EAAyBmF,QAAzB,CAAb;;AACA,QAAI,CAACxH,KAAK,CAAC6H,MAAN,CAAalB,IAAb,CAAL,EAAyB;AACvB,aAAO,IAAP;AACD,KAFD,MAEO;AACL,aAAO3G,KAAK,CAAC+G,QAAN,CAAe/G,KAAK,CAACmC,QAAN,CAAe,KAAKE,GAApB,EAAyBmF,QAAzB,CAAf,EAAmD,MAAnD,CAAP;AACD;AACF,GA9O0B,CAgP3B;AACA;AACA;;;AACAM,EAAAA,EAAE,CAACC,IAAD,EAAOhD,EAAP,EAAW;AACX,UAAM0C,QAAQ,GAAG,KAAKG,IAAL,CAAUG,IAAV,CAAjB;;AACA,QAAI,CAACN,QAAL,EAAe;AACb,YAAM,IAAI/E,KAAJ,CAAU,UAAUqF,IAAV,GAAiB,kBAA3B,CAAN;AACD;;AAAA;AACD,SAAKtC,KAAL,CAAWV,EAAX,EAAe0C,QAAf;AACD,GAzP0B,CA2P3B;;;AACAO,EAAAA,MAAM,CAACR,QAAD,EAAW;AACfxH,IAAAA,KAAK,CAACgI,MAAN,CAAahI,KAAK,CAACmC,QAAN,CAAe,KAAKE,GAApB,EAAyBmF,QAAzB,CAAb;AACD,GA9P0B,CAgQ3B;;;AACApF,EAAAA,KAAK,CAAC6F,OAAD,EAAU;AACb,UAAMC,OAAO,GAAGlI,KAAK,CAACmC,QAAN,CAAe,KAAKE,GAApB,EAAyB4F,OAAzB,CAAhB;;AACA,QAAI,CAAEjI,KAAK,CAAC6H,MAAN,CAAaK,OAAb,CAAN,EAA6B;AAC3BlI,MAAAA,KAAK,CAACoC,KAAN,CAAY8F,OAAZ;AACD;AACF,GAtQ0B,CAwQ3B;;;AACAC,EAAAA,MAAM,CAACC,OAAD,EAAUC,OAAV,EAAmB;AACvBrI,IAAAA,KAAK,CAACmI,MAAN,CAAanI,KAAK,CAACmC,QAAN,CAAe,KAAKE,GAApB,EAAyB+F,OAAzB,CAAb,EACapI,KAAK,CAACmC,QAAN,CAAe,KAAKE,GAApB,EAAyBgG,OAAzB,CADb;AAED,GA5Q0B,CA8Q3B;;;AACAC,EAAAA,eAAe,GAAG;AAChB,WAAOtI,KAAK,CAAC+G,QAAN,CAAe/G,KAAK,CAACmC,QAAN,CAAe,KAAKJ,IAApB,EAA0B,gBAA1B,CAAf,EAA4D,MAA5D,CAAP;AACD,GAjR0B,CAmR3B;AACA;AACA;;;AACAwG,EAAAA,gBAAgB,CAACd,QAAD,EAAW;AACzB,WAAOzH,KAAK,CAAC8G,SAAN,CAAgB9G,KAAK,CAACmC,QAAN,CAAe,KAAKJ,IAApB,EAA0B,gBAA1B,CAAhB,EACgB0F,QADhB,EAC0B,MAD1B,CAAP;AAED;;AAEDrE,EAAAA,QAAQ,GAAG;AACT,UAAMd,GAAG,GAAGZ,MAAM,CAAC8G,MAAP,CAAc9G,MAAM,CAAC+G,MAAP,CAAc,IAAd,CAAd,EAAmC,KAAKnG,GAAxC,CAAZ;AACAA,IAAAA,GAAG,CAACoG,mBAAJ,GAA0B1I,KAAK,CAAC2I,eAAN,CACxB3I,KAAK,CAACmC,QAAN,CAAe,KAAKJ,IAApB,EAA0B,gBAA1B,CADwB,CAA1B;;AAGA,QAAI,KAAKE,SAAT,EAAoB;AAClB;AACAK,MAAAA,GAAG,CAACsG,oBAAJ,GAA2B5I,KAAK,CAAC2I,eAAN,CAAsB,KAAK1G,SAA3B,CAA3B,CAFkB,CAIlB;;AACAK,MAAAA,GAAG,CAACuG,sBAAJ,GAA6B,GAA7B;AACD,KAXQ,CAaT;AACA;AACA;;;AACA,QAAI,CAAC,KAAK5G,SAAN,IAAmBpB,cAAc,CAAC6E,eAAf,EAAvB,EAAyD;AACvDpD,MAAAA,GAAG,CAACwG,0BAAJ,GAAiCjI,cAAc,CAAC8D,IAAhD;AACD,KAlBQ,CAoBT;;;AACA,QAAI9B,OAAO,CAACP,GAAR,CAAYyG,eAAZ,IAA+B,CAAElG,OAAO,CAACP,GAAR,CAAY0G,yBAAjD,EACE9E,OAAO,CAACC,GAAR,CAAY,6DACA,mCADZ;AAEF7B,IAAAA,GAAG,CAACyG,eAAJ,GAAsBlG,OAAO,CAACP,GAAR,CAAY0G,yBAAZ,IAAyC,EAA/D;AAEA,WAAO1G,GAAP;AACD,GAtT0B,CAwT3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAK,EAAAA,cAAc,CAACsG,QAAD,EAAW;AACvB;AACAC,IAAAA,2BAA2B;AAE3B,UAAMC,SAAS,GAAG,KAAK7G,GAAL,CAAS8G,yBAA3B;AACA,UAAMC,qBAAqB,GAAG5I,wBAAwB,CAAC0I,SAAD,CAAtD;AAEA,UAAMG,OAAO,GAAG,IAAIhJ,OAAJ,CAAY;AAACiJ,MAAAA,UAAU,EAAE,KAAKtH;AAAlB,KAAZ,CAAhB;AACAqH,IAAAA,OAAO,CAACE,aAAR,CAAsB;AACpBzB,MAAAA,IAAI,EAAE/H,KAAK,CAACmC,QAAN,CAAesH,yBAAf,EAA0C,UAA1C,CADc;AAEpB1E,MAAAA,EAAE,EAAEsE,qBAFgB;AAGpBK,MAAAA,OAAO,EAAE;AAHW,KAAtB;AAKAJ,IAAAA,OAAO,CAACK,QAAR;AAEA,UAAMC,WAAW,GAAG;AAClBC,MAAAA,SAAS,EAAE,EADO;AAElBC,MAAAA,aAAa,EAAE,KAFG;AAGlBC,MAAAA,WAAW,EAAE;AACXC,QAAAA,QAAQ,EAAE,EADC;AAEXC,QAAAA,QAAQ,EAAE,EAFC;AAGXC,QAAAA,MAAM,EAAE,EAHG;AAIXC,QAAAA,aAAa,EAAE,EAJJ;AAKXC,QAAAA,eAAe,EAAE;AALN;AAHK,KAApB;AAYA,UAAMC,eAAe,GAAG,EAAxB;AACA,QAAIC,kBAAkB,GAAG,IAAzB;AAEAC,IAAAA,sBAAsB,CAACC,gBAAvB,CAAwC,CAACjE,WAAD,EAAckE,OAAd,KAA0B;AAChE,YAAMC,UAAU,GAAGC,sBAAsB,CAACC,UAAvB,CAAkCrE,WAAlC,CAAnB;;AACA,UAAI,CAAEmE,UAAN,EAAkB;AAChB,cAAMhI,KAAK,CAAC,2BAA2B6D,WAA5B,CAAX;AACD;;AACDqD,MAAAA,WAAW,CAACG,WAAZ,CAAwBC,QAAxB,CAAiCa,IAAjC,CAAsCH,UAAtC;AAEA,YAAMI,UAAU,GAAGH,sBAAsB,CAACI,gBAAvB,CAAwCxE,WAAxC,CAAnB;;AACA,UAAI,CAAEuE,UAAN,EAAkB;AAChB,cAAMpI,KAAK,CAAC,2BAA2B6D,WAA5B,CAAX;AACD;;AACDqD,MAAAA,WAAW,CAACG,WAAZ,CAAwBE,QAAxB,CAAiCY,IAAjC,CAAsCC,UAAtC;AAEAlB,MAAAA,WAAW,CAACG,WAAZ,CAAwBG,MAAxB,CAA+BW,IAA/B,CAAoC;AAClCG,QAAAA,kBAAkB,EAAEP,OAAO,CAACO,kBAAR,EADc;AAElCC,QAAAA,SAAS,EAAEH,UAAU,CAACI,GAFY;AAGlCA,QAAAA,GAAG,EAAE9J,WAAW;AAHkB,OAApC;;AAMA,UAAImF,WAAW,KAAK,aAApB,EAAmC;AACjC+D,QAAAA,kBAAkB,GAAGQ,UAAU,CAACK,OAAhC;AACD,OAFD,MAEO;AACLd,QAAAA,eAAe,CAAC9D,WAAD,CAAf,GAA+BuE,UAAU,CAACK,OAA1C;AACD;AACF,KAxBD;;AA0BA,QAAI,CAAEb,kBAAN,EAA0B;AACxB,YAAM5H,KAAK,CAAC,iBAAD,CAAX;AACD;;AAEDkH,IAAAA,WAAW,CAACG,WAAZ,CAAwBI,aAAxB,CAAsCU,IAAtC,CAA2C;AACzClG,MAAAA,IAAI,EAAE1D,aADmC;AAEzCiK,MAAAA,GAAG,EAAE9J,WAAW;AAFyB,KAA3C,EA5DuB,CAiEvB;;AACAM,IAAAA,MAAM,CAAC2C,IAAP,CAAY4E,QAAZ,EAAsB3E,OAAtB,CAA+B8G,WAAD,IAAiB;AAC7C,YAAMC,aAAa,GAAGpC,QAAQ,CAACmC,WAAD,CAA9B,CAD6C,CAE7C;;AACAxB,MAAAA,WAAW,CAACG,WAAZ,CAAwBK,eAAxB,CAAwCS,IAAxC,CAA6C;AAC3CS,QAAAA,KAAK,EAAErK,aADoC;AAE3CiK,QAAAA,GAAG,EAAEK,IAAI,CAACC,MAAL,GAAcC,QAAd,EAFsC;AAG3CN,QAAAA,OAAO,EAAEC,WAHkC;AAI3CM,QAAAA,QAAQ,EAAEN,WAJiC;AAK3CO,QAAAA,WAAW,EAAE,kBAAkBP,WALY;AAM3CQ,QAAAA,WAAW,EAAE,CAAC,CAACP,aAAa,CAACO,WANc;AAO3CC,QAAAA,IAAI,EAAER,aAAa,CAACQ,IAAd,IAAsB,iBAAiBvB,kBAPF;AAQ3CN,QAAAA,QAAQ,EAAEK;AARiC,OAA7C;AAUD,KAbD;AAeA,UAAMyB,QAAQ,GAAGpL,iBAAiB,CAAC;AACjCqB,MAAAA,IAAI,EAAE,KAAKE,SADsB;AAEjCkH,MAAAA,SAAS,EAAEA;AAFsB,KAAD,CAAlC;AAIA,SAAK4C,wBAAL,GAAgC,IAAI7K,aAAJ,EAAhC;AACA,SAAK6K,wBAAL,CAA8BC,UAA9B,CAAyC;AACvCC,MAAAA,cAAc,EAAEH;AADuB,KAAzC;AAGA,SAAKC,wBAAL,CAA8BG,UAA9B,CAAyCtC,WAAzC,EAzFuB,CA2FvB;AACA;;AACA5J,IAAAA,KAAK,CAACmM,kBAAN,CACEnM,KAAK,CAACmC,QAAN,CAAe,KAAKF,SAApB,EAA+BoH,qBAA/B,EAAsD,aAAtD,EAAqEiB,kBAArE,EACE,QAAQ3J,YAAY,EADtB,EAC0B,QAD1B,CADF,EAGEX,KAAK,CAACmC,QAAN,CAAe,KAAKF,SAApB,EAA+B,QAA/B,CAHF;AAID;;AAja0B;;AAoa7B,SAASmK,SAAT,CAAmB9I,CAAnB,EAAsB;AACpB,MAAI+I,GAAJ;AACA,QAAMC,QAAQ,GAAG/K,OAAO,CAAC,YAAY;AACnC8K,IAAAA,GAAG,GAAG/I,CAAC,EAAP;AACD,GAFuB,CAAxB;;AAGA,MAAIgJ,QAAQ,CAACC,WAAT,EAAJ,EAA4B;AAC1B,UAAM7J,KAAK,CAAC4J,QAAQ,CAACE,cAAT,EAAD,CAAX;AACD;;AACD,SAAOH,GAAP;AACD;;AAED,SAASnD,2BAAT,GAAuC;AACrC,MAAIO,yBAAJ,EAA+B;AAC7B;AACD;;AACDA,EAAAA,yBAAyB,GAAGzJ,KAAK,CAACgC,OAAN,CAAc,0BAAd,CAA5B;;AAEA,MAAIvB,wBAAwB,OAAO,UAAnC,EAA+C;AAC7C,UAAMiC,KAAK,CAAC,uDAAD,CAAX;AACD;;AAED,QAAM+J,UAAU,GAAG,IAAIpL,UAAJ,CAAeoI,yBAAf,CAAnB;AACAkB,EAAAA,sBAAsB,GAAG+B,kBAAkB,EAA3C;AACA,QAAMzC,QAAQ,GAAG,EAAjB;AACAU,EAAAA,sBAAsB,CAACgC,yBAAvB,GAAmDrI,OAAnD,CAA4DiC,WAAD,IAAiB;AAC1E0D,IAAAA,QAAQ,CAAC1D,WAAD,CAAR,GACEoE,sBAAsB,CAACI,gBAAvB,CAAwCxE,WAAxC,EAAqD4E,OADvD;AAED,GAHD;AAIA,QAAMyB,UAAU,GAAG,IAAItL,UAAJ,CAAe2I,QAAf,EAAyB;AAC1C4C,IAAAA,YAAY,EAAElC;AAD4B,GAAzB,CAAnB,CAjBqC,CAoBrC;AACA;;AACAJ,EAAAA,sBAAsB,GAAG,IAAIpJ,YAAJ,CAAiB;AACxCyL,IAAAA,UAAU,EAAEA,UAD4B;AAExCE,IAAAA,sBAAsB,EAAE;AAFgB,GAAjB,CAAzB;AAIAV,EAAAA,SAAS,CAAC,YAAY;AACpB5K,IAAAA,QAAQ,CAAC,6BAAD,EAAgC,MAAM;AAC5C;AACA+I,MAAAA,sBAAsB,CAACwC,kBAAvB,CACEC,iCADF;AAED,KAJO,CAAR;AAKD,GANQ,CAAT,CA1BqC,CAkCrC;AACA;AACA;AACA;AACA;;AACAzC,EAAAA,sBAAsB,CAACC,gBAAvB,CAAwC,CAAC7F,IAAD,EAAO8F,OAAP,KAAmB;AACzDgC,IAAAA,UAAU,CAACQ,YAAX,CAAwBxC,OAAxB,EAAiC9F,IAAjC;AACD,GAFD;AAGD,C,CAED;AACA;AACA;AACA;AACA;;;AACA,IAAI8E,yBAAyB,GAAG,IAAhC;AACA,IAAIkB,sBAAsB,GAAG,IAA7B;AACA,IAAIJ,sBAAsB,GAAG,IAA7B,C,CAEA;AACA;;AACA,MAAMyC,iCAAiC,GAAG,CACxC;AACA,aAFwC,EAIxC;AACA,aALwC,EAMxC,mBANwC,EAOxC,OAPwC,EAQxC,sBARwC,EASxC,QATwC,EAS9B;AACV,SAVwC,EAWxC,SAXwC,EAYxC,aAZwC,EAaxC,UAbwC,EAcxC,uBAdwC,EAexC,sBAfwC,EAgBxC,UAhBwC,EAiBxC,cAjBwC,EAkBxC,iBAlBwC,EAmBxC,YAnBwC,EAoBxC,YApBwC,CAA1C;;AAuBA,SAASN,kBAAT,GAA8B;AAC5B,MAAI,CAAE1M,KAAK,CAACyC,UAAN,EAAN,EAA0B;AACxB,UAAMC,KAAK,CAAC,yCAAD,CAAX;AACD;;AAED,QAAMwK,YAAY,GAAGnH,OAAO,CAAC,uCAAD,CAA5B;;AACA,QAAMoH,eAAe,GAAG,IAAID,YAAY,CAACE,YAAjB,EAAxB;AACA,QAAMd,QAAQ,GAAG/K,OAAO,CACtB;AAAE8L,IAAAA,KAAK,EAAE;AAAT,GADsB,EAEtB,MAAM;AACJ,UAAMC,WAAW,GACftN,KAAK,CAACmC,QAAN,CAAenC,KAAK,CAACgD,kBAAN,EAAf,EAA2C,UAA3C,CADF,CADI,CAIJ;AACA;AACA;AACA;AACA;;AACAmK,IAAAA,eAAe,CAACnB,UAAhB,CAA2B;AACzBuB,MAAAA,sBAAsB,EAAE,CACtBD,WADsB,EAEtBtN,KAAK,CAACmC,QAAN,CAAemL,WAAf,EAA4B,UAA5B,CAFsB,EAGtBtN,KAAK,CAACmC,QAAN,CAAemL,WAAf,EAA4B,UAA5B,EAAwC,GAAxC,EAA6C,UAA7C,CAHsB;AADC,KAA3B;AAOD,GAlBqB,CAAxB;;AAmBA,MAAIhB,QAAQ,CAACC,WAAT,EAAJ,EAA4B;AAC1B/L,IAAAA,OAAO,CAACgN,UAAR,CAAmB,sCAAnB;AACAhN,IAAAA,OAAO,CAACiN,aAAR,CAAsBnB,QAAtB;AACA,UAAM,IAAI5J,KAAJ,CAAU,cAAV,CAAN;AACD;;AACD,SAAOyK,eAAP;AACD","sourcesContent":["// Represents an install of the tool. Creating this creates a private\n// sandbox with its own state, separate from the state of the current\n// meteor install or checkout, from the user's homedir, and from the\n// state of any other sandbox. It also creates an empty directory\n// which will be, by default, the cwd for runs created inside the\n// sandbox (you can change this with the cd() method).\n//\n// This will throw TestFailure if it has to build packages to set up\n// the sandbox and the build fails. So, only call it from inside\n// tests.\n//\n// options:\n// - warehouse: set to sandbox the warehouse too. If you don't do\n//   this, the tests are run in the same context (checkout or\n//   warehouse) as the actual copy of meteor you're running (the\n//   meteor in 'meteor self-test'. This may only be set when you're\n//   running 'meteor self-test' from a checkout. If it is set, it\n//   should look something like this:\n//   {\n//     version1: { tools: 'tools1', notices: (...) },\n//     version2: { tools: 'tools2', upgraders: [\"a\"],\n//     notices: (...), latest: true }\n//   }\n//   This would set up a simulated warehouse with two releases in it,\n//   one called 'version1' and having a tools version of 'tools1', and\n//   similarly with 'version2'/'tools2', with the latter being marked\n//   as the latest release, and the latter also having a single\n//   upgrader named \"a\". The releases are made by building the\n//   checkout into a release, and are identical except for their\n//   version names. If you pass 'notices' (which is optional), set it\n//   to the verbatim contents of the notices.json file for the\n//   release, as an object.\n// - fakeMongo: if set, set an environment variable that causes our\n//   'fake-mongod' stub process to be started instead of 'mongod'. The\n//   tellMongo method then becomes available on Runs for controlling\n//   the stub.\n// - clients\n//   - browserstack: true if browserstack clients should be used\n//   - port: the port that the clients should run on\nimport * as files from '../fs/files';\nimport PhantomClient from './clients/phantom/index.js';\nimport PuppeteerClient from './clients/puppeteer/index.js';\nimport BrowserStackClient from './clients/browserstack/index.js';\nimport Builder from '../isobuild/builder.js';\nimport Run from './run.js';\nimport { Console } from '../console/console.js';\nimport {\n  getPackagesDirectoryName,\n  getPackageStorage,\n} from '../meteor-services/config.js';\nimport { host as archInfoHost } from '../utils/archinfo';\nimport { current as releaseCurrent } from '../packaging/release.js';\nimport { FinishedUpgraders } from '../project-context.js';\nimport { allUpgraders } from '../upgraders.js';\nimport { DEFAULT_TRACK } from '../packaging/catalog/catalog.js';\nimport { RemoteCatalog } from '../packaging/catalog/catalog-remote.js';\nimport { IsopackCache } from '../isobuild/isopack-cache.js';\nimport { randomToken } from '../utils/utils.js';\nimport { Tropohouse } from '../packaging/tropohouse.js';\nimport { PackageMap } from '../packaging/package-map.js';\nimport { capture, enterJob } from '../utils/buildmessage.js';\n\nconst hasOwn = Object.prototype.hasOwnProperty;\n\nexport default class Sandbox {\n  constructor(options = {}) {\n    this.options = options;\n\n    this.root = files.mkdtemp();\n    this.warehouse = null;\n\n    this.home = files.pathJoin(this.root, 'home');\n    files.mkdir(this.home, 0o755);\n    this.cwd = this.home;\n    this.env = {};\n    this.fakeMongo = this.options.fakeMongo;\n\n    if (hasOwn.call(this.options, 'warehouse')) {\n      if (!files.inCheckout()) {\n        throw Error(\n          \"Fake warehouses are only possible when running from a checkout\");\n      }\n      this.warehouse = files.pathJoin(this.root, 'tropohouse');\n      this._makeWarehouse(this.options.warehouse);\n    }\n    \n    const meteorScript = process.platform === \"win32\" ? \"meteor.bat\" : \"meteor\";\n\n    // Figure out the 'meteor' to run\n    if (this.warehouse) {\n      this.execPath = files.pathJoin(this.warehouse, meteorScript);\n    } else {\n      this.execPath = files.pathJoin(files.getCurrentToolsDir(), meteorScript);\n    }\n  }\n\n  // Create a new test run of the tool in this sandbox.\n  run(...args) {\n    return new Run(this.execPath, {\n      sandbox: this,\n      args,\n      cwd: this.cwd,\n      env: this._makeEnv(),\n      fakeMongo: this.fakeMongo,\n    });\n  }\n\n  // Tests a set of clients with the argument function. Each call to f(run)\n  // instantiates a Run with a different client.\n  // Use:\n  // sandbox.testWithAllClients(function (run) {\n  //   // pre-connection checks\n  //   run.connectClient();\n  //   // post-connection checks\n  // });\n  testWithAllClients(f, ...args) {\n    args = args.filter(arg => arg);\n\n    // Lazy-populate the clients, only when this method is called.\n    if (typeof this.clients === \"undefined\") {\n      this.clients = [];\n\n      const clientOptions = this.options.clients || {};\n\n      const appConfig = {\n        host: 'localhost',\n        port: clientOptions.port || 3000,\n      };\n\n      if (clientOptions.phantom) {\n        PhantomClient.pushClients(this.clients, appConfig);\n      }\n\n      if (clientOptions.puppeteer) {\n        PuppeteerClient.pushClients(this.clients, appConfig);\n      }\n\n      if (clientOptions.browserstack && BrowserStackClient.prerequisitesMet()) {\n        BrowserStackClient.pushClients(this.clients, appConfig);\n      }\n    }\n\n    console.log(`Running test with ${this.clients.length} client(s)...`);\n\n    Object.keys(this.clients).forEach((clientKey, index, array) => {\n      const client = this.clients[clientKey];\n      console.log(\n        `(${index+1}/${array.length}) Testing with ${client.name}...`);\n      const run = new Run(this.execPath, {\n        sandbox: this,\n        args,\n        cwd: this.cwd,\n        env: this._makeEnv(),\n        fakeMongo: this.fakeMongo,\n        client,\n      });\n      run.baseTimeout = client.timeout;\n      f(run);\n    });\n  }\n\n  // Copy an app from a template into the current directory in the\n  // sandbox. 'to' is the subdirectory to put the app in, and\n  // 'template' is a subdirectory of tools/tests/apps to copy.\n  //\n  // Note that the arguments are the opposite order from 'cp'. That\n  // seems more intuitive to me -- if you disagree, my apologies.\n  //\n  // For example:\n  //   s.createApp('myapp', 'empty');\n  //   s.cd('myapp');\n  createApp(to, template, options) {\n    options = options || {};\n    const absoluteTo = files.pathJoin(this.cwd, to);\n    const absoluteFrom = files.pathJoin(\n      files.convertToStandardPath(__dirname),\n      '..', 'tests', 'apps', template\n    );\n    files.cp_r(absoluteFrom, absoluteTo, {\n      ignore: [/^local$/],\n      preserveSymlinks: true,\n    });\n    // If the test isn't explicitly managing a mock warehouse, ensure that apps\n    // run with our release by default.\n    if (options.release) {\n      this.write(files.pathJoin(to, '.meteor/release'), options.release);\n    } else if (!this.warehouse && releaseCurrent.isProperRelease()) {\n      this.write(files.pathJoin(to, '.meteor/release'), releaseCurrent.name);\n    }\n\n    // Make sure the apps don't run any upgraders, unless they intentionally\n    // have a partial upgraders file\n    const upgradersFile =\n      new FinishedUpgraders({ projectDir: absoluteTo });\n    if (upgradersFile.readUpgraders().length === 0) {\n      upgradersFile.appendUpgraders(allUpgraders());\n    }\n\n    require(\"../cli/default-npm-deps.js\").install(absoluteTo);\n\n    if (options.dontPrepareApp) {\n      return;\n    }\n\n    // Prepare the app (ie, build or download packages). We give this a nice\n    // long timeout, which allows the next command to not need a bloated\n    // timeout. (meteor create does this anyway.)\n    this.cd(to, () => {\n      const run = this.run(\"--prepare-app\");\n      // XXX Can we cache the output of running this once somewhere, so that\n      // multiple calls to createApp with the same template get the same cache?\n      // This is a little tricky because isopack-buildinfo.json uses absolute\n      // paths.\n      run.waitSecs(120);\n      run.expectExit(0);\n    });\n  }\n\n  // Same as createApp, but with a package.\n  //\n  // @param packageDir  {String} The directory in which to create the package\n  // @param packageName {String} The package name to create. This string will\n  //                             replace all appearances of ~package-name~\n  //                             in any package*.js files in the template\n  // @param template    {String} The package template to use. Found as a\n  //                             subdirectory in tests/packages/\n  //\n  // For example:\n  //   s.createPackage('me_mypack', me:mypack', 'empty');\n  //   s.cd('me_mypack');\n  createPackage(packageDir, packageName, template) {\n    const packagePath = files.pathJoin(this.cwd, packageDir);\n    const templatePackagePath = files.pathJoin(\n      files.convertToStandardPath(__dirname), '..', 'tests', 'packages', template);\n    files.cp_r(templatePackagePath, packagePath, {\n      preserveSymlinks: true,\n    });\n\n    files.readdir(packagePath).forEach((file) => {\n      if (file.match(/^package.*\\.js$/)) {\n        const packageJsFile = files.pathJoin(packagePath, file);\n        files.writeFile(\n          packageJsFile,\n          files.readFile(packageJsFile, \"utf8\")\n            .replace(\"~package-name~\", packageName));\n      }\n    });\n  }\n\n  // Change the cwd to be used for subsequent runs. For example:\n  //   s.run('create', 'myapp').expectExit(0);\n  //   s.cd('myapp');\n  //   s.run('add', 'somepackage') ...\n  // If you provide a callback, it will invoke the callback and then\n  // change the cwd back to the previous value.  eg:\n  //   s.cd('app1', function () {\n  //     s.run('add', 'somepackage');\n  //   });\n  //   s.cd('app2', function () {\n  //     s.run('add', 'somepackage');\n  //   });\n  cd(relativePath, callback) {\n    const previous = this.cwd;\n    this.cwd = files.pathResolve(this.cwd, relativePath);\n    if (callback) {\n      callback();\n      this.cwd = previous;\n    }\n  }\n\n  // Set an environment variable for subsequent runs.\n  set(name, value) {\n    this.env[name] = value;\n  }\n\n  // Undo set().\n  unset(name) {\n    delete this.env[name];\n  }\n\n  // Write to a file in the sandbox, overwriting its current contents\n  // if any. 'filename' is a path intepreted relative to the Sandbox's\n  // cwd. 'contents' is a string (utf8 is assumed).\n  write(filename, contents) {\n    files.writeFile(files.pathJoin(this.cwd, filename), contents, 'utf8');\n  }\n\n  // Like writeFile, but appends rather than writes.\n  append(filename, contents) {\n    files.appendFile(files.pathJoin(this.cwd, filename), contents, 'utf8');\n  }\n\n  // Reads a file in the sandbox as a utf8 string. 'filename' is a\n  // path intepreted relative to the Sandbox's cwd.  Returns null if\n  // file does not exist.\n  read(filename) {\n    const file = files.pathJoin(this.cwd, filename);\n    if (!files.exists(file)) {\n      return null;\n    } else {\n      return files.readFile(files.pathJoin(this.cwd, filename), 'utf8');\n    }\n  }\n\n  // Copy the contents of one file to another.  In these series of tests, we often\n  // want to switch contents of package.js files. It is more legible to copy in\n  // the backup file rather than trying to write into it manually.\n  cp(from, to) {\n    const contents = this.read(from);\n    if (!contents) {\n      throw new Error(\"File \" + from + \" does not exist.\");\n    };\n    this.write(to, contents);\n  }\n\n  // Delete a file in the sandbox. 'filename' is as in write().\n  unlink(filename) {\n    files.unlink(files.pathJoin(this.cwd, filename));\n  }\n\n  // Make a directory in the sandbox. 'filename' is as in write().\n  mkdir(dirname) {\n    const dirPath = files.pathJoin(this.cwd, dirname);\n    if (! files.exists(dirPath)) {\n      files.mkdir(dirPath);\n    }\n  }\n\n  // Rename something in the sandbox. 'oldName' and 'newName' are as in write().\n  rename(oldName, newName) {\n    files.rename(files.pathJoin(this.cwd, oldName),\n                 files.pathJoin(this.cwd, newName));\n  }\n\n  // Return the current contents of .meteorsession in the sandbox.\n  readSessionFile() {\n    return files.readFile(files.pathJoin(this.root, '.meteorsession'), 'utf8');\n  }\n\n  // Overwrite .meteorsession in the sandbox with 'contents'. You\n  // could use this in conjunction with readSessionFile to save and\n  // restore authentication states.\n  writeSessionFile(contents) {\n    return files.writeFile(files.pathJoin(this.root, '.meteorsession'),\n                           contents, 'utf8');\n  }\n\n  _makeEnv() {\n    const env = Object.assign(Object.create(null), this.env);\n    env.METEOR_SESSION_FILE = files.convertToOSPath(\n      files.pathJoin(this.root, '.meteorsession'));\n\n    if (this.warehouse) {\n      // Tell it where the warehouse lives.\n      env.METEOR_WAREHOUSE_DIR = files.convertToOSPath(this.warehouse);\n\n      // Don't ever try to refresh the stub catalog we made.\n      env.METEOR_OFFLINE_CATALOG = \"t\";\n    }\n\n    // By default (ie, with no mock warehouse and no --release arg) we should be\n    // testing the actual release this is built in, so we pretend that it is the\n    // latest release.\n    if (!this.warehouse && releaseCurrent.isProperRelease()) {\n      env.METEOR_TEST_LATEST_RELEASE = releaseCurrent.name;\n    }\n\n    // Allow user to set TOOL_NODE_FLAGS for self-test app.\n    if (process.env.TOOL_NODE_FLAGS && ! process.env.SELF_TEST_TOOL_NODE_FLAGS)\n      console.log('Consider setting SELF_TEST_TOOL_NODE_FLAGS to configure ' +\n                  'self-test test application spawns');\n    env.TOOL_NODE_FLAGS = process.env.SELF_TEST_TOOL_NODE_FLAGS || '';\n\n    return env;\n  }\n\n  // Writes a stub warehouse (really a tropohouse) to the directory\n  // this.warehouse. This warehouse only contains a meteor-tool package and some\n  // releases containing that tool only (and no packages).\n  //\n  // packageServerUrl indicates which package server we think we are using. Use\n  // the default, if we do not pass this in; you should pass it in any case that\n  // you will be specifying $METEOR_PACKAGE_SERVER_URL in the environment of a\n  // command you are running in this sandbox.\n  _makeWarehouse(releases) {\n    // Ensure we have a tropohouse to copy stuff out of.\n    setUpBuiltPackageTropohouse();\n\n    const serverUrl = this.env.METEOR_PACKAGE_SERVER_URL;\n    const packagesDirectoryName = getPackagesDirectoryName(serverUrl);\n\n    const builder = new Builder({outputPath: this.warehouse});\n    builder.copyDirectory({\n      from: files.pathJoin(builtPackageTropohouseDir, 'packages'),\n      to: packagesDirectoryName,\n      symlink: true\n    });\n    builder.complete();\n\n    const stubCatalog = {\n      syncToken: {},\n      formatVersion: \"1.0\",\n      collections: {\n        packages: [],\n        versions: [],\n        builds: [],\n        releaseTracks: [],\n        releaseVersions: []\n      }\n    };\n\n    const packageVersions = {};\n    let toolPackageVersion = null;\n\n    tropohouseIsopackCache.eachBuiltIsopack((packageName, isopack) => {\n      const packageRec = tropohouseLocalCatalog.getPackage(packageName);\n      if (! packageRec) {\n        throw Error(\"no package record for \" + packageName);\n      }\n      stubCatalog.collections.packages.push(packageRec);\n\n      const versionRec = tropohouseLocalCatalog.getLatestVersion(packageName);\n      if (! versionRec) {\n        throw Error(\"no version record for \" + packageName);\n      }\n      stubCatalog.collections.versions.push(versionRec);\n\n      stubCatalog.collections.builds.push({\n        buildArchitectures: isopack.buildArchitectures(),\n        versionId: versionRec._id,\n        _id: randomToken()\n      });\n\n      if (packageName === \"meteor-tool\") {\n        toolPackageVersion = versionRec.version;\n      } else {\n        packageVersions[packageName] = versionRec.version;\n      }\n    });\n\n    if (! toolPackageVersion) {\n      throw Error(\"no meteor-tool?\");\n    }\n\n    stubCatalog.collections.releaseTracks.push({\n      name: DEFAULT_TRACK,\n      _id: randomToken()\n    });\n\n    // Now create each requested release.\n    Object.keys(releases).forEach((releaseName) => {\n      const configuration = releases[releaseName];\n      // Release info\n      stubCatalog.collections.releaseVersions.push({\n        track: DEFAULT_TRACK,\n        _id: Math.random().toString(),\n        version: releaseName,\n        orderKey: releaseName,\n        description: \"test release \" + releaseName,\n        recommended: !!configuration.recommended,\n        tool: configuration.tool || \"meteor-tool@\" + toolPackageVersion,\n        packages: packageVersions\n      });\n    });\n\n    const dataFile = getPackageStorage({\n      root: this.warehouse,\n      serverUrl: serverUrl\n    });\n    this.warehouseOfficialCatalog = new RemoteCatalog();\n    this.warehouseOfficialCatalog.initialize({\n      packageStorage: dataFile\n    });\n    this.warehouseOfficialCatalog.insertData(stubCatalog);\n\n    // And a cherry on top\n    // XXX this is hacky\n    files.linkToMeteorScript(\n      files.pathJoin(this.warehouse, packagesDirectoryName, \"meteor-tool\", toolPackageVersion,\n        'mt-' + archInfoHost(), 'meteor'),\n      files.pathJoin(this.warehouse, 'meteor'));\n  }\n}\n\nfunction doOrThrow(f) {\n  let ret;\n  const messages = capture(function () {\n    ret = f();\n  });\n  if (messages.hasMessages()) {\n    throw Error(messages.formatMessages());\n  }\n  return ret;\n}\n\nfunction setUpBuiltPackageTropohouse() {\n  if (builtPackageTropohouseDir) {\n    return;\n  }\n  builtPackageTropohouseDir = files.mkdtemp('built-package-tropohouse');\n\n  if (getPackagesDirectoryName() !== 'packages') {\n    throw Error(\"running self-test with METEOR_PACKAGE_SERVER_URL set?\");\n  }\n\n  const tropohouse = new Tropohouse(builtPackageTropohouseDir);\n  tropohouseLocalCatalog = newSelfTestCatalog();\n  const versions = {};\n  tropohouseLocalCatalog.getAllNonTestPackageNames().forEach((packageName) => {\n    versions[packageName] =\n      tropohouseLocalCatalog.getLatestVersion(packageName).version;\n  });\n  const packageMap = new PackageMap(versions, {\n    localCatalog: tropohouseLocalCatalog\n  });\n  // Make an isopack cache that doesn't automatically save isopacks to disk and\n  // has no access to versioned packages.\n  tropohouseIsopackCache = new IsopackCache({\n    packageMap: packageMap,\n    includeCordovaUnibuild: true\n  });\n  doOrThrow(function () {\n    enterJob(\"building self-test packages\", () => {\n      // Build the packages into the in-memory IsopackCache.\n      tropohouseIsopackCache.buildLocalPackages(\n        ROOT_PACKAGES_TO_BUILD_IN_SANDBOX);\n    });\n  });\n\n  // Save all the isopacks into builtPackageTropohouseDir/packages.  (Note that\n  // we are always putting them into the default 'packages' (assuming\n  // $METEOR_PACKAGE_SERVER_URL is not set in the self-test process itself) even\n  // though some tests will want them to be under\n  // 'packages-for-server/test-packages'; we'll fix this in _makeWarehouse.\n  tropohouseIsopackCache.eachBuiltIsopack((name, isopack) => {\n    tropohouse._saveIsopack(isopack, name);\n  });\n}\n\n// Our current strategy for running tests that need warehouses is to build all\n// packages from the checkout into this temporary tropohouse directory, and for\n// each test that need a fake warehouse, copy the built packages into the\n// test-specific warehouse directory.  This isn't particularly fast, but it'll\n// do for now. We build the packages during the first test that needs them.\nlet builtPackageTropohouseDir = null;\nlet tropohouseLocalCatalog = null;\nlet tropohouseIsopackCache = null;\n\n// Let's build a minimal set of packages that's enough to get self-test\n// working.  (And that doesn't need us to download any Atmosphere packages.)\nconst ROOT_PACKAGES_TO_BUILD_IN_SANDBOX = [\n  // We need the tool in order to run from the fake warehouse at all.\n  \"meteor-tool\",\n\n  // We need the packages in the skeleton app in order to test 'meteor create'.\n  'meteor-base',\n  'mobile-experience',\n  'mongo',\n  'blaze-html-templates',\n  \"jquery\", // necessary when using Blaze\n  'session',\n  'tracker',\n  \"autopublish\",\n  \"insecure\",\n  \"standard-minifier-css\",\n  \"standard-minifier-js\",\n  \"es5-shim\",\n  \"shell-server\",\n  \"modern-browsers\",\n  \"ecmascript\",\n  \"typescript\",\n];\n\nfunction newSelfTestCatalog() {\n  if (! files.inCheckout()) {\n    throw Error(\"Only can build packages from a checkout\");\n  }\n\n  const catalogLocal = require('../packaging/catalog/catalog-local.js');\n  const selfTestCatalog = new catalogLocal.LocalCatalog;\n  const messages = capture(\n    { title: \"scanning local core packages\" },\n    () => {\n      const packagesDir =\n        files.pathJoin(files.getCurrentToolsDir(), 'packages');\n\n      // When building a fake warehouse from a checkout, we use local packages,\n      // but *ONLY THOSE FROM THE CHECKOUT*: not app packages or $PACKAGE_DIRS\n      // packages.  One side effect of this: we really really expect them to all\n      // build, and we're fine with dying if they don't (there's no worries\n      // about needing to springboard).\n      selfTestCatalog.initialize({\n        localPackageSearchDirs: [\n          packagesDir,\n          files.pathJoin(packagesDir, \"non-core\"),\n          files.pathJoin(packagesDir, \"non-core\", \"*\", \"packages\"),\n        ],\n      });\n    });\n  if (messages.hasMessages()) {\n    Console.arrowError(\"Errors while scanning core packages:\");\n    Console.printMessages(messages);\n    throw new Error(\"scan failed?\");\n  }\n  return selfTestCatalog;\n}\n"],"file":"tools/tool-testing/sandbox.js.map"}