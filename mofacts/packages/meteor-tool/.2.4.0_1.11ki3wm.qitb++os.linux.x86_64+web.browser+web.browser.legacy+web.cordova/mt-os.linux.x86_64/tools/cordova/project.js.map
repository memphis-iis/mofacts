{"version":3,"sources":["/tools/cordova/project.js"],"names":["_objectSpread","module","link","default","v","export","CordovaProject","_","util","assert","chalk","semver","files","utils","Console","Profile","buildmessage","main","execFileSync","cordova_lib","cordova_events","CordovaError","cordova","events","create","cordova_util","PluginInfoProvider","CORDOVA_PLATFORMS","CORDOVA_PLATFORM_VERSIONS","displayNameForPlatform","displayNamesForPlatforms","newPluginId","convertPluginVersions","convertToGitUrl","CordovaBuilder","on","logIfVerbose","log","verbose","args","rawInfo","format","apply","pinnedPlatformVersions","pinnedPluginVersions","getCommandOptionsForPlugin","plugin","commandOptions","cli_variables","constructor","projectContext","options","projectRoot","getProjectLocalDirectory","pluginsDir","pathJoin","buildJsonPath","convertToOSPath","createIfNeeded","assertInJob","exists","installedPlatforms","listInstalledPlatforms","outdated","some","pinnedVersion","platform","includes","installedVersion","installedVersionForPlatform","valid","lt","debug","rm_recursive","templatePath","mkdtemp","mkdir_p","builder","mobileServerUrl","cordovaServerPort","settingsFile","processControlFile","jobHasMessages","writeConfigXmlAndCopyResources","pathDirname","config","lib","www","url","template","runCommands","undefined","writeBuildJson","iosCommonOptions","buildFlag","writeFile","JSON","stringify","ios","release","prepareFromAppBundle","bundlePath","pluginVersions","copyWWW","ensurePluginsAreSynchronized","pluginsConfiguration","ensurePlatformsAreSynchronized","iosBuildExtrasPath","copyBuildOverride","prepareForPlatform","require","cache","defaultOptions","platforms","prepare","buildForPlatform","build","run","isDevice","extraPaths","push","env","defaultEnvWithPathsAdded","device","checkPlatformRequirements","process","warn","inProject","info","command","allRequirements","requirements","error","message","reject","requirement","id","satisfied","every","installed","name","success","reason","metadata","failInfo","listPlatforms","cwd","updatePlatforms","addPlatform","version","platformSpec","removePlatform","cordovaPlatformsInApp","platformList","getCordovaPlatforms","assertInCapture","listInstalledPluginVersions","usePluginInfoId","pluginInfoProvider","installedPluginVersions","getAllWithinSearchPath","fetchedPluginVersions","listFetchedPluginVersions","object","map","pluginInfo","fetchedPlugin","fetchJsonPath","fetchedPluginsMetadata","parse","readFile","source","idWithVersion","scoped","split","type","ref","path","targetForPlugin","usePluginName","isUrlWithSha","isUrlWithFileScheme","pluginPath","resolveLocalPluginPath","stat","statOrNull","isDirectory","substr","length","isPathRelative","pathResolve","projectDir","addPlugin","retry","target","Object","assign","bind","removePlugins","plugins","isEmpty","forEach","commandOptionsPlugin","enterJob","title","ensurePinnedPluginVersions","newId","labelWarn","shouldReinstallAllPlugins","pluginsFromLocalPath","each","isPluginFromLocalPath","has","installedPluginsByName","keys","androidJsonPath","iosJsonPath","androidJson","installed_plugins","iosJson","previouslyInstalledPlugins","union","fetched","pluginsToRemove","intersection","pluginVersionsToInstall","pluginsToInstallCount","size","installedPluginsCount","reportProgress","current","end","ensurePluginsWereInstalled","requiredPlugins","retryInstall","installedPluginsNames","missingPlugins","filter","Error","join","silent","buildConfig","paths","defaultPaths","unshift","currentEnvWithPathsAdded","nodeBinDir","getCurrentNodeBinDir","iosSimBinPath","getDevBundle","promiseOrAsyncFunction","toUpperCase","slice","oldCwd","chdir","oldEnv","key","promise","Promise","await","arrowError","consoleOptions","indent","errorMessage","stack","green","ExitWithCode","CPp","prototype","prefix","endsWith"],"mappings":"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","sourcesContent":["import _ from 'underscore';\nimport util from 'util';\nimport assert from 'assert';\nimport chalk from 'chalk';\nimport semver from 'semver';\n\nimport files from '../fs/files';\nimport utils from '../utils/utils.js';\nimport { Console } from '../console/console.js';\nimport { Profile } from '../tool-env/profile';\nimport buildmessage from '../utils/buildmessage.js';\nimport main from '../cli/main.js';\nimport { execFileSync } from '../utils/processes';\n\nimport { cordova as cordova_lib, events as cordova_events, CordovaError }\n  from 'cordova-lib';\nimport create from \"cordova-create\";\nimport cordova_util from 'cordova-lib/src/cordova/util.js';\nimport PluginInfoProvider from 'cordova-common/src/PluginInfo/PluginInfoProvider.js';\n\nimport { CORDOVA_PLATFORMS, CORDOVA_PLATFORM_VERSIONS, displayNameForPlatform, displayNamesForPlatforms,\n  newPluginId, convertPluginVersions, convertToGitUrl } from './index.js';\nimport { CordovaBuilder } from './builder.js';\n\ncordova_events.on('verbose', logIfVerbose);\ncordova_events.on('log', logIfVerbose);\ncordova_events.on('info', logIfVerbose);\ncordova_events.on('warn', log);\ncordova_events.on('error', log);\n\ncordova_events.on('results', logIfVerbose);\n\nfunction logIfVerbose(...args) {\n  if (Console.verbose) {\n    log(...args);\n  }\n};\n\nfunction log(...args) {\n  Console.rawInfo(`%% ${util.format.apply(null, args)}\\n`);\n}\n\n// We pin platform versions ourselves instead of relying on cordova-lib\n// so we we can update them independently (e.g. use Cordova iOS 4.0.1\n// with Cordova 5.4.1)\nconst pinnedPlatformVersions = CORDOVA_PLATFORM_VERSIONS;\n\n// We pin plugin versions to make sure we do not install versions that are\n// incompatible with the current platform versions.\n// Versions are taken from cordova-lib's package.json and should be updated\n// when we update to a newer version of cordova-lib.\nconst pinnedPluginVersions = {\n  \"cordova-plugin-battery-status\": \"1.2.4\",\n  \"cordova-plugin-camera\": \"2.4.1\",\n  \"cordova-plugin-console\": \"1.1.0\", // Deprecated, remove in future\n  \"cordova-plugin-contacts\": \"2.3.1\",\n  \"cordova-plugin-device\": \"1.1.6\",\n  \"cordova-plugin-device-motion\": \"2.0.0\", // Deprecated, remove in future\n  \"cordova-plugin-device-orientation\": \"2.0.0\", // Deprecated, remove in future\n  \"cordova-plugin-dialogs\": \"1.3.3\",\n  \"cordova-plugin-file\": \"4.3.3\",\n  \"cordova-plugin-file-transfer\": \"1.6.3\",\n  \"cordova-plugin-geolocation\": \"2.4.3\",\n  \"cordova-plugin-globalization\": \"1.0.7\",\n  \"cordova-plugin-inappbrowser\": \"3.2.0\",\n  \"cordova-plugin-legacy-whitelist\": \"1.1.2\",\n  \"cordova-plugin-media\": \"3.0.1\",\n  \"cordova-plugin-media-capture\": \"1.4.3\",\n  \"cordova-plugin-network-information\": \"1.3.3\",\n  \"cordova-plugin-splashscreen\": \"4.1.0\",\n  \"cordova-plugin-statusbar\": \"2.3.0\",\n  \"cordova-plugin-test-framework\": \"1.1.5\",\n  \"cordova-plugin-vibration\": \"2.1.5\",\n  \"cordova-plugin-whitelist\": \"1.3.2\",\n}\n\n/**\n * To fix Cordova error: Variable(s) missing we convert the cli_variables\n * when removing plugins we want to convert for each plugin, for instance,\n * cordova-plugin-facebook4:\n * commandOptions {\n *   ...\n *   cli_variables: {\n *     'cordova-plugin-googleplus': {\n *       REVERSED_CLIENT_ID: 'com.googleusercontent.apps.11111111-xxkodsuusaiusixuaix'\n *     },\n *     'cordova-plugin-facebook4': { APP_ID: '1111111111111111', APP_NAME: 'appname' }\n *   }\n * }\n * into this\n * commandOptions {\n *   ...\n *   cli_variables: { APP_ID: '1111111111111111', APP_NAME: 'appname' }\n * }\n *\n * @param plugin\n * @param commandOptions\n */\nconst getCommandOptionsForPlugin = (plugin, commandOptions = {}) => {\n  const cli_variables = commandOptions && commandOptions.cli_variables\n    && commandOptions.cli_variables[plugin] || {};\n  return {...commandOptions, cli_variables};\n}\n\nexport class CordovaProject {\n  constructor(projectContext, options = {}) {\n\n    this.projectContext = projectContext;\n\n    this.projectRoot = projectContext.getProjectLocalDirectory('cordova-build');\n    this.options = options;\n\n    this.pluginsDir = files.pathJoin(this.projectRoot, 'plugins');\n\n    this.buildJsonPath = files.convertToOSPath(\n      files.pathJoin(this.projectRoot, 'build.json'));\n\n    this.createIfNeeded();\n  }\n\n  createIfNeeded() {\n    buildmessage.assertInJob();\n\n    // Check if we have an existing Cordova project directory with outdated\n    // platforms. In that case, we remove the whole directory to avoid issues.\n    if (files.exists(this.projectRoot)) {\n      const installedPlatforms = this.listInstalledPlatforms();\n\n      const outdated = _.some(pinnedPlatformVersions, (pinnedVersion, platform) => {\n        // If the platform is not installed, it cannot be outdated\n        if (!installedPlatforms.includes(platform)) {\n          return false;\n        }\n\n        const installedVersion = this.installedVersionForPlatform(platform);\n        // If we cannot establish the installed version, we consider it outdated\n        if (!installedVersion) {\n          return true;\n        }\n\n        if (! semver.valid(pinnedVersion)) {\n          // If pinnedVersion is not a semantic version but instead\n          // something like a GitHub tarball URL, assume not outdated.\n          return false;\n        }\n\n        return semver.lt(installedVersion, pinnedVersion);\n      });\n\n      if (outdated) {\n        Console.debug(`Removing Cordova project directory to avoid issues with\noutdated platforms`);\n        // Remove Cordova project directory to start afresh\n        // and avoid a broken project\n        files.rm_recursive(this.projectRoot);\n      }\n    }\n\n    if (!files.exists(this.projectRoot)) {\n      // We create a temporary directory with a generated config.xml\n      // to use as a template for creating the Cordova project\n      // This way, we are not dependent on the contents of\n      // cordova-app-hello-world but we base our initial project state on\n      // our own defaults and optionally a mobile-config.js\n\n      const templatePath = files.mkdtemp('cordova-template-');\n\n      // If we don't create an empty hooks directory, cordova-lib will attempt\n      // to install one from a hardcoded path to cordova-app-hello-world\n      files.mkdir_p(files.pathJoin(templatePath, 'hooks'));\n\n      // If we don't create an empty www directory, cordova-lib will get\n      // confused\n      files.mkdir_p(files.pathJoin(templatePath, 'www'));\n\n      const builder = new CordovaBuilder(\n        this.projectContext,\n        templatePath,\n        { mobileServerUrl: this.options.mobileServerUrl,\n          cordovaServerPort: this.options.cordovaServerPort,\n          settingsFile: this.options.settingsFile }\n      );\n\n      builder.processControlFile();\n\n      if (buildmessage.jobHasMessages()) {\n        return;\n      }\n\n      // Don't copy resources (they will be copied as part of the prepare)\n      builder.writeConfigXmlAndCopyResources(false);\n\n      // Create the Cordova project root directory\n      files.mkdir_p(files.pathDirname(this.projectRoot));\n\n      const config = {\n        lib: {\n          www: {\n            url: files.convertToOSPath(templatePath),\n            template: true\n          }\n        }\n      };\n\n      // Don't set cwd to project root in runCommands because it doesn't\n      // exist yet\n      this.runCommands('creating Cordova project', async () => {\n        // No need to pass in appName and appId because these are set from\n        // the generated config.xml\n        await create(files.convertToOSPath(this.projectRoot),\n          undefined, undefined, config);\n      }, undefined, null);\n    }\n\n    this.writeBuildJson();\n  }\n\n  writeBuildJson() {\n    if (files.exists(this.buildJsonPath)) {\n      return;\n    }\n\n    const iosCommonOptions = {\n      // See https://github.com/apache/cordova-ios/issues/407:\n      buildFlag: [\n        \"-UseModernBuildSystem=0\",\n        ...(Console.verbose ? [] : [\"-quiet\"])\n      ]\n    };\n\n    files.writeFile(\n      this.buildJsonPath,\n      JSON.stringify({\n        ios: {\n          debug: iosCommonOptions,\n          release: iosCommonOptions,\n        }\n      }, null, 2) + \"\\n\",\n    );\n  }\n\n  // Preparing\n\n  prepareFromAppBundle(bundlePath, pluginVersions) {\n    assert(bundlePath);\n    assert(pluginVersions);\n\n    buildmessage.assertInJob();\n\n    Console.debug('Preparing Cordova project from app bundle');\n\n    const builder = new CordovaBuilder(\n      this.projectContext,\n      this.projectRoot,\n      { mobileServerUrl: this.options.mobileServerUrl,\n        cordovaServerPort: this.options.cordovaServerPort,\n        settingsFile: this.options.settingsFile }\n    );\n\n    builder.processControlFile();\n\n    if (buildmessage.jobHasMessages()) {\n      return;\n    }\n\n    builder.writeConfigXmlAndCopyResources();\n    builder.copyWWW(bundlePath);\n\n    this.ensurePluginsAreSynchronized(pluginVersions,\n        builder.pluginsConfiguration);\n    this.ensurePlatformsAreSynchronized();\n\n    // Temporary workaround for Cordova iOS bug until\n    // https://issues.apache.org/jira/browse/CB-10885 is fixed\n    const iosBuildExtrasPath =\n      files.pathJoin(\n        this.projectRoot,\n        'platforms/ios/cordova/build-extras.xcconfig');\n\n    if (files.exists(iosBuildExtrasPath)) {\n      files.writeFile(\n        iosBuildExtrasPath,\n        'LD_RUNPATH_SEARCH_PATHS = @executable_path/Frameworks;');\n    }\n\n    builder.copyBuildOverride();\n  }\n\n  prepareForPlatform(platform, options) {\n    assert(platform);\n\n    // Temporary workaround for Cordova iOS bug until\n    // https://issues.apache.org/jira/browse/CB-11731 has been released\n    delete require.cache[files.pathJoin(this.projectRoot,\n      'platforms/ios/cordova/lib/configMunger.js')];\n    delete require.cache[files.pathJoin(this.projectRoot,\n      'platforms/ios/cordova/lib/prepare.js')];\n\n    const commandOptions = {\n      ...this.defaultOptions,\n      platforms: [platform],\n    };\n\n    this.runCommands(`preparing Cordova project for platform \\\n${displayNameForPlatform(platform)}`, async () => {\n      await cordova_lib.prepare(commandOptions);\n    });\n  }\n\n  // Building (includes prepare)\n\n  buildForPlatform(platform, options = {}) {\n    assert(platform);\n\n    const commandOptions = {\n      ...this.defaultOptions,\n      platforms: [platform],\n      options,\n    };\n\n    this.runCommands(`building Cordova app for platform \\\n${displayNameForPlatform(platform)}`, async () => {\n      await cordova_lib.build(commandOptions);\n    });\n  }\n\n  // Running\n\n  async run(platform, isDevice, options = [], extraPaths = []) {\n    options.push('--buildConfig', this.buildJsonPath);\n    options.push(isDevice ? '--device' : '--emulator');\n\n    let env = this.defaultEnvWithPathsAdded(...extraPaths);\n    const commandOptions = {\n      ...this.defaultOptions,\n      platforms: [platform],\n      device: isDevice,\n    };\n\n    this.runCommands(`running Cordova app for platform \\\n${displayNameForPlatform(platform)} with options ${options}`, async () => {\n      await cordova_lib.run(commandOptions);\n    });\n\n  }\n\n  // Platforms\n\n  // Checks to see if the requirements for building and running on the\n  // specified Cordova platform are satisfied, printing\n  // installation instructions when needed.\n  checkPlatformRequirements(platform) {\n    if (platform === 'ios' && process.platform !== 'darwin') {\n      Console.warn(\"Currently, it is only possible to build iOS apps \\\non an OS X system.\");\n      return false;\n    }\n\n    const installedPlatforms = this.listInstalledPlatforms();\n\n    const inProject = installedPlatforms.includes(platform);\n    if (!inProject) {\n      Console.warn(`Please add the ${displayNameForPlatform(platform)} \\\nplatform to your project first.`);\n      Console.info(`Run: ${Console.command(`meteor add-platform ${platform}`)}`);\n      return false;\n    }\n\n    const allRequirements = this.runCommands(`checking Cordova \\\nrequirements for platform ${displayNameForPlatform(platform)}`,\n      async () => {\n        return await cordova_lib.requirements([platform],\n          this.defaultOptions);\n      });\n    let requirements = allRequirements && allRequirements[platform];\n    if (!requirements) {\n      Console.error(`Failed to check requirements for platform \\\n${displayNameForPlatform(platform)}`);\n      return false;\n    } else if (requirements instanceof CordovaError) {\n      Console.error(`Cordova error: ${requirements.message}`);\n      return false;\n    }\n\n    // We don't use ios-deploy, but open Xcode to run on a device instead\n    requirements = _.reject(requirements,\n      requirement => requirement.id === 'ios-deploy');\n\n    const satisfied = _.every(requirements,\n      requirement => requirement.installed);\n\n    if (!satisfied) {\n      Console.info();\n      Console.info(`Your system does not yet seem to fulfill all requirements \\\nto build apps for ${displayNameForPlatform(platform)}.`);\n\n      Console.info();\n      Console.info(\"Please follow the installation instructions in the mobile guide:\");\n      Console.info(Console.url(\"http://guide.meteor.com/cordova.html#installing-prerequisites\"));\n\n      Console.info();\n\n      Console.info(\"Status of the individual requirements:\");\n      for (const requirement of requirements) {\n        const name = requirement.name;\n        if (requirement.installed) {\n          Console.success(name, \"installed\");\n        } else {\n          const reason = requirement.metadata && requirement.metadata.reason;\n          if (reason) {\n            Console.failInfo(`${name}: ${reason}`);\n          } else {\n            Console.failInfo(name);\n          }\n        }\n      }\n    }\n    return satisfied;\n  }\n\n  listInstalledPlatforms() {\n    return cordova_util.listPlatforms(files.convertToOSPath(this.projectRoot));\n  }\n\n  installedVersionForPlatform(platform) {\n    const command = files.convertToOSPath(files.pathJoin(\n      this.projectRoot, 'platforms', platform, 'cordova', 'version'));\n    // Make sure the command exists before trying to execute it\n    if (files.exists(command)) {\n      return this.runCommands(\n        `getting installed version for platform ${platform} in Cordova project`,\n        execFileSync(command, {\n          env: this.defaultEnvWithPathsAdded(),\n          cwd: this.projectRoot}), null, null);\n    } else {\n      return null;\n    }\n  }\n\n  updatePlatforms(platforms = this.listInstalledPlatforms()) {\n    this.runCommands(`updating Cordova project for platforms \\\n${displayNamesForPlatforms(platforms)}`, async () => {\n      await cordova_lib.platform('update', platforms, this.defaultOptions);\n    });\n  }\n\n  addPlatform(platform) {\n    this.runCommands(`adding platform ${displayNameForPlatform(platform)} \\\nto Cordova project`, async () => {\n      let version = pinnedPlatformVersions[platform];\n      let platformSpec = version ? `${platform}@${version}` : platform;\n      await cordova_lib.platform('add', platformSpec, this.defaultOptions);\n    });\n  }\n\n  removePlatform(platform) {\n    this.runCommands(`removing platform ${displayNameForPlatform(platform)} \\\nfrom Cordova project`, async () => {\n      await cordova_lib.platform('rm', platform, this.defaultOptions);\n    });\n  }\n\n  get cordovaPlatformsInApp() {\n    return this.projectContext.platformList.getCordovaPlatforms();\n  }\n\n  // Ensures that the Cordova platforms are synchronized with the app-level\n  // platforms.\n  ensurePlatformsAreSynchronized(platforms = this.cordovaPlatformsInApp) {\n    buildmessage.assertInCapture();\n\n    const installedPlatforms = this.listInstalledPlatforms();\n\n    for (let platform of platforms) {\n      if (installedPlatforms.includes(platform)) {\n        continue;\n      }\n\n      this.addPlatform(platform);\n    }\n\n    for (let platform of installedPlatforms) {\n      if (!platforms.includes(platform) &&\n        CORDOVA_PLATFORMS.includes(platform)) {\n        this.removePlatform(platform);\n      }\n    }\n  }\n\n  // Plugins\n\n  // Because PluginInfoProvider reads in the plugin versions from\n  // their plugin.xml, that only gives us the declared version and doesn't\n  // tell us if plugins have been fetched from a Git SHA URL or a local path.\n  // So we overwrite the declared versions with versions from\n  // listFetchedPluginVersions that do contain this information.\n  listInstalledPluginVersions(usePluginInfoId = false) {\n    const pluginInfoProvider = new PluginInfoProvider();\n    const installedPluginVersions = pluginInfoProvider.getAllWithinSearchPath(\n      files.convertToOSPath(this.pluginsDir));\n    const fetchedPluginVersions = this.listFetchedPluginVersions();\n    return _.object(installedPluginVersions.map(pluginInfo => {\n      const fetchedPlugin = fetchedPluginVersions[pluginInfo.id];\n      const id = fetchedPlugin.id;\n      const version = fetchedPlugin.version || pluginInfo.version;\n      return [usePluginInfoId ? pluginInfo.id : id, version];\n    }));\n  }\n\n  // There is no Cordova function to get the fetched plugin versions, so we\n  // have to read in fetch.json (a file managed by plugman, a semi-independent\n  // part of cordova-lib) and parse the format ourselves into a version\n  // string suitable to be passed to targetForPlugin.\n  // Note that a plugin can be fetched but not installed, so that's why we\n  // still need a separate listInstalledPluginVersions.\n  listFetchedPluginVersions() {\n    const fetchJsonPath = files.pathJoin(this.pluginsDir, 'fetch.json');\n\n    if (!files.exists(fetchJsonPath)) {\n      return {};\n    }\n\n    const fetchedPluginsMetadata = JSON.parse(files.readFile(\n      fetchJsonPath, 'utf8'));\n    return _.object(_.map(fetchedPluginsMetadata, (metadata, name) => {\n      const source = metadata.source;\n\n      const idWithVersion = source.id ? source.id : name;\n      const scoped = idWithVersion[0] === '@';\n      const id = `${scoped ? '@' : ''}${idWithVersion.split('@')[scoped ? 1 : 0]}`;\n      let version;\n      if (source.type === 'registry') {\n        version = idWithVersion.split('@')[scoped ? 2 : 1];\n      } else if (source.type === 'git') {\n        version = `${source.url}${'ref' in source ? `#${source.ref}` : ''}`;\n      } else if (source.type === 'local') {\n        version = `file://${source.path}`;\n      }\n      return [name, { id, version }];\n    }));\n  }\n\n  // Construct a target suitable for 'cordova plugin add' from an id and\n  // version, converting or resolving a URL or path where needed.\n  targetForPlugin(id, version, { usePluginName = false } = {}) {\n    assert(id);\n    assert(version);\n\n    buildmessage.assertInJob();\n\n    if (utils.isUrlWithSha(version)) {\n      return usePluginName ? convertToGitUrl(version) :\n        `${id}@${convertToGitUrl(version)}`;\n    } else if (utils.isUrlWithFileScheme(version)) {\n      // Strip file:// and resolve the path relative to the cordova-build\n      // directory\n      const pluginPath = this.resolveLocalPluginPath(version);\n      // We need to check if the directory exists ourselves because Cordova\n      // will try to install from npm (and fail with an unhelpful error message)\n      // if the directory is not found\n      const stat = files.statOrNull(pluginPath);\n      if (!(stat && stat.isDirectory())) {\n        buildmessage.error(`Couldn't find local directory \\\n'${files.convertToOSPath(pluginPath)}' \\\n(while attempting to install plugin ${id}).`);\n        return null;\n      }\n      return files.convertToOSPath(pluginPath);\n    } else {\n      return `${id}@${version}`;\n    }\n  }\n\n  // Strips file:// and resolves the path relative to the cordova-build\n  // directory\n  resolveLocalPluginPath(pluginPath) {\n    pluginPath = pluginPath.substr(\"file://\".length);\n    if (utils.isPathRelative(pluginPath)) {\n      return files.pathResolve(this.projectContext.projectDir, pluginPath);\n    } else {\n      return pluginPath;\n    }\n  }\n\n  addPlugin(id, version, config = {}, options = {}) {\n    const { retry = true } = options;\n    const target = this.targetForPlugin(id, version, options);\n    if (target) {\n      const commandOptions = Object.assign(this.defaultOptions,\n        { cli_variables: config, link: utils.isUrlWithFileScheme(version) });\n\n      try {\n        this.runCommands(`adding plugin ${target} \\\nto Cordova project`, cordova_lib.plugin.bind(undefined, 'add', [target],\n          commandOptions));\n      } catch (error) {\n        if (retry && utils.isUrlWithSha(version)) {\n          Console.warn(`Cordova plugin add for ${id} failed with plugin id \n          in the URL with hash, retrying now with plugin name. If this works you\n          can ignore the error above or you can update your plugin declaration\n          to use the id from config.xml instead of the name from package.json`);\n          this.addPlugin(id, version, config, { ...options,\n            usePluginName: true, retry: false });\n          return;\n        }\n        throw error;\n      }\n    }\n  }\n\n  // plugins is an array of plugin IDs.\n  removePlugins(plugins,  config = {}) {\n    if (_.isEmpty(plugins)) {\n      return;\n    }\n\n    const commandOptions = Object.assign(this.defaultOptions,\n      { cli_variables: config });\n\n    plugins.forEach(plugin => {\n      const commandOptionsPlugin = getCommandOptionsForPlugin(plugin,\n        commandOptions);\n\n      this.runCommands(`removing plugin ${plugin} \\\n  from Cordova project`, cordova_lib.plugin.bind(undefined, 'rm --force', [plugin],\n        commandOptionsPlugin));\n    });\n  }\n\n  // Ensures that the Cordova plugins are synchronized with the app-level\n  // plugins.\n  ensurePluginsAreSynchronized(pluginVersions, pluginsConfiguration = {}) {\n    assert(pluginVersions);\n\n    buildmessage.assertInCapture();\n\n    buildmessage.enterJob({ title: \"installing Cordova plugins\"}, () => {\n      // Cordova plugin IDs have changed as part of moving to npm.\n      // We convert old plugin IDs to new IDs in the 1.2.0-cordova-changes\n      // upgrader and when adding plugins, but packages may still depend on\n      // the old IDs.\n      // To avoid attempts at duplicate installation, we check for old IDs here\n      // and convert them to new IDs when needed. We also convert old-style GitHub\n      // tarball URLs to new Git URLs, and check if other Git URLs contain a\n      // SHA reference.\n      pluginVersions = convertPluginVersions(pluginVersions);\n\n      // To ensure we do not attempt to install plugin versions incompatible\n      // with the current platform versions, we compare them against a list of\n      // pinned versions and adjust them if necessary.\n      this.ensurePinnedPluginVersions(pluginVersions);\n\n      if (buildmessage.jobHasMessages()) {\n        return;\n      }\n\n      // Also, we warn if any App.configurePlugin calls in mobile-config.js\n      // need to be updated (and in the meantime we take care of the\n      // conversion of the plugin configuration to the new ID).\n      pluginsConfiguration = _.object(_.map(pluginsConfiguration, (config, id) => {\n        const newId = newPluginId(id);\n        if (newId) {\n          Console.warn();\n          Console.labelWarn(`Cordova plugin ${id} has been renamed to ${newId} \\\nas part of moving to npm. Please change the App.configurePlugin call in \\\nmobile-config.js accordingly.`);\n          return [newId, config];\n        } else {\n          return [id, config];\n        }\n      }));\n\n      const installedPluginVersions =\n        convertPluginVersions(this.listInstalledPluginVersions());\n\n      // Due to the dependency structure of Cordova plugins, it is impossible to\n      // upgrade the version on an individual Cordova plugin. Instead, whenever\n      // a new Cordova plugin is added or removed, or its version is changed,\n      // we just reinstall all of the plugins.\n      let shouldReinstallAllPlugins = false;\n\n      // Iterate through all of the plugins and find if any of them have a new\n      // version. Additionally, check if we have plugins installed from a local\n      // path.\n      const pluginsFromLocalPath = {};\n      _.each(pluginVersions, (version, id) => {\n        // Check if plugin is installed from a local path.\n        const isPluginFromLocalPath = utils.isUrlWithFileScheme(version);\n\n        if (isPluginFromLocalPath) {\n          pluginsFromLocalPath[id] = version;\n        } else {\n          if (!_.has(installedPluginVersions, id) ||\n            installedPluginVersions[id] !== version) {\n            // We do not have the plugin installed or the version has changed.\n            shouldReinstallAllPlugins = true;\n            Console.debug(`Plugin ${id} version have changed or it was added, will \\\nperform cordova plugins reinstall`);\n          }\n        }\n      });\n\n      const installedPluginsByName = Object.keys(this.listInstalledPluginVersions(true));\n\n      // Check to see if we have any installed plugins that are not in the\n      // current set of plugins.\n      if (!shouldReinstallAllPlugins) {\n        // We need to know which plugins were installed because they were\n        // declared in cordova-plugins and which are just dependencies of others.\n        // Luckily for us android.json and ios.json have that information.\n        const androidJsonPath = files.pathJoin(this.pluginsDir, 'android.json');\n        const iosJsonPath = files.pathJoin(this.pluginsDir, 'ios.json');\n\n        const androidJson = files.exists(androidJsonPath) ? JSON.parse(files.readFile(\n          androidJsonPath, 'utf8')) : { installed_plugins: {} };\n        const iosJson = files.exists(iosJsonPath) ? JSON.parse(files.readFile(\n          iosJsonPath, 'utf8')) : { installed_plugins: {} };\n\n        let previouslyInstalledPlugins = _.union(\n          Object.keys(androidJson.installed_plugins), Object.keys(iosJson.installed_plugins));\n\n        // Now the problem is we have a list of names the plugins (name defined in the plugin.xml)\n        // while in cordova-plugins we have can have their npm ids. We need to translate the list.\n        const fetched = this.listFetchedPluginVersions();\n        previouslyInstalledPlugins = previouslyInstalledPlugins.map(name => {\n          return fetched[name].id;\n        });\n\n        previouslyInstalledPlugins.forEach(id => {\n          if (!_.has(pluginVersions, id)) {\n            Console.debug(`Plugin ${id} was removed, will \\\nperform cordova plugins reinstall`);\n            shouldReinstallAllPlugins = true;\n          }\n        });\n      }\n\n      if (!_.isEmpty(pluginsFromLocalPath) && !shouldReinstallAllPlugins) {\n        Console.debug('Reinstalling Cordova plugins added from the local path');\n      }\n\n      // We either reinstall all plugins or only those fetched from a local\n      // path.\n      if (shouldReinstallAllPlugins || !_.isEmpty(pluginsFromLocalPath)) {\n        let pluginsToRemove;\n        if (shouldReinstallAllPlugins) {\n          pluginsToRemove = installedPluginsByName;\n        } else {\n          // Only try to remove plugins that are currently installed.\n          pluginsToRemove = _.intersection(\n            Object.keys(pluginsFromLocalPath),\n            Object.keys(installedPluginVersions));\n        }\n\n        this.removePlugins(pluginsToRemove, pluginsConfiguration);\n\n        let pluginVersionsToInstall;\n\n        // Now install the necessary plugins.\n        if (shouldReinstallAllPlugins) {\n          pluginVersionsToInstall = pluginVersions;\n        } else {\n          pluginVersionsToInstall = pluginsFromLocalPath;\n        }\n\n        const pluginsToInstallCount = _.size(pluginVersionsToInstall);\n        let installedPluginsCount = 0;\n\n        buildmessage.reportProgress({ current: 0, end: pluginsToInstallCount });\n        _.each(pluginVersionsToInstall, (version, id) => {\n          this.addPlugin(id, version, pluginsConfiguration[id]);\n\n          buildmessage.reportProgress({\n            current: ++installedPluginsCount,\n            end: pluginsToInstallCount\n          });\n        });\n\n        this.ensurePluginsWereInstalled(pluginVersionsToInstall, pluginsConfiguration, true);\n      }\n    });\n  }\n\n  // Ensures that the Cordova plugins are installed\n  ensurePluginsWereInstalled(requiredPlugins, pluginsConfiguration, retryInstall) {\n    // List of all installed plugins. This should work for global / local / scoped cordova plugins.\n    // Examples:\n    // cordova-plugin-whitelist@1.3.2 => { 'cordova-plugin-whitelist': '1.3.2' }\n    // com.cordova.plugin@file://.cordova-plugins/plugin => { 'com.cordova.plugin': 'file://.cordova-plugins/plugin' }\n    // @scope/plugin@1.0.0 => { 'com.cordova.plugin': 'scope/plugin' }\n    const installed = this.listInstalledPluginVersions();\n    const installedPluginsNames = Object.keys(installed);\n    const missingPlugins = {};\n\n    Object.keys(requiredPlugins).filter(plugin => {\n      if (!installedPluginsNames.includes(plugin)) {\n        Console.debug(`Plugin ${plugin} was not installed.`);\n        if (retryInstall) {\n          Console.debug(`Retrying to install ${plugin}.`);\n          this.addPlugin(\n            plugin,\n            requiredPlugins[plugin],\n            pluginsConfiguration[plugin]\n          );\n        }\n        missingPlugins[plugin] = requiredPlugins[plugin];\n      }\n    });\n\n    // All plugins were installed\n    if (Object.keys(missingPlugins).length === 0) {\n      return;\n    }\n\n    // Check one more time after re-installation.\n    if (retryInstall) {\n      this.ensurePluginsWereInstalled(missingPlugins, pluginsConfiguration, false);\n    } else {\n      // Fail, to prevent building and publishing faulty mobile app without at this moment we need to stop.\n      throw new Error(`Some Cordova plugins installation failed: (${Object.keys(missingPlugins).join(', ')}).`);\n    }\n  }\n\n  ensurePinnedPluginVersions(pluginVersions) {\n    assert(pluginVersions);\n\n    _.each(pluginVersions, (version, id) => {\n      // Skip plugin specs that are not actual versions\n      if (utils.isUrlWithSha(version) || utils.isUrlWithFileScheme(version)) {\n        return;\n      }\n\n      const pinnedVersion = pinnedPluginVersions[id];\n\n      if (pinnedVersion && semver.lt(version, pinnedVersion)) {\n        Console.labelWarn(`Attempting to install plugin ${id}@${version}, but \\\nit should have a minimum version of ${pinnedVersion} to ensure compatibility \\\nwith the current platform versions. Installing the minimum version for \\\nconvenience, but you should adjust your dependencies.`);\n        pluginVersions[id] = pinnedVersion;\n      }\n    });\n  }\n\n  // Cordova commands support\n\n  get defaultOptions() {\n    return {\n      silent: !Console.verbose,\n      verbose: Console.verbose,\n      buildConfig: this.buildJsonPath,\n    };\n  }\n\n  defaultEnvWithPathsAdded(...extraPaths) {\n    let paths = (this.defaultPaths || []);\n    paths.unshift(...extraPaths);\n    const env = files.currentEnvWithPathsAdded(...paths);\n    return env;\n  }\n\n  get defaultPaths() {\n    const nodeBinDir = files.getCurrentNodeBinDir();\n\n    // Add the ios-sim bin path so Cordova can find it\n    const iosSimBinPath =\n      files.pathJoin(files.getDevBundle(),\n      'lib/node_modules/ios-sim/bin');\n\n    return [nodeBinDir, iosSimBinPath];\n  }\n\n  runCommands(title, promiseOrAsyncFunction, env = this.defaultEnvWithPathsAdded(),\n    cwd = this.projectRoot) {\n    // Capitalize title for debug output\n    Console.debug(title[0].toUpperCase() + title.slice(1));\n\n    const oldCwd = process.cwd();\n    if (cwd) {\n      process.chdir(files.convertToOSPath(cwd));\n    }\n\n    const oldEnv = process.env;\n    if (env) {\n      // this preserves case insensitivity for PATH on windows\n      Object.keys(env).forEach(key => {\n        process.env[key] = env[key];\n      });\n    }\n\n    try {\n      const promise = (typeof promiseOrAsyncFunction === 'function') ?\n        promiseOrAsyncFunction() : promiseOrAsyncFunction;\n      return Promise.await(promise);\n    } catch (error) {\n      Console.arrowError('Errors executing Cordova commands:');\n      Console.error();\n      const consoleOptions = Console.options({ indent: 3 });\n      Console.error(`While ${title}:`, consoleOptions);\n\n      if (error instanceof CordovaError) {\n        // Only print the message for errors thrown by cordova-lib, because\n        // these are meant for end-user consumption.\n        // But warn that they may not completely apply to our situation.\n        // (We do print the stack trace if we are in verbose mode.)\n        const errorMessage = Console.verbose ? (error.stack || error.message) :\n          error.message;\n        Console.error(`Cordova error: ${errorMessage}`, consoleOptions);\n        Console.error(chalk.green(`(If the error message contains suggestions \\\nfor a fix, note that this may not apply to the Meteor integration. You can try \\\nrunning again with the --verbose option to help diagnose the issue.)`),\n          consoleOptions);\n      } else {\n        // Print stack trace for other errors by default, because the message\n        // usually does not give us enough information to know what is going on\n        const errorMessage = error && error.stack || error;\n        Console.error(errorMessage, consoleOptions);\n      };\n      throw new main.ExitWithCode(1);\n    } finally {\n      if (cwd && oldCwd) {\n        process.chdir(oldCwd);\n      }\n      if (env && oldEnv) {\n        process.env = oldEnv;\n      }\n    }\n  }\n}\n\nconst CPp = CordovaProject.prototype;\n[\"prepareFromAppBundle\",\n \"prepareForPlatform\",\n \"buildForPlatform\",\n].forEach(name => {\n  CPp[name] = Profile(platform => {\n    const prefix = `CordovaProject#${name}`;\n    return name.endsWith(\"ForPlatform\") ? `${prefix} for ${\n      displayNameForPlatform(platform)\n    }` : prefix;\n  }, CPp[name]);\n});\n"],"file":"tools/cordova/project.js.map"}