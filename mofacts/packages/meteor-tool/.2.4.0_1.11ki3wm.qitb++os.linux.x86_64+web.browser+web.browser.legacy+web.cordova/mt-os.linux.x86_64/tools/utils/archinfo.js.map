{"version":3,"sources":["tools/utils/archinfo.ts"],"names":[],"mappings":"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","sourcesContent":["import { max } from 'underscore';\nimport os from 'os';\nconst utils = require('./utils');\n\n/* Meteor's current architecture scheme defines the following virtual\n * machine types, which are defined by specifying what is promised by\n * the host environment:\n *\n * browser.w3c\n *   A web browser compliant with modern standards. This is\n *   intentionally a broad definition. In the coming years, as web\n *   standards evolve, we will likely tighten it up.\n *\n * browser.ie[678]\n *   Old versions of Internet Explorer (not sure yet exactly which\n *   versions to distinguish -- maybe 6 and 8?)\n *\n * os.linux.x86_64\n *   Linux on Intel x86 architecture. x86_64 means a system that can\n *   run 64-bit images, furnished with 64-bit builds of shared\n *   libraries (there is no guarantee that 32-bit builds of shared\n *   libraries will be available). x86_32 means a system that can run\n *   32-bit images, furnished with 32-bit builds of shared libraries.\n *   Additionally, if a package contains shared libraries (for use by\n *   other packages), then if the package is built for x86_64, it\n *   should contain a 64-bit version of the library, and likewise for\n *   32-bit.\n *\n *   Operationally speaking, if you worked at it, under this\n *   definition it would be possible to build a Linux system that can\n *   run both x86_64 and x86_32 images (eg, by using a 64-bit kernel\n *   and making sure that both versions of all relevant libraries were\n *   installed). But we require such a host to decide whether it is\n *   x86_64 or x86_32, and stick with it. You can't load a combination\n *   of packages from each and expect them to work together, because\n *   if they contain shared libraries they all need to have the same\n *   architecture.\n *\n *   Basically the punchline is: if you installed the 32-bit version\n *   of Ubuntu, you've got a os.linux.x86_32 system and you will\n *   use exclusively os.linux.x86_32 packages, and likewise\n *   64-bit. They are two parallel universes and which one you're in\n *   is determined by which version of Red Hat or Ubuntu you\n *   installed.\n *\n * os.osx.x86_64\n *   OS X (technically speaking, Darwin) on Intel x86 architecture,\n *   with a kernel capable of loading 64-bit images, and 64-bit builds\n *   of shared libraries available.  If a os.osx.x86_64 package\n *   contains a shared library, it is only required to provide a\n *   64-bit version of the library (it is not required to provide a\n *   fat binary with both 32-bit and 64-bit builds).\n *\n *   Note that in modern Darwin, both the 32 and 64 bit versions of\n *   the kernel can load 64-bit images, and the Apple-supplied shared\n *   libraries are fat binaries that include both 32-bit and 64-bit\n *   builds in a single file. So it is technically fine (but\n *   discouraged) for a os.osx.x86_64 to include a 32-bit\n *   executable, if it only uses the system's shared libraries, but\n *   you'll run into problems if shared libraries from other packages\n *   are used.\n *\n *   There is no os.osx.x86_32. Our experience is that such\n *   hardware is virtually extinct. Meteor has never supported it and\n *   nobody has asked for it.\n *\n * os.windows.x86_64\n *   Once, on the far side of yesterday, there was not a 64-bit\n *   build of Meteor for Windows, due to the belief that Node didn't\n *   take (enough?) advantage of a 64-bit platform.  As time has passed,\n *   and as V8 engine improvements have been bestowed upon it, this is\n *   no longer as clear as it may have once been.  Node.js Foundation\n *   releases 64-bit versions themselves, likely for good reason.\n *   Present-day operation of 64-bit binaries on 64-bit Windows\n *   platforms show clear performance benefits over their 32-bit\n *   siblings (e.g. 7-zip, et.al), so Meteor should also try to offer\n *   that same benefit by building and offering a 64-bit version.\n *   Meteor no longer supports Windows 32-bit.\n *\n * To be (more but far from completely) precise, the ABI for os.*\n * architectures includes a CPU type, a mode in which the code will be\n * run (eg, 64 bit), an executable file format (eg, ELF), a promise to\n * make any shared libraries available in a particular architecture,\n * and promise to set up the shared library search path\n * \"appropriately\". In the future it will also include some guarantees\n * about the directory layout in the environment, eg, location of a\n * directory where temporary files may be freely written. It does not\n * include any syscalls (beyond those used by code that customarily is\n * statically linked into every executable built on a platform, eg,\n * exit(2)). It does not guarantee the presence of any particular\n * shared libraries or programs (including any particular shell or\n * traditional tools like 'grep' or 'find').\n *\n * To model the shared libraries that are required on a system (and\n * the particular versions that are required), and to model\n * dependencies on command-line programs like 'bash' and 'grep', the\n * idea is to have a package named something like 'posix-base' that\n * rolls up a reasonable base environment (including such modern\n * niceties as libopenssl) and is supplied by the container. This\n * allows it to be versioned, unlike architectures, which we hope to\n * avoid versioning.\n *\n * Q: What does \"x86\" mean?\n * A: It refers to the traditional Intel architecture, which\n * originally surfaced in CPUs such as the 8086 and the 80386. Those\n * of us who are older should remember that the last time that Intel\n * used this branding was the 80486, introduced in 1989, and that\n * today, parts that use this architecture bear names like \"Core\",\n * \"Atom\", and \"Phenom\", with no \"86\" it sight. We use it in the\n * architecture name anyway because we don't want to depart too far\n * from Linux's architecture names.\n *\n * Q: Why do we call it \"x86_32\" instead of the customary \"i386\" or\n * \"i686\"?\n * A: We wanted to have one name for 32-bit and one name for 64-bit,\n * rather than several names for each that are virtual synonyms for\n * each (eg, x86_64 vs amd64 vs ia64, i386 vs i686 vs x86). For the\n * moment anyway, we're willing to adopt a \"one size fits all\"\n * attitude to get there (no ability to have separate builds for 80386\n * CPUs that don't support Pentium Pro extensions, for example --\n * you'll have to do runtime detection if you need that). And as long\n * as we have to pick a name, we wanted to pick one that was super\n * clear (it is not obvious to many people that \"i686\" means \"32-bit\n * Intel\", because why should it be?) and didn't imply too close of an\n * equivalence to the precise meanings that other platforms may assign\n * to some of these strings.\n */\n\n// Valid architectures that Meteor officially supports.\nexport const VALID_ARCHITECTURES: Record<string, boolean> = {\n  \"os.osx.x86_64\": true,\n  \"os.linux.x86_64\": true,\n  \"os.windows.x86_64\": true,\n};\n\n// Returns the fully qualified arch of this host -- something like\n// \"os.linux.x86_32\" or \"os.osx.x86_64\". Must be called inside\n// a fiber. Throws an error if it's not a supported architecture.\n//\n// If you change this, also change scripts/admin/launch-meteor\nlet _host: string | null = null; // memoize\n\nexport function host() {\n  if (!_host) {\n    const run = function (...args: Array<string | boolean>) {\n      const result = utils.execFileSync(args[0], args.slice(1)).stdout;\n\n      if (! result) {\n        throw new Error(`Can't get arch with ${args.join(\" \")}?`);\n      }\n\n      return result.replace(/\\s*$/, ''); // trailing whitespace\n    };\n\n    const platform = os.platform();\n\n    if (platform === \"darwin\") {\n      // Can't just test uname -m = x86_64, because Snow Leopard can\n      // return other values.\n      if (run('uname', '-p') !== \"i386\" ||\n          run('sysctl', '-n', 'hw.cpu64bit_capable') !== \"1\") {\n        throw new Error(\"Only 64-bit Intel processors are supported on OS X\");\n      }\n      _host  = \"os.osx.x86_64\";\n    } else if (platform === \"linux\") {\n      const machine = run('uname', '-m');\n      if ([\"x86_64\", \"amd64\", \"ia64\"].includes(machine)) {\n        _host = \"os.linux.x86_64\";\n      } else {\n        throw new Error(`Unsupported architecture: ${machine}`);\n      }\n    } else if (platform === \"win32\" && process.arch === \"x64\") {\n      _host = \"os.windows.x86_64\";\n    } else {\n      throw new Error(`Unsupported operating system: ${platform}`);\n    }\n  }\n\n  return _host;\n}\n\n// In order to springboard to earlier Meteor releases that did not have\n// 64-bit Windows builds, Windows installations must be allowed to\n// download 32-bit builds of meteor-tool.\nexport function acceptableMeteorToolArches(): string[] {\n  if (os.platform() === \"win32\") {\n    switch (utils.architecture()) {\n    case \"x86_32\":\n      return [\"os.windows.x86_32\"];\n    case \"x86_64\":\n      return [\n        \"os.windows.x86_64\",\n        \"os.windows.x86_32\",\n      ];\n    }\n  }\n\n  return [host()];\n}\n\n// 64-bit Windows machines that have been using a 32-bit version of Meteor\n// are eligible to switch to 64-bit beginning with Meteor 1.6, which is\n// the first version of Meteor that contains this code.\nexport function canSwitchTo64Bit(): boolean {\n  // Automatically switching from 32-bit to 64-bit Windows builds is\n  // disabled for the time being, since downloading additional builds of\n  // meteor-tool isn't stable enough at the moment (on Windows, at least)\n  // to introduce in a release candidate.\n  return false &&\n    utils.architecture() === \"x86_64\" &&\n    host() === \"os.windows.x86_32\";\n}\n\n// True if `host` (an architecture name such as 'os.linux.x86_64') can run\n// programs of architecture `program` (which might be something like 'os',\n// 'os.linux', or 'os.linux.x86_64').\n//\n// `host` and `program` are just mnemonics -- `host` does not\n// necessarily have to be a fully qualified architecture name. This\n// function just checks to see if `program` describes a set of\n// environments that is a (non-strict) superset of `host`.\nexport function matches(host: string, program: string): boolean {\n  return host.substr(0, program.length) === program &&\n    (host.length === program.length ||\n     host.substr(program.length, 1) === \".\");\n}\n\nconst legacyArches = [\n  \"web.browser.legacy\",\n  // It's important to include web.browser.legacy resources in the Cordova\n  // bundle, since Cordova bundles are built into the mobile application,\n  // rather than being downloaded from a web server at runtime. This means\n  // we can't distinguish between clients at runtime, so we have to use\n  // code that works for all clients.\n  \"web.cordova\",\n];\n\nexport function isLegacyArch(arch: string): boolean {\n  return legacyArches.some(la => matches(arch, la));\n}\n\nexport function mapWhereToArches(where: string) {\n  const arches: string[] = [];\n\n  // Shorthands for common arch prefixes:\n  // \"server\" => os.*\n  // \"client\" => web.*\n  // \"legacy\" => web.browser.legacy, web.cordova\n  if (where === \"server\") {\n    arches.push(\"os\");\n  } else if (where === \"client\") {\n    arches.push(\"web\");\n  } else if (where === \"modern\") {\n    arches.push(\"web.browser\");\n  } else if (where === \"legacy\") {\n    arches.push(...legacyArches);\n  } else {\n    arches.push(where);\n  }\n\n  return arches;\n}\n\n// Like `supports`, but instead taken an array of possible\n// architectures as its second argument. Returns the most specific\n// match, or null if none match. Throws an error if `programs`\n// contains exact duplicates.\nexport function mostSpecificMatch(host: string, programs: string[]): string | null  {\n  let best: string | null = null;\n  const seen: Record<string, boolean> = {};\n\n  programs.forEach((program: string) => {\n    if (seen[program]) {\n      throw new Error(`Duplicate architecture: ${program}`);\n    }\n\n    seen[program] = true;\n\n    if (matches(host, program) && (!best || program.length > best.length)) {\n      best = program;\n    }\n  });\n\n  return best;\n}\n\n// `programs` is a set of architectures (as an array of string, which\n// may contain duplicates). Determine if there exists any architecture\n// that is compatible with all of the architectures in the set. If so,\n// returns the least specific such architecture. Otherwise (the\n// architectures are disjoin) raise an exception.\n//\n// For example, for 'os' and 'os.osx', return 'os.osx'. For 'os' and\n// 'os.linux.x86_64', return 'os.linux.x86_64'. For 'os' and 'browser', throw an\n// exception.\nexport function leastSpecificDescription(programs: string[]): string {\n  if (programs.length === 0) {\n    return '';\n  }\n\n  // Find the longest string\n  const longest = String(max(programs, (p: string) => p.length));\n\n  // If everything else in the list is compatible with the longest,\n  // then it must be the most specific, and if everything is\n  // compatible with the most specific then it must be the least\n  // specific compatible description.\n  programs.forEach((program: string) => {\n    if (!matches(longest, program)) {\n      throw new Error(`Incompatible architectures: '${program}' and '${longest}'`);\n    }\n  });\n\n  return longest;\n}\n\nexport function withoutSpecificOs(arch: string): string {\n  if (arch.substr(0, 3) === 'os.') {\n    return 'os';\n  }\n\n  return arch;\n}\n"],"sourceRoot":"","file":"tools/utils/archinfo.js.map"}