{"version":3,"sources":["/tools/tool-testing/galaxy-utils.js"],"names":["_","require","selftest","Run","testUtils","utils","authClient","auth","runCurl","curl","args","toArray","arguments","GALAXY_USERNAME","process","env","GALAXY_PASSWORD","GALAXY_URL","DEPLOY_HOSTNAME","GALAXY_MOCK_MODE","exports","sanityCheck","markStack","fail","APP_MONGO","loginToGalaxy","sandbox","user","pass","login","curlToGalaxy","url","hostHeader","galaxyOrigin","httpOK","httpRedirect","waitForContainers","waitTime","timeoutScaleFactor","sleepMs","createAndDeployApp","options","settings","appName","randomAppName","templateApp","galaxySettings","fullAppName","useOldSettings","allSettings","Object","assign","settingsFile","write","JSON","stringify","cleanUpApp","loggedInGalaxyAPIConnection","doInteractivePasswordLogin","username","password","galaxyDomain","galaxyUrl","loggedInConnection","renewConnection","conn","connected","close","callGalaxyAPI","call","getAppRecordByName","appRecord","connection","registerStore","update","msg","fields","hostname","_id","id","subscribeAndWait","isEmpty","getAppContainerStatuses","appId","containers","statuses","push","closeGalaxyConnection","logoutCommand","ignoreHttpChecks"],"mappings":"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","sourcesContent":["var _ = require('underscore');\nvar selftest = require('../tool-testing/selftest.js');\nvar Run = selftest.Run;\nvar testUtils = require('../tool-testing/test-utils.js');\nvar utils = require('../utils/utils.js');\nvar authClient = require('../meteor-services/auth-client.js');\nvar auth = require('../meteor-services/auth.js');\n\n// Run curl with the given specifications. Return an instance of Run.\nvar runCurl = function (/*args*/) {\n  var curl = \"/usr/bin/curl\";\n  return new Run(curl, {\n    args: _.toArray(arguments)\n  });\n};\n\n// Some constants.\nvar GALAXY_USERNAME = process.env.GALAXY_USERNAME;\nvar GALAXY_PASSWORD = process.env.GALAXY_PASSWORD;\nvar GALAXY_URL = process.env.DEPLOY_HOSTNAME;\nvar GALAXY_MOCK_MODE = process.env.GALAXY_MOCK_MODE;\n\n// Fail if the test is obviously not set up for using Galaxy.\n//\n// Make sure that we have at least set all of the variables that we need to run\n// against a Galaxy (GALAXY_URL, username & password). An extra safety\n// check to avoid strange errors, deploying/calling random methods on Mother,\n// etc.\nexports.sanityCheck = selftest.markStack(function () {\n  if (! GALAXY_URL ) {\n    selftest.fail(\"Please specify a GALAXY_URL to test against Galaxy.\\n\");\n  }\n  if (! GALAXY_USERNAME ||\n      ! GALAXY_PASSWORD) {\n    selftest.fail(\n      \"Can't use test account with Galaxy. \" +\n       \"Please specify GALAXY_USERNAME and GALAXY_PASSWORD.\\n\");\n  }\n  if (! process.env.APP_MONGO) {\n    selftest.fail(\n      \"Please provide an APP_MONGO url to use for deployed apps.\\n\");\n   }\n});\n\n// Login to Galaxy with environment-variable credentials passed in by the user.\n//\n// Unlike the normal `meteor deploy` Galaxy is not yet publically available, so\n// we don't want to use the publically-accessible test account here.\nexports.loginToGalaxy = selftest.markStack(function (sandbox) {\n  var user = GALAXY_USERNAME;\n  var pass = GALAXY_PASSWORD;\n  testUtils.login(sandbox, user, pass);\n});\n\n// Curl an app running on Galaxy. Automatically follow redirects.\n//\n// Dealing with DNS on Galaxy can be complicated. The standard way to ensure\n// that we hit the right app on the right Galaxy is to curl the galaxy origin,\n// with the host header set to our query app.\nexports.curlToGalaxy = selftest.markStack(function (url) {\n  var hostHeader = \"host: \" + url;\n  var galaxyOrigin = GALAXY_URL;\n  return runCurl(\"-vLH\", hostHeader, galaxyOrigin);\n});\n\n// String we expect to hit on 200 OK.\nexports.httpOK = \"HTTP/1.1 200 OK\";\n\n// String we expect to hit when using SSL.\nexports.httpRedirect = \"HTTP/1.1 307 Temporary Redirect\";\n\n// We expect containers to take some time to startup.\n//\n// In the future, we can use this function to poll whether the containers have\n// started and maybe our tests will be faster.\nexports.waitForContainers = selftest.markStack(function () {\n  // We are not spinning up any containers in mock mode, so don't wait too long.\n  var waitTime = GALAXY_MOCK_MODE ? 1000 : 1000 * 10 * utils.timeoutScaleFactor;\n  utils.sleepMs(waitTime);\n});\n\n// Deploy an app against a Galaxy\n//\n// When we deploy to Galaxy, we need to specify a Mongo URL and wait a little\n// longer for the app to spin up.\n//\n// Options:\n//   - settings: app settings, NOT including mandatory galaxy settings\n//     such as MONGO_URL\n//   - appName: app name to use; will be generated randomly if not\n//     provided\n//   - templateApp: the name of the template app to use. defaults to\n//    'simple-app'\n//   - useOldSettings: don't make a new settings object this app! This is a\n//     redeploy, so reuse the settings that Galaxy has saved.\n//\nexports.createAndDeployApp =  selftest.markStack(function (sandbox, options) {\n  options = options || {};\n  var settings = options.settings;\n  var appName = options.appName || testUtils.randomAppName();\n\n  // The simple app contains standart app packages and some small bits of code\n  // so that we can check that it is being served correctly. Let's use that as\n  // our default.\n  var templateApp = options.templateApp || 'simple-app';\n\n  // Create the new galaxy settings.\n  var galaxySettings = {\n    \"galaxy.meteor.com\" : {\n      env: {\n        // XXX: Right now, all the galaxy test apps use the same mongo. This is\n        // actually kind of super awkward... but generating and destroying new DBs\n        // seems like it is introducing a bit too much complexity at this stage.\n        \"MONGO_URL\": process.env.APP_MONGO\n      }\n    }\n  };\n\n  var fullAppName;\n  if (! options.useOldSettings) {\n    // Add all the settings together and write them out. Let user settings\n    // override ours.\n    var allSettings = Object.assign(galaxySettings, settings);\n    var settingsFile = \"settings-\" + appName + \".json\";\n    sandbox.write(settingsFile, JSON.stringify(allSettings));\n\n    fullAppName = testUtils.createAndDeployApp(sandbox, {\n      settingsFile: \"../\" + settingsFile,\n      appName: appName,\n      templateApp: templateApp\n    });\n  } else {\n    fullAppName = testUtils.createAndDeployApp(sandbox, {\n      appName: appName,\n      templateApp: templateApp\n    });\n  }\n\n  // Galaxy might take a while to spin up an app.\n  exports.waitForContainers();\n\n  return fullAppName;\n\n});\n\n// Cleanup the app by deleting it from Galaxy.\n//\n// XXX: We should also clean out its Mongo, but we don't, since, currently, none\n// of our apps actually put any records into it.\nexports.cleanUpApp = selftest.markStack(function (sandbox, appName) {\n  testUtils.cleanUpApp(sandbox, appName);\n\n  // Galaxy might take a while to spin up an app, though it should be fairly\n  // quick.\n  exports.waitForContainers();\n});\n\n//////////////////////////////////////////////////////////////////////////////\n//  We want to test some of the server-side functionality that doesn't actually\n//  have a command-line API right now. Below functionas are going to use the\n//  tool's ability to make a DDP client and connect to the server to call\n//  methods directly.\n////////////////////////////////////////////////////////////////////////////////\n\n// Returns a logged in connection to GalaxyAPI\nexports.loggedInGalaxyAPIConnection = selftest.markStack(function () {\n  // The credentials of the user might not be the credentials of the galaxytester.\n  auth.doInteractivePasswordLogin({\n    username: GALAXY_USERNAME,\n    password: GALAXY_PASSWORD\n  });\n  var galaxyDomain = GALAXY_URL;\n  var galaxyUrl = (GALAXY_MOCK_MODE ? \"http://\" : \"https://\") + galaxyDomain;\n  return authClient.loggedInConnection(\n    galaxyUrl,\n    galaxyDomain,\n    \"galaxy-api\"\n  );\n});\n\n// If the connection has disconnected, close it and open a new one. (workaround\n// for the fact that connections in the tool do not reconnect)\nexports.renewConnection = selftest.markStack(function (conn) {\n  if (!conn.connected) {\n    conn.close();\n    conn = exports.loggedInGalaxyAPIConnection();\n  }\n  return conn;\n});\n\n// Given a connection, makes a call to Galaxy API.\nexports.callGalaxyAPI = function (conn, ...args) {\n  conn = exports.renewConnection(conn);\n  return conn.call(...args);\n};\n\n// Gets app record from Galaxy API by name.\n//\n// This method will create and manage its own connection.\nexports.getAppRecordByName = selftest.markStack(function (appName) {\n  var conn = exports.loggedInGalaxyAPIConnection();\n  var appRecord = {};\n  conn.connection.registerStore('app', {\n    update: function (msg) {\n      if (msg.msg === 'added' && msg.fields &&\n          msg.fields.hostname === appName) {\n        appRecord = Object.assign({ _id: msg.id }, msg.fields);\n      }\n    }\n  });\n  conn.subscribeAndWait(\"/app\", appName);\n  // If we can't find the app, fail the test right now.\n  if (_.isEmpty(appRecord)) {\n    selftest.fail(\"Cannot find app: \", appName);\n  }\n  conn.close();\n  return appRecord;\n});\n\n\n// Get container statuses for the given app ID.\n//\n// This method will create and manage its own connection.\nexports.getAppContainerStatuses = selftest.markStack(function (appId, appName) {\n  var conn = exports.loggedInGalaxyAPIConnection();\n\n  var containers = [];\n  var statuses = \"/app/containerStatuses\";\n  conn.connection.registerStore(statuses, {\n    update: function (msg) {\n      if (msg.msg === 'added' && msg.fields &&\n          msg.fields.appId === appId) {\n        containers.push(Object.assign({ _id: msg.id }, msg.fields));\n      }\n    }\n  });\n  conn.subscribeAndWait(statuses, appName);\n  conn.close();\n  return containers;\n});\n\n// Close and logout.\nexports.closeGalaxyConnection = selftest.markStack(function (conn) {\n  auth.logoutCommand();\n  conn.close();\n});\n\n\n// Ignore HTTP checks in mock mode\nexports.ignoreHttpChecks = selftest.markStack(function () {\n  return !! GALAXY_MOCK_MODE;\n});\n"],"file":"tools/tool-testing/galaxy-utils.js.map"}