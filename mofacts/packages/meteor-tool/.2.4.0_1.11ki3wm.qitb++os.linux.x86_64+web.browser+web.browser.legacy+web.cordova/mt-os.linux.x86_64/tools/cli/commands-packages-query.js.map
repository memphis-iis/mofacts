{"version":3,"sources":["/tools/cli/commands-packages-query.js"],"names":["loadIsopackage","module","link","v","_","require","buildmessage","catalog","Console","files","main","packageVersionParser","projectContextModule","utils","catalogUtils","compiler","DEFAULT_MAX_AGE_MS","MAX_RECENT_VERSIONS","getReleaseVersionPublishedOn","versionRecord","published","Date","toolPackage","tool","split","toolName","toolVersion","toolRecord","official","getVersion","formatHiddenVersions","hiddenVersions","oldestShownVersion","reasons","lastUnmigrated","push","lastPreRelease","lessThan","oldestVersion","length","slice","join","last","formatEJSON","data","EJSON","stringify","indent","padLongformDate","dateStr","numSpaces","maxDateLength","Array","getTempContext","options","projectContext","appDir","ProjectContext","projectDir","currentPackageDir","packageDir","tempProjectDir","mkdtemp","explicitlyAddedLocalPackageDirs","captureAndExit","initializeCatalog","itemNotFound","item","error","explainIfRefreshFailed","BasePkgDatum","self","Object","assign","prototype","_checkInitialized","Error","isEmpty","getObject","getConsoleStr","PkgExports","pkgExports","map","exp","arches","architectures","indexOf","without","sort","name","sortBy","strExports","ALL_ARCHES","noWrap","PkgImplies","pkgDeps","each","ref","references","r","implied","archName","arch","strImplies","PkgDependencies","omit","dep","depName","weak","every","constraint","strDeps","depString","PackageQuery","metaRecord","localCatalog","showArchitecturesOS","showDependencies","showHiddenVersions","version","_getVersionRecord","local","_getLocalVersion","_getOfficialVersion","_collectPackageData","getLatestVersion","print","ejson","rawInfo","_generateVersionObject","_generatePackageObject","_displayVersion","_displayPackage","maintainers","pluck","homepage","serverVersionRecords","getSortedVersionRecords","totalVersions","filteredVersionRecords","filter","vr","unmigrated","localVersion","summary","description","git","implies","exports","deprecated","deprecatedMessage","mainlineRecord","getLatestMainlineVersion","dependencies","longDescription","versions","publishedBy","username","publishedOn","allBuilds","getAllBuilds","build","archOS","buildArchitectures","tropohouse","installed","packageName","e","printError","localRecord","packageSource","getPackageSource","sourceRoot","getExports","versionExplicitlyProvided","readmeInfo","processReadme","excerpt","info","bulletPoint","directory","path","warn","url","publisher","pubDate","longformDate","command","versionFields","processedData","forEach","key","pick","defaultVersion","displayName","printDescription","versionRows","versionsHeader","publishDate","paddedDate","printTwoColumns","ignoreWidth","hiddenVersionsPluralizer","toUpperCase","allVersionsPluralizer","packageFields","ReleaseQuery","_getVersionDetails","_getReleaseData","fields","_displayRelease","getReleaseVersion","track","recommended","orderKey","packages","getDefaultReleaseVersionRecord","getReleaseVersionRecords","getSortedRecommendedReleaseRecords","reverse","getNumReleaseVersions","isRecommended","_displayAllReleaseVersions","rows","versionsPluralizer","versionsHidden","columnOpts","versionsDivided","groupBy","has","experimentalVersions","versionsWithKey","registerCommand","pretty","minArgs","maxArgs","usesPackage","type","Boolean","catalogRefresh","Refresh","OnceAtStart","maxAge","ignoreErrors","fullName","args","splitArgs","process","exit","currentVersion","getVersionBySourceRoot","query","packageRecord","getPackage","releaseRecord","getReleaseTrack","maintainer","String","allPackages","union","getAllPackageNames","allReleases","getAllReleaseTracks","matchingPackages","matchingReleases","selector","pattern","search","RegExp","err","filterBroken","match","isRelease","projectCatalog","debugOnly","prodOnly","testOnly","record","findWhere","enterJob","title","pack","latestVersion","lastUpdated","ret","releases","output","isEqual","printPackageList"],"mappings":"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","sourcesContent":["// These commands deal with aggregating local package data with the information\n// contained in the Meteor Package Server. They also deal with presenting this\n// to the user in various human or machine-readable ways.\nvar _ = require('underscore');\nvar buildmessage = require('../utils/buildmessage.js');\nvar catalog = require('../packaging/catalog/catalog.js');\nvar Console = require('../console/console.js').Console;\nvar files = require('../fs/files');\nimport { loadIsopackage } from '../tool-env/isopackets.js';\nvar main = require('./main.js');\nvar packageVersionParser = require('../packaging/package-version-parser.js');\nvar projectContextModule = require('../project-context.js');\nvar utils = require('../utils/utils.js');\nvar catalogUtils = require('../packaging/catalog/catalog-utils.js');\nvar compiler = require('../isobuild/compiler.js');\n\n// We want these queries to be relatively fast, so we will only refresh the\n// catalog if it is > 15 minutes old\nvar DEFAULT_MAX_AGE_MS = 15 * 60 * 1000;\n\n// Maximum number of recent versions of a package or a release that we should\n// return to the user, unless a more complete mode is requested.\nvar MAX_RECENT_VERSIONS = 5;\n\n// XXX: Remove this if/when we do a Troposphere migration to backfill release\n// version publication times.\n// Estimate the publication date for a release. Since we have failed to keep\n// track of publication times of release versions in the past, we will try to\n// guess that the release was published at the same time as the tool.\nvar getReleaseVersionPublishedOn = function (versionRecord) {\n  if (versionRecord.published) {\n    return new Date(versionRecord.published);\n  }\n  // We don't know when the release was published. Luckily, since there is no\n  // way to use the tool outside of a release, and we always change the tool\n  // between releases, it is a good bet that the release was published on the\n  // same day as the tool.\n  var toolPackage = versionRecord.tool.split('@');\n  var toolName = toolPackage[0];\n  var toolVersion = toolPackage[1];\n  var toolRecord = catalog.official.getVersion(toolName, toolVersion);\n  if (! toolRecord || ! toolRecord.published) {\n    return null;\n  }\n  return new Date(toolRecord.published);\n};\n\n// Processes information about the versions that we hid. Returns a brief\n// human-friendly string listing the reasons why some versions of the package\n// were not shown.\nvar formatHiddenVersions = function (hiddenVersions, oldestShownVersion) {\n  // An array of strings, listing the reasons why some versions were hidden.\n  var reasons = [];\n  // Use our information about hidden versions to figure what reasons we\n  // actually want to return to the user.\n  if (! oldestShownVersion) {\n    // We did not show any versions, so presumably all existing versions of\n    // this package are either unmigrated or pre-release versions.\n    if (hiddenVersions.lastUnmigrated) {\n      reasons.push(\"unmigrated\");\n    }\n    if (hiddenVersions.lastPreRelease) {\n      reasons.push(\"pre-release\");\n    }\n  } else {\n    // If the oldest version on record is older than the oldest shown\n    // version, then it was hidden due to MAX_RECENT_VERSION number. (It\n    // might also be hidden because it is a pre-release or unmigrated, but\n    // age takes priority).\n    if (packageVersionParser.lessThan(\n        hiddenVersions.oldestVersion, oldestShownVersion)) {\n      reasons.push(\"older\");\n    }\n\n    // If the latest unmigrated/pre-release version is older than the oldest\n    // version that we are showing, then we don't care about it. If it is\n    // younger, we need to tell the user.\n    //\n    // It is certainly possible that, even though a pre-release version is older\n    // than the oldest version that we are showing, but under the limit for the\n    // MAX_RECENT_VERSIONS. So, in that case, we are eliding that version\n    // because it is a pre-release, not because of age. It is still,\n    // technically, an 'older' version though, and that explanation is more\n    // intuitive.\n    if (hiddenVersions.lastPreRelease &&\n        packageVersionParser.lessThan(\n          oldestShownVersion, hiddenVersions.lastPreRelease)) {\n      reasons.push(\"pre-release\");\n    }\n    if (hiddenVersions.lastUnmigrated &&\n        packageVersionParser.lessThan(\n          oldestShownVersion, hiddenVersions.lastUnmigrated)) {\n      reasons.push(\"unmigrated\");\n    }\n  }\n\n  // Now, we will aggregate the reasons into a human-readable string.\n  if (reasons.length === 1) {\n    return reasons[0];\n  } else if (reasons.length === 2) {\n    // There is no oxford comma if only listing two objects\n    return reasons[0] + \" and \" + reasons[1];\n  } else if (reasons.length > 2)  {\n    return reasons.slice(0, -1).join(\", \") + \", and \" + _.last(reasons);\n  } else {\n    // Did we not figure out anything to write? Did something else go wrong?\n    // This should never happen, but if it does, recover by omitting\n    // information.\n    return \"Some\";\n  }\n};\n\n// Converts an object to an EJSON string with the right spacing.\nfunction formatEJSON(data) {\n  const { EJSON } = loadIsopackage('ejson');\n  return EJSON.stringify(data, { indent: true }) + \"\\n\";\n}\n\n// Takes in a string and pads it with whitespace to the length of the longest\n// possible date string.\nvar padLongformDate = function (dateStr) {\n  var numSpaces = utils.maxDateLength - dateStr.length;\n  return dateStr + Array(numSpaces + 1).join(' ');\n};\n\n// In order to get access to local package data, we need to create a local\n// package catalog. The best way to do that is to create a temporary\n// ProjectContext and let it handle catalog initialization. When we do, we need\n// to make sure that it is aware of all the local packages that we might care\n// about.\n//\n// This function returns such a ProjectContext, and takes in the following\n// options:\n//  - appDir: If we are running in the context of an app, this will contain the\n//    root of the app. We want to make sure to grab the data from the app's\n//    local packages.\n//  - packageDir: If we are running in a package directory, this will contain\n//    the source root of that package. If we are running from inside a package,\n//    we want that package to show up in our results.\nvar getTempContext = function (options) {\n  var projectContext;\n  // If we are running in an app, we will use it to create a\n  // (mostly immutable) projectContext.\n  if (options.appDir) {\n    projectContext = new projectContextModule.ProjectContext({\n      projectDir: options.appDir\n    });\n  } else {\n    // We're not in an app, so we will create a temporary app and use it to load\n    // the local catalog. If a local packageDir exists, include it manually.\n    var currentPackageDir = options.packageDir ? [options.packageDir] : [];\n    var tempProjectDir = files.mkdtemp('meteor-show');\n    projectContext = new projectContextModule.ProjectContext({\n      projectDir: tempProjectDir,\n      explicitlyAddedLocalPackageDirs: currentPackageDir\n    });\n  }\n\n  // It is possible that we can't process package.js files in our local packages\n  // and have to exit early. This is unfortunate, but we can't search local\n  // packages if we can't read them. If this turns out to be a frequent problem,\n  // we can give a warning, instead of failing in the future. For now, we want\n  // to err on the side of consistency.\n  main.captureAndExit(\"=> Errors while reading local packages:\", function () {\n    projectContext.initializeCatalog();\n  });\n  return projectContext;\n};\n\n// Print an error message if the user asks about an unknown item.\nvar itemNotFound = function (item) {\n  Console.error(item + \": not found\");\n  catalogUtils.explainIfRefreshFailed();\n  return 1;\n};\n\n// This is a base class for storing package fields that require some processing\n// to store and display correctly.\n//\n// Do NOT initialize this class by itself -- use one of the classes that\n// inherits from it.\nvar BasePkgDatum = function () {\n  var self = this;\n  self.data = null;\n};\nObject.assign(BasePkgDatum.prototype, {\n  // Throws if data has not been initialized.\n  _checkInitialized: function () {\n    var self = this;\n    if (self.data === null) {\n      throw new Error(\"do not use the BasePkgDatum class by itself\");\n    }\n  },\n  // Returns true if this class does not contain any exports.\n  isEmpty : function () {\n    var self = this;\n    self._checkInitialized();\n    return _.isEmpty(self.data);\n  },\n  // Get exports as a raw object.\n  getObject : function () {\n    var self = this;\n    self._checkInitialized();\n    return self.data;\n  },\n  getConsoleStr : function () {\n    var self = this;\n    self._checkInitialized();\n    return \"\";\n  }\n});\n\n// This class stores exports from a given package.\n//\n// Stores exports for a given package and returns them to the caller in a given\n// format. Takes in the raw exports from the package.\nvar PkgExports = function (pkgExports) {\n var self = this;\n // Process and save the export data.\n self.data = _.map(pkgExports, function (exp) {\n    var arches = exp.architectures;\n    // Replace 'os' (what we store) with 'server' (what you would put in a\n    // package.js file). That's more user friendly, and avoids confusing this\n    // with different OS arches used in binary packages.\n    if ( arches.indexOf(\"os\") !== -1) {\n      arches = _.without(arches, \"os\");\n      arches.push(\"server\");\n    }\n    // Sort architectures alphabetically.\n    arches.sort();\n    return { name: exp.name, architectures: arches };\n  });\n  // Sort exports alphabetically by name.\n  self.data =  _.sortBy(self.data, \"name\");\n};\n// Extend BasePkgDatum.\nPkgExports.prototype = new BasePkgDatum();\n\nObject.assign(PkgExports.prototype, {\n  // Convert package exports into a pretty, Console non-wrappable string. If an\n  // export is only declared for certain architectures, mentions those\n  // architectures in a user-friendly format.\n  getConsoleStr: function () {\n    var self = this;\n    var strExports = _.map(self.data, function (exp) {\n      // If this export is valid for all architectures, don't specify\n      // architectures here.\n      if (exp.architectures.length === compiler.ALL_ARCHES.length) {\n        return exp.name;\n      }\n\n      // Don't split descriptions of individual pkgExports between lines.\n      return Console.noWrap(\n        exp.name + \" (\" + exp.architectures.join(\", \") + \")\");\n    });\n    return strExports.join(\", \");\n  }\n});\n\n// This class stores implies from a given package.\n//\n// Stores implies for a given package and returns them to the caller in a given\n// format. Takes in the dependencies from the package.\nvar PkgImplies = function (pkgDeps) {\n  var self = this;\n  self.data = [];\n  // Go through all the package dependencies. If a dependency has any implied\n  // references, add it to the list.\n  _.each(pkgDeps, function (ref, name) {\n    var architectures = [];\n    // We want to select the references that are implied (instead of just used)\n    // and save their architectures. Also, we want to replace 'os' with\n    // 'server', as with exports.\n    _.each(ref.references, function (r) {\n      if (! r.implied) {\n        return;\n      }\n      var archName = (r.arch === \"os\") ? \"server\" : r.arch;\n      architectures.push(archName);\n    });\n    // Sort architecures alphabetically.\n    architectures.sort();\n    if (! _.isEmpty(architectures)) {\n      self.data.push({ name: name, architectures: architectures });\n    }\n  });\n  // Sort by name.\n  self.data =  _.sortBy(self.data, \"name\");\n};\n\n// Extend BasePkgDatum.\nPkgImplies.prototype = new BasePkgDatum();\n\nObject.assign(PkgImplies.prototype, {\n  // Convert package exports into a pretty, Console non-wrappable string. If an\n  // export is only declared for certain architectures, mentions those\n  // architectures in a user-friendly format.\n  getConsoleStr: function () {\n    var self = this;\n    var strImplies = _.map(self.data, function (ref) {\n      // If an imply is valid for all architectures, don't specify it here.\n      if (ref[\"architectures\"].length === compiler.ALL_ARCHES.length) {\n        return ref.name;\n      }\n\n      // Don't split descriptions of individual implies between lines.\n      return Console.noWrap(\n        ref.name + \" (\" + ref.architectures.join(\", \") + \")\");\n    });\n    return strImplies.join(\", \");\n  }\n});\n\n// This class stores dependencies from a given package.\n//\n// Stores dependencies for a given package and returns them to the caller in a given\n// format. Takes in the raw dependencies from the package record.\nvar PkgDependencies = function (pkgDeps) {\n  var self = this;\n  self.data = _.map(\n    // The dependency on 'meteor' was almost certainly added automatically, by\n    // Isobuild. Returning this to the user will only cause confusion.\n    _.omit(pkgDeps, \"meteor\"),\n    function (dep, depName) {\n      // We will only consider this a weak dependency if all of its references\n      // are marked as weak.\n      var weak = _.every(dep.references, function (ref) {\n        return !! ref.weak;\n      });\n      return {\n        name: depName,\n        constraint: dep.constraint,\n        weak: weak\n      };\n  });\n  // Sort by name.\n  self.data =  _.sortBy(self.data, \"name\");\n};\n\n// Extend BasePkgDatum.\nPkgDependencies.prototype = new BasePkgDatum();\n\nObject.assign(PkgDependencies.prototype, {\n  // Convert package exports into a pretty, Console non-wrappable string. If an\n  // export is only declared for certain architectures, mentions those\n  // architectures in a user-friendly format.\n  getConsoleStr: function () {\n    var self = this;\n    var strDeps = _.map(self.data, function (dep) {\n      var depString = dep.name;\n      if (dep.constraint && dep.constraint !== null) {\n        depString += \"@\" + dep.constraint;\n      }\n      if (dep.weak) {\n        depString += \" (weak dependency)\";\n      }\n      return Console.noWrap(depString);\n    });\n    return strDeps.join(\"\\n\");\n  }\n});\n\n\n// The two classes below collect and print relevant information about Meteor\n// packages and Meteor releases, respectively. Specifically, they query the\n// official catalog and, if applicable, relevant local sources. They also handle\n// the details of printing their data to the screen.\n//\n// A query class has:\n//  - data: an object representing the data it has collected in response to the\n//  - query.\n//  - a print method, that take options as an argument and prints the results to\n//    the terminal.\n\n\n// This class deals with information related to packages. To deal with local\n// packages, it has to interact with the projectContext.\n//\n// The constructor takes in the following options:\n//   - metaRecord: (mandatory) the meta-record for this package from the Packages\n//     collection.\n//   - projectContext: (mandatory) a projectContext that we can use to look up\n//     information on local packages.\n//   - version: query for a specific version of this package.\n//   - showArchitecturesOS: collect and process data on OS\n//     architectures that are available for different versions of this package.\n//   - showHiddenVersions: return information about all the versions of the\n//     package, including pre-releases and unmigrated versions.\n//   - showDependencies: return information about\n//     versions' dependencies.\nvar PackageQuery = function (options) {\n  var self = this;\n\n  // This is the record in the packages collection. It contains things like\n  // maintainers, and the package homepage.\n  self.metaRecord = options.metaRecord;\n  self.name = options.metaRecord.name;\n\n  // This argument is required -- we use it to look up data. If it has not been\n  // passed in, fail early.\n  if (! options.projectContext) {\n    throw Error(\"Missing required argument: projectContext\");\n  }\n  self.projectContext = options.projectContext;\n  self.localCatalog = options.projectContext.localCatalog;\n\n  // Processing per-version availability architectures & dependencies is\n  // expensive, so we don't do it unless we are asked to.\n  self.showArchitecturesOS = options.showArchitecturesOS;\n  self.showDependencies = options.showDependencies;\n\n  // We don't want to show pre-releases and un-migrated versions to the user\n  // unless they explicitly ask us about it.\n  self.showHiddenVersions = options.showHiddenVersions;\n\n  // Collect the data for this package, including looking up any specific\n  // package version that we care about.\n  if (options.version) {\n    var versionRecord = self._getVersionRecord(options.version);\n    if (! versionRecord) {\n      self.data = null;\n      return;\n    }\n    self.data = versionRecord.local ?\n      self._getLocalVersion(versionRecord) :\n      self._getOfficialVersion(versionRecord);\n  } else {\n    self.data = self._collectPackageData();\n  }\n};\n\nObject.assign(PackageQuery.prototype, {\n  // Find and return a version record for a given version. Mark the version\n  // record as local, if it is a local version of the package.\n  _getVersionRecord: function (version) {\n    var self = this;\n\n    // We allow local version to override remote versions in meteor show, so we\n    // should start by checking if this is a local version first.\n    var versionRecord = self.localCatalog.getLatestVersion(self.name);\n\n    // If we asked for \"local\" as the version number, and found any local version\n    // at all, we are done.\n    if (version === \"local\") {\n      return versionRecord && Object.assign(versionRecord, { local: true });\n    }\n\n    // We have a local record, and its version matches the version that we asked\n    // for, so we are done.\n    if (versionRecord && (versionRecord.version === version)) {\n      return Object.assign(versionRecord, { local: true });\n    }\n\n    // If we haven't found a local record, or if the local record that we found\n    // doesn't match the version that we asked for, then we have to go look in\n    // the server catalog.\n    versionRecord = catalog.official.getVersion(self.name, version);\n    return versionRecord;\n  },\n  // Print the query information to screen.\n  //\n  // options:\n  //   - ejson: Don't pretty-print the data. Print a machine-readable ejson\n  //     object.\n  print: function (options) {\n    var self = this;\n\n    // If we are asking for an EJSON-style output, we will only print out the\n    // relevant fields.\n    if (options.ejson) {\n      Console.rawInfo(formatEJSON(\n        self.data.version ?\n          self._generateVersionObject(self.data) :\n          self._generatePackageObject(self.data)));\n      return;\n    }\n\n    // Otherwise, display the information that we have. If we were asking about\n    // a specific version, display that. Otherwise, display package metadata in\n    // general.\n    if (self.data.version) {\n      self._displayVersion(self.data);\n      return;\n    }\n    self._displayPackage(self.data);\n  },\n  // Aggregates data about the package as a whole. Returns an object with the\n  // following keys:\n  //\n  // - name: package name\n  // - maintainers: an array of usernames of maintainers\n  // - homepage: string homepage\n  // - totalVersions: total number of versions that this package has, including\n  //   local and hidden versions.\n  // - defaultVersion: a default version: use this version to look up\n  //   per-version information that is relevant to the package as a whole, such\n  //   as git, description,etc.\n  // - versions: an array of objects representing versions of this package.\n  _collectPackageData: function () {\n    var self = this;\n    var data = {\n      name: self.metaRecord.name,\n      maintainers: _.pluck(self.metaRecord.maintainers, \"username\"),\n      homepage: self.metaRecord.homepage\n    };\n\n    // Collect surface information about available versions, starting with the\n    // versions available on the server.\n    var serverVersionRecords =\n          catalog.official.getSortedVersionRecords(self.name);\n    var totalVersions = serverVersionRecords.length;\n\n    // If we are not going to show hidden versions, then we shouldn't waste time\n    // on them. Trim the serverVersionRecords array to only have the top\n    // MAX_RECENT_VERSIONS migrated, official versions.\n    if (! self.showHiddenVersions) {\n      // We might have to hide some versions from the user. We want to explain\n      // why we hid them. Here is how we are going to explain things -- any\n      // versions older than the oldest version that we show, are hidden because\n      // of age. If, in the covered time period, there are\n      // unmigrated/pre-release versions, then we will mention those  as well.\n      //\n      // Specifically, while we filter versions, we are going to memorize the\n      // most recent version hidden for a specific reason.\n      var lastUnmigrated = \"\";\n      var lastPreRelease = \"\";\n      var oldestVersion =\n        serverVersionRecords[0] && serverVersionRecords[0].version;\n      var filteredVersionRecords =\n        _.filter(serverVersionRecords, function (vr) {\n          if (vr.unmigrated) {\n            lastUnmigrated = vr.version;\n            return false;\n          }\n\n          if (vr.version.indexOf(\"-\") !== -1) {\n            lastPreRelease = vr.version;\n            return false;\n          }\n          return true;\n        });\n     serverVersionRecords = _.last(filteredVersionRecords, MAX_RECENT_VERSIONS);\n     data[\"hiddenVersions\"] = {\n       oldestVersion: oldestVersion,\n       lastUnmigrated: lastUnmigrated,\n       lastPreRelease: lastPreRelease\n     };\n    };\n\n    // Process the catalog records into our preferred format, and look up any\n    // other per-version information that we might need.\n    data[\"versions\"] = _.map(serverVersionRecords, function (versionRecord) {\n      return self._getOfficialVersion(versionRecord);\n    });\n\n    // The local version doesn't count against the version limit. Look up relevant\n    // information about the local version.\n    var localVersion = self.localCatalog.getLatestVersion(self.name);\n    var local;\n    if (localVersion) {\n      local = self._getLocalVersion(localVersion);\n      data[\"versions\"].push(local);\n      totalVersions++;\n    }\n\n    // Record the total number of versions, including the ones we hid from the\n    // user.\n    data[\"totalVersions\"] = totalVersions;\n\n    // Some per-version information gets displayed with the rest of the package\n    // information.  We want to use the right version for that. (We don't want\n    // to display data from unofficial or un-migrated versions just because they\n    // are recent.)\n    if (local) {\n      data[\"defaultVersion\"] = {\n        version: \"local\",\n        summary: local.summary,\n        description: local.description,\n        git: local.git,\n        implies: local.implies,\n        exports: local.exports,\n        deprecated: local.deprecated,\n        deprecatedMessage: local.deprecatedMessage\n      };\n    } else {\n      var mainlineRecord = catalog.official.getLatestMainlineVersion(self.name);\n      if (mainlineRecord) {\n        var pkgExports = new PkgExports(mainlineRecord.exports);\n        var implies = new PkgImplies(mainlineRecord.dependencies);\n        data[\"defaultVersion\"] = {\n          version: mainlineRecord.version,\n          summary: mainlineRecord.description,\n          description: mainlineRecord.longDescription,\n          git: mainlineRecord.git,\n          exports: pkgExports,\n          implies: implies,\n          deprecated: mainlineRecord.deprecated,\n          deprecatedMessage: mainlineRecord.deprecatedMessage\n        };\n      } else {\n        data[\"defaultVersion\"] = _.last(data.versions);\n      }\n    }\n    return data;\n  },\n  // Takes in a version record from the official catalog and looks up extra\n  // information that's relevant to this PackageQuery.\n  //\n  // - name: package Name\n  // - version: package version\n  // - summary: version summary/short description (from Package.describe)\n  // - description: long-form description (from the README.md)\n  // - publishedBy: username of the publisher\n  // - publishedOn: date of publication\n  // - git: git URL for this version\n  // - installed: true if the package exists in warehouse, and is therefore\n  //   available for use offline.\n  // - architectures: (optional) if self.showArchitecturesOS is true, returns an\n  //   array of system architectures for which that package is available.\n  // - dependencies: (optional) if self.showDependencies is true, return an\n  //   array of objects denoting that package's dependencies. The objects have\n  //   the following keys:\n  //     - packageName: name of the dependency\n  //     - constraint: constraint for that dependency\n  //     - weak: true if this is a weak dependency.\n  _getOfficialVersion: function (versionRecord) {\n    var self = this;\n    var version = versionRecord.version;\n    var name = self.name;\n    var data = {\n      name: name,\n      version: version,\n      summary: versionRecord.description,\n      description: versionRecord.longDescription,\n      publishedBy:\n      versionRecord.publishedBy && versionRecord.publishedBy.username,\n      publishedOn: new Date(versionRecord.published),\n      git: versionRecord.git,\n      exports: versionRecord.exports,\n      deprecated: versionRecord.deprecated,\n      deprecatedMessage: versionRecord.deprecatedMessage\n    };\n\n    // Get the export and imply data, if the record has any.\n    data[\"exports\"] = new PkgExports(versionRecord.exports);\n    data[\"implies\"] = new PkgImplies(versionRecord.dependencies);\n\n    // Processing and formatting architectures takes time, so we don't want to\n    // do this if we don't have to.\n    if (self.showArchitecturesOS) {\n      var allBuilds = catalog.official.getAllBuilds(self.name, version);\n      var architectures = _.map(allBuilds, function (build) {\n        if (! build['buildArchitectures']) {\n          return \"unknown\";\n        }\n        var archOS =\n          _.filter(build.buildArchitectures.split('+'), function (arch) {\n             return ( arch !== \"web.browser\" ) && ( arch !== \"web.cordova\" );\n        });\n        // At this point, you can only have OS arch at a time per-build.\n        return archOS[0];\n      });\n      data[\"architecturesOS\"] = architectures;\n    }\n\n    // Processing and formatting dependencies also takes time, so we would\n    // rather not do it if we don't have to.\n    if (self.showDependencies) {\n      data[\"dependencies\"] = new PkgDependencies(versionRecord.dependencies);\n    }\n\n    // We want to figure out if we have already downloaded this package, and,\n    // therefore, can use it offline.\n    var tropohouse = self.projectContext.tropohouse;\n    try {\n      data[\"installed\"] = tropohouse.installed({\n        packageName: name,\n        version: version\n      });\n    } catch (e) {\n      // Sometimes, we might be unable to determine if the package is installed\n      // -- maybe we don't have access to the directory, or there is some sort\n      // of disk corruption. This might only extend to one version, so it would\n      // be awkward to fail 'meteor show' altogether. Print an error message (if\n      // it is a permissions error, for example, that's something the user might\n      // want to know), but don't throw.\n      Console.printError(e);\n      data[\"installed\"] = false;\n    }\n    return data;\n  },\n\n  // Takes in a version record from the local catalog and looks up extra\n  // information that's relevant to this PackageQuery. Returns an object with\n  // the following keys.\n  //\n  // - name: package Name\n  // - version: package version\n  // - summary: version summary/short description (from Package.describe)\n  // - description: long-form description (from the README.md)\n  // - git: git URL for this version\n  // - local: always true (denotes that this is a local package).\n  // - directory: source directory of this package.\n  // - dependencies: (optional) if self.showDependencies is true, return an\n  //   array of objects denoting that package's dependencies. The objects have\n  //   the following keys:\n  //     - packageName: name of the dependency\n  //     - constraint: constraint for that dependency\n  //     - weak: true if this is a weak dependency.\n  _getLocalVersion: function (localRecord) {\n    var self = this;\n    var data =  {\n      name: self.name,\n      summary: localRecord.description,\n      git: localRecord.git,\n      local: true,\n      deprecated: localRecord.deprecated,\n      deprecatedMessage: localRecord.deprecatedMessage\n    };\n\n    // Get the source directory.\n    var packageSource = self.localCatalog.getPackageSource(self.name);\n    data[\"directory\"] = packageSource.sourceRoot;\n\n    // Get the exports.\n    data[\"exports\"] = new PkgExports(packageSource.getExports());\n    data[\"implies\"] = new PkgImplies(localRecord.dependencies);\n\n    // If the version was not explicitly set by the user, the catalog backfills\n    // a placeholder version for the constraint solver. We don't want to show\n    // that version to the user.\n    data[\"version\"] = packageSource.versionExplicitlyProvided ?\n      localRecord.version : \"local\";\n\n    // Processing dependencies takes time, and we don't want to do it if we\n    // don't have to.\n    if (self.showDependencies) {\n      data[\"dependencies\"] = new PkgDependencies(localRecord.dependencies);\n    }\n\n    var readmeInfo;\n    main.captureAndExit(\n      \"=> Errors while reading local packages:\",\n      \"reading \" + data[\"directory\"],\n       function () {\n        readmeInfo = packageSource.processReadme();\n    });\n    if (readmeInfo) {\n      data[\"description\"] = readmeInfo.excerpt;\n    }\n    return data;\n  },\n  // Displays version information from this PackageQuery to the terminal in a\n  // human-friendly format. Takes in an object that contains some, but not all,\n  // of the following keys:\n  //\n  // - name: (mandatory) package Name\n  // - version: (mandatory) package version\n  // - summary: version summary/short description (from Package.describe)\n  // - publishedBy: username of the publisher\n  // - publishedOn: date of publication\n  // - description: long-form description (from the README.md)\n  // - git: git URL for this version.\n  // - local: true for a local version of a package.\n  // - directory: source directory of this package.\n  // - installed: true if the package exists in warehouse, and is therefore\n  //   available for use offline.\n  // - architectures: if self.showArchitecturesOS is true, returns an\n  //   array of system architectures for which that package is available.\n  // - exports: a PkgExports object, representing package exports.\n  // - exports: a PkgImplies object, representing package implies.\n  // - dependencies: a PkgDependencies object, representing dependencies.\n  // - deprecated: If the package has been deprecated or not.\n  // - deprecatedMessage: Optional message from the deprecated package for the users.\n  _displayVersion: function (data) {\n    var self = this;\n    Console.info(\n        data.name + \"@\" + data.version,\n        Console.options({ bulletPoint: \"Package: \" }));\n    if (data.directory) {\n      Console.info(\"Directory: \" + Console.path(data.directory));\n    }\n    if (data.deprecated) {\n      Console.error('This package is deprecated!');\n      if (data.deprecatedMessage) {\n        Console.warn(data.deprecatedMessage);\n      }\n    }\n    if (data.exports && ! data.exports.isEmpty()) {\n      Console.info(\n        data[\"exports\"].getConsoleStr(),\n        Console.options({ bulletPoint: \"Exports: \" }));\n    }\n    if (data.implies && ! data.implies.isEmpty()) {\n      Console.info(\n        data[\"implies\"].getConsoleStr(),\n        Console.options({ bulletPoint: \"Implies: \" }));\n    }\n    if (data.git) {\n      Console.info(\n        Console.url(data.git),\n        Console.options({ bulletPoint: \"Git: \" }));\n    }\n\n    // If we don't have a long-form description, print the summary. (If we don't\n    // have a summary, print nothing).\n    if (data.description || data.summary) {\n      Console.info();\n      Console.info(data.description || data.summary);\n    }\n\n    // Print dependency information, if the package has any dependencies.\n    if (data.dependencies && ! data.dependencies.isEmpty()) {\n      Console.info();\n      Console.info(\"Depends on:\");\n      Console.info(\n          data.dependencies.getConsoleStr(),\n          Console.options({ indent: 2 }));\n    }\n\n    // Print the 'published by' line at the very bottom.\n    if (data.publishedBy) {\n      var publisher = data.publishedBy;\n      var pubDate = utils.longformDate(data.publishedOn);\n      Console.info();\n      Console.info(\"Published by\", publisher, \"on\", pubDate + \".\");\n    }\n\n    // Sometimes, there is a server package and a local package with the same\n    // version. In this case, we prefer the local package. Explain our choice to\n    // the user.\n    if (data.local &&\n        catalog.official.getVersion(data.name, data.version)) {\n      Console.info();\n      Console.info(\n        \"This package version is built locally from source.\",\n        \"The same version of this package also exists on the package server.\",\n        \"To view its metadata, run\",\n        Console.command(\"'meteor show \" + data.name + \"@\" + data.version + \"'\"),\n        \"from outside the project.\");\n    }\n  },\n  // Returns a user-friendly object from this PackageQuery to the caller.  Takes\n  // in a data object with the same keys as _displayVersion.\n  //\n  // Returns an object with some of the following keys:\n  // - name: String. Name of the package.\n  // - version: String. Meteor version number.\n  // - description: String. Longform description.\n  // - summary: String. Short summary.\n  // - git: String. Git URL.\n  // - publishedBy: String. Username of the publisher.\n  // - publishedOn: Date. Time of publication.\n  // - local: Boolean. True if this is a local package.\n  // - directory: source directory of this package.\n  // - installed: Boolean. True if the isopack for this package has been\n  //   downloaded, or if the package is local.\n  // - dependencies: Array of objects representing package dependencies, sorted\n  //   alphabetically by package name.\n  // - OSarchitectures: Array of OS architectures on for which an isopack of\n  //   this package exists (server packages only).\n  // - exports: Array of objects representing the package exports, sorted by\n  //   name of export.\n  _generateVersionObject: function (data) {\n    var versionFields = [\n      \"name\", \"version\", \"description\", \"summary\", \"git\", \"directory\",\n      \"publishedBy\", \"publishedOn\", \"installed\", \"local\", \"architecturesOS\",\n      \"deprecated\", \"deprecatedMessage\"\n    ];\n    var processedData = {};\n    [\"exports\", \"implies\", \"dependencies\"].forEach(function (key) {\n      processedData[key] = data[key] ? data[key].getObject() : [];\n    });\n    return Object.assign(processedData, _.pick(data, versionFields));\n  },\n\n  // Displays general package data from this PackageQuery to the terminal in a\n  // human-friendly format. Takes in an object that contains some, but not\n  // always all, of the following keys:\n  //\n  // - name: (mandatory) package name\n  // - maintainers: array of usernames of maintainers\n  // - homepage: string of the package homepage\n  // - defaultVersion: the default version of this package to use for looking up\n  //   per-version information that's relevant to the package in general (ex:\n  //   git).\n  // - totalVersions: the total number of versions that this package has,\n  //   including hidden versions.\n  // - versions: an ordered array of objects, representing the versions of this\n  //   package that we should return to the user. Each version should contain\n  //   some of the following keys:\n  //     - version: (mandatory) version number, or \"local\" for a version-less\n  //       local package.\n  //     - publishedOn: the date that the package was published.\n  //     - installed: true if this is a server package that has already been\n  //       downloaded to the warehouse.\n  //     - local: true for a local package.\n  //     - directory: source root directory of a local package.\n  // - hiddenVersions: an object containing some information about versions that\n  //   have been hidden from the user. Has keys:\n  //     - oldestVersion: the version of this package with the smallest Meteor\n  //       semver number that exists in our records.\n  //     - lastUnmigrated: the most recent (largest Meteor semver) version that\n  //       is marked 'unmigrated'.\n  //     - lastPreRelease: the most recent pre-release version.\n  _displayPackage: function (data) {\n    var self = this;\n    var defaultVersion = data.defaultVersion;\n\n    // Every package has a name. Some packages have a homepage.\n    var displayName = data.defaultVersion ?\n      data.name + \"@\" + data.defaultVersion.version : data.name;\n    Console.info(displayName, Console.options({ bulletPoint: \"Package: \" }));\n    if (data.defaultVersion.deprecated) {\n      Console.error('This package is deprecated!');\n      if (data.defaultVersion.deprecatedMessage) {\n        Console.warn(data.defaultVersion.deprecatedMessage);\n      }\n    }\n    if (data.homepage) {\n      Console.info(Console.url(data.homepage),\n        Console.options({ bulletPoint: \"Homepage: \" }));\n    }\n    // Local packages might not have any maintainers.\n    if (! _.isEmpty(data.maintainers)) {\n      Console.info(data.maintainers.join(\", \"),\n        Console.options({ bulletPoint: \"Maintainers: \" }));\n    }\n    // Git is per-version, so we will print the latest one, if one exists.\n    if (defaultVersion && defaultVersion.git) {\n      Console.info(Console.url(defaultVersion.git),\n        Console.options({ bulletPoint: \"Git: \" }));\n    }\n    // Print the exports.\n    if (defaultVersion && defaultVersion.exports &&\n       ! defaultVersion.exports.isEmpty()) {\n      Console.info(\n        defaultVersion[\"exports\"].getConsoleStr(),\n        Console.options({ bulletPoint: \"Exports: \" }));\n    }\n    if (defaultVersion && defaultVersion.implies &&\n        ! defaultVersion.implies.isEmpty()) {\n      Console.info(\n        defaultVersion[\"implies\"].getConsoleStr(),\n        Console.options({ bulletPoint: \"Implies: \" }));\n    }\n    Console.info();\n\n    // If we don't have a long-form description, we will use the summary. For a\n    // local package, we might not have a summary, in which case we should be\n    // careful not to print extra lines.\n    var printDescription = defaultVersion &&\n      (defaultVersion.description || defaultVersion.summary);\n    if (printDescription) {\n      Console.info(printDescription );\n      Console.info();\n    }\n\n    // If we have any versions to show, print them out now.\n    var versionRows = [];\n    if (data.versions && ! _.isEmpty(data.versions)) {\n      var versionsHeader =\n            self.showHiddenVersions ? \"Versions:\" : \"Recent versions:\";\n      Console.info(versionsHeader);\n      data.versions.forEach(function (v) {\n\n        // For a local package, we don't have a published date, and we don't\n        // need to show if it has already been downloaded (it is local, we don't\n        // need to download it). Instead of showing both of these values, let's\n        // show the directory.\n        if (v.local) {\n          versionRows.push([v.version, v.directory]);\n          return;\n        }\n\n        // Convert the date into a display-friendly format, or print nothing for\n        // a local package.\n        var publishDate = utils.longformDate(v.publishedOn);\n\n        // If there is a status that we would like to report for this package,\n        // figure it out now.\n        if (v.installed) {\n          var paddedDate = padLongformDate(publishDate);\n          versionRows.push([v.version, paddedDate + \"  \" + \"installed\"]);\n        } else {\n          versionRows.push([v.version, publishDate]);\n        }\n      });\n      // The only time that we are going to go over a reasonable character limit\n      // is with a directory for the local package. We would much rather display\n      // the full directory than trail it off.\n      Console.printTwoColumns(versionRows, { indent: 2, ignoreWidth: true });\n    }\n\n    // If we have not shown all the available versions, let the user know.\n    if (data.totalVersions > versionRows.length) {\n      var oldestShownVersion =\n        (data[\"versions\"][0] && data[\"versions\"][0].version) || \"\";\n      // A string explaining why those versions have been hidden.\n      var hiddenVersions =\n         formatHiddenVersions(data[\"hiddenVersions\"], oldestShownVersion);\n\n      // We will word things in the message in different ways, based on whether\n      // multiple versions exist/have been hidden.\n      var hiddenVersionsPluralizer =\n         (data.totalVersions - data.versions.length == 1) ?\n         \"One \" + hiddenVersions + \" version of \" + self.name + \" has\" :\n         hiddenVersions[0].toUpperCase() + hiddenVersions.slice(1) +\n         \" versions of \" + self.name + \" have\";\n      var allVersionsPluralizer =\n         (data.totalVersions === 1) ?\n         \"the hidden version\" :\n         \"all \" + data.totalVersions + \" versions\";\n\n      // Display the final message.\n      Console.info(\n        hiddenVersionsPluralizer, \"been hidden.\",\n        \"To see \" + allVersionsPluralizer + \", run\",\n        Console.command(\"'meteor show --show-all \" + self.name + \"'\") + \".\");\n    }\n  },\n  // Returns a user-friendly object from this PackageQuery to the caller.  Takes\n  // in a data object with the same keys as _displayPackage.\n  //\n  // Returns an object with some of the following keys:\n  // - name: String. Name of the package.\n  // - homepage: String. URL of the package homepage.\n  // - maintainers: Array of strings. Usernames of package maintainers.\n  // - totalVersions: Number. Total number of versions that exist for this\n  //   package.\n  // - versions: Array of objects, representing versions of this\n  //   package. Objects have the following keys:\n  //   - name: String. Name of the package.\n  //   - version: String. Meteor version number.\n  //   - description: String. Longform description.\n  //   - summary: String. Short summary.\n  //   - git: String. Git URL.\n  //   - publishedBy: String. Username of the publisher.\n  //   - publishedOn: Date. Time of publication.\n  //   - local: Boolean. True if this is a local package.\n  //   - directory: source directory of this package.\n  //   - installed: Boolean. True if the isopack for this package has been\n  //     downloaded, or if the package is local.\n  //   - exports: Array of objects representing the package exports, sorted by\n  //     name of export.\n  _generatePackageObject: function (data) {\n    var packageFields =\n          [ \"name\", \"homepage\", \"maintainers\", \"totalVersions\" ];\n    // Process the versions array. We only want some of the keys, and we want to\n    // make sure to get the right exports object.\n    var versions = data.versions.map(function (version) {\n      var versionFields = [\n        \"name\", \"version\", \"description\", \"summary\", \"git\", \"publishedBy\",\n        \"publishedOn\", \"installed\", \"local\", \"directory\", \"architecturesOS\",\n        \"deprecated\", \"deprecatedMessage\"\n      ];\n      var processedData = {};\n      [\"exports\", \"implies\"].forEach(function (key) {\n        processedData[key] = version[key] ? version[key].getObject() : [];\n      });\n      return Object.assign(processedData, _.pick(version, versionFields));\n    });\n    return Object.assign({ versions: versions }, _.pick(data, packageFields));\n  },\n\n});\n\n// This class looks up release-related information in the official catalog.\n//\n// The constructor takes in an object with the following keys:\n//   - metaRecord: (mandatory) the meta-record for this release from the\n//     Releases collection.\n//   - version: specific version of a release that we want to query.\n//   - showHiddenVersions: show experimental, pre-release & otherwise\n//     non-recommended versions of this release.\nvar ReleaseQuery = function (options) {\n  var self = this;\n\n  // This is the record in the Releases collection. Contains metadata, such as\n  // maintainers.\n  self.metaRecord = options.metaRecord;\n  self.name = options.metaRecord.name;\n\n  // We don't always want to show non-recommended release versions.\n  self.showHiddenVersions = options.showHiddenVersions;\n\n  // Aggregate the query data. If we are asking for a specific version, get data\n  // for a specific version, otherwise aggregate the data about this release\n  // track in general.\n  self.data = options.version ?\n    self._getVersionDetails(options.version) :\n    self._getReleaseData();\n};\n\nObject.assign(ReleaseQuery.prototype, {\n  // Prints the data from this ReleaseQuery to the terminal. Takes the following\n  // options:\n  //   - ejson: Don't pretty-print the data. Return a machine-readable ejson\n  //     object.\n  print: function (options) {\n    var self = this;\n\n    // If we are asking for an EJSON-style output, print out the relevant fields.\n    if (options.ejson) {\n      var versionFields = [\n        \"track\", \"version\", \"description\", \"publishedBy\", \"publishedOn\",\n        \"tool\", \"packages\", \"recommended\"\n      ];\n      var packageFields = [ \"name\", \"maintainers\", \"versions\" ];\n      var fields = self.data.version ? versionFields : packageFields;\n      Console.rawInfo(formatEJSON(_.pick(self.data, fields)));\n      return;\n    }\n\n    // If we are asking for a specific version, display the information about\n    // that version.\n    if (self.data.version) {\n      self._displayVersion(self.data);\n      return;\n    }\n    // Otherwise, print the data about this release track in general.\n    self._displayRelease(self.data);\n  },\n\n  // Gets detailed data about a specific version of this release. Returns an\n  // object with the following keys:\n  //  - track: name of the release track\n  //  - version: release version\n  //  - description: description of the release version\n  //  - recommended: if this is a recommended version.\n  //  - orderKey: the orderKey of this version\n  //  - publishedBy: username of the publisher\n  //  - publishedOn: date this version was published\n  //  - packages: map of packages that go into this version\n  //  - tool: the tool package@version for this release version\n  _getVersionDetails: function (version) {\n    var self = this;\n    var versionRecord =\n       catalog.official.getReleaseVersion(self.name, version);\n    if (! versionRecord) {\n      return null;\n    }\n    var publishDate = getReleaseVersionPublishedOn(versionRecord);\n    return {\n      track: self.name,\n      version: version,\n      description: versionRecord.description,\n      recommended: versionRecord.recommended,\n      orderKey: versionRecord.orderKey,\n      publishedBy: versionRecord.publishedBy[\"username\"],\n      publishedOn: publishDate,\n      packages: versionRecord.packages,\n      tool: versionRecord.tool\n    };\n  },\n  // Gets aggregate data about this release track in general. Returns an object\n  // with the following keys:\n  //    - track: name of the release track\n  //    - maintainers: an array of usernames of maintainers\n  //    - defaultVersion: version record for the default version of this release.\n  //    - totalVersions: total number of release versions for this track\n  //    - versions: an array of version objects. If only recommended versions\n  //      are returned, ordered by orderKey, otherwise unordered. Objects have\n  //      the following keys:\n  //         - version: version number\n  //         - description: version description\n  //         - recommended: true for recommended versions\n  //         - orderKey: (only if showHiddenVersions is true) the orderKey of\n  //           this version.\n  //         - publishedBy: username of the publisher\n  //         - publishedOn: date the version was published\n  _getReleaseData: function () {\n    var self = this;\n    var data = {\n      track: self.metaRecord.name,\n      maintainers: _.pluck(self.metaRecord.maintainers, \"username\")\n    };\n    data[\"defaultVersion\"] =\n      catalog.official.getDefaultReleaseVersionRecord(self.name);\n\n    // Collect information about versions.\n    var versions;\n    if (self.showHiddenVersions) {\n      // There is no obvious way to get an absolute ranking of all release\n      // versions, so this is unsorted. If we have to, we will deal with sorting\n      // this at display time.\n      versions = catalog.official.getReleaseVersionRecords(self.name);\n    } else {\n      versions = catalog.official.getSortedRecommendedReleaseRecords(self.name);\n      versions.reverse();\n    }\n\n    // We don't want to show the user package or tool data in general release\n    // mode (it is a lot of data). Select to show the fields that we want to\n    // return only.\n    var versionFields =\n       [ \"version\", \"description\", \"recommended\"];\n\n    // orderKey is important for dealing with experimental versions, but it is\n    // an internal system detail that we would rather not reveal at this level.\n    if (self.showHiddenVersions) {\n      versionFields.push(\"orderKey\");\n    }\n    data[\"versions\"] = _.map(versions, function (versionRecord) {\n      var data = _.pick(versionRecord, versionFields);\n      data.publishedBy = versionRecord.publishedBy[\"username\"];\n      data.publishedOn = getReleaseVersionPublishedOn(versionRecord);\n      return data;\n    });\n    data[\"totalVersions\"] = catalog.official.getNumReleaseVersions(self.name);\n    return data;\n  },\n  // Displays information about a specific release version in a human-readable\n  // format. Takes in an object with the following keys:\n  // - track: release track\n  // - version: release version\n  // - publishedBy: username of the publisher\n  // - publishedOn: date the version was published\n  // - recommended: true if this is a recommended version\n  // - description: description of the release version\n  // - tool: tool package specification for this version\n  // - packages: map of packages for this release version\n  _displayVersion: function (data) {\n    Console.info(\"Release: \" + data.track + \"@\" + data.version);\n    var isRecommended = data.recommended ? \"yes\" : \"no\";\n    Console.info(\"Recommended: \" + isRecommended);\n    Console.info(\"Tool package: \" + data.tool);\n    Console.info();\n    Console.info(data.description);\n    Console.info();\n    if (!_.isEmpty(data.packages)) {\n      Console.info(\"Packages:\");\n      _.each(data.packages, function (version, packageName) {\n          Console.info(\n            packageName + \": \" + version,\n            Console.options({ indent: 2 }));\n      });\n      Console.info();\n    }\n    Console.info(\n      \"Published by \" + data.publishedBy + \" on \" +\n      utils.longformDate(getReleaseVersionPublishedOn(data)));\n  },\n  // Displays information about this release track in general in a\n  // human-readable format. Takes in an object with the following keys:\n  //    - track: name of the release track\n  //    - maintainers: an array of usernames of maintainers\n  //    - defaultVersion: version record for the default version of this release.\n  //    - totalVersions: total number of release versions for this track\n  //    - versions: an array of version objects. If only recommended versions\n  //      are returned, ordered by orderKey, otherwise unordered. Objects have\n  //      the following keys:\n  //         - version: version number\n  //         - description: version description\n  //         - recommended: true for recommended versions\n  //         - orderKey: (only if showHiddenVersions is true) the orderKey of\n  //           this version.\n  //         - publishedBy: username of the publisher\n  //         - publishedOn: date the version was published\n  _displayRelease: function (data) {\n    var self = this;\n\n    Console.info(\"Release:\",  data.track);\n    // There is no such thing as a local release, which means all releases have\n    // a maintainer.\n    Console.info(\"Maintainers:\", data.maintainers.join(\", \"));\n    Console.info();\n\n    if (data.defaultVersion) {\n      Console.info(data.defaultVersion.description);\n      Console.info();\n    }\n\n    if (self.showHiddenVersions) {\n      self._displayAllReleaseVersions(data.versions);\n      return;\n    }\n\n    // Display the recommended versions of this release.\n    var rows = [];\n    if (!_.isEmpty(data.versions)) {\n      Console.info(\"Recommended versions:\");\n      data.versions.forEach(function (v) {\n        rows.push([v.version, utils.longformDate(v.publishedOn)]);\n      });\n      Console.printTwoColumns(rows, { indent: 2 });\n    }\n\n    // Display a warning about other release versions at the bottom.\n    if (data.totalVersions > rows.length) {\n      var versionsPluralizer =\n            (data.totalVersions > 1) ?\n            \"all \" + data.totalVersions + \" versions\" :\n            \"the hidden version\";\n      // We only hide release versions for one reason -- they are not\n      // recommended. We would have to parse version numbers to differentiate\n      // between 'pre-release' and 'deprecated' (and sort-of-experimental, like\n      // '1.0-weird-trick) and we don't want to rely on version number\n      // conventions in code.\n      var versionsHidden =\n            (data.totalVersions - rows.length > 1) ?\n            \"Non-recommended versions of \" + self.name + \" have been hidden.\" :\n            \"One non-recommended version of \" + self.name + \" has been hidden.\";\n\n      Console.info(\n        versionsHidden,\n        \"To see \" + versionsPluralizer + \", run\",\n        Console.command(\"'meteor show --show-all \" + self.name + \"'\") + \".\");\n    }\n  },\n  // Displays all the versions of a given release in a human-readable\n  // format. Includes experimental and otherwise hidden versions. Takes in an\n  // array of version objects, each of which has the following keys:\n  //  - version: version string\n  //  - orderKey: (optional) orderKey of this version. Not all versions have\n  //    orderKeys.\n  //  - publishedOn: date of publication\n  //  - recommended: true if the version is recommended.\n  _displayAllReleaseVersions: function (versions) {\n    var self = this;\n    var columnOpts = { indent: 2, ignoreWidth: true };\n    // If we don't have any versions, then there is nothing to display.\n    if (! versions) { return; }\n\n    // We are going to print versions with order key ('versions'), separately\n    // from versions without an order key ('experimental versions').\n    var versionsDivided = _.groupBy(versions, function (v) {\n      return _.has(v, \"orderKey\");\n    });\n    var experimentalVersions = versionsDivided[false];\n    var versionsWithKey = versionsDivided[true];\n\n    if (versionsWithKey) {\n      // Sort versions that have order keys by order key, so that 1.0 comes\n      // after 0.9.4.1, etc.\n      versionsWithKey = _.sortBy(versionsWithKey, function (v) {\n        return v.orderKey;\n      });\n      Console.info(\"Versions:\");\n      var rows = [];\n      _.each(versionsWithKey, function (vr) {\n        var dateStr = utils.longformDate(vr.publishedOn);\n        if (! vr.recommended) {\n          rows.push([ vr.version, dateStr ]);\n        } else {\n          var paddedDate = padLongformDate(dateStr);\n          rows.push([ vr.version, paddedDate + \"  (recommended)\" ]);\n        }\n      });\n      Console.printTwoColumns(rows, columnOpts);\n    }\n\n    if (experimentalVersions) {\n      // We can't sort by order key, so sort by order of publication.\n      experimentalVersions = _.sortBy(experimentalVersions, function (v) {\n        return v.publishedOn;\n      });\n      Console.info(\"Experimental versions:\");\n      var rows = [];\n      _.each(experimentalVersions, function (vr) {\n        // Experimental versions cannot be recommended.\n        rows.push([vr.version, utils.longformDate(vr.publishedOn)]);\n      });\n      Console.printTwoColumns(rows, columnOpts);\n    }\n  }\n});\n\n\n///////////////////////////////////////////////////////////////////////////////\n// show\n///////////////////////////////////////////////////////////////////////////////\n\nmain.registerCommand({\n  name: 'show',\n  pretty: true,\n  minArgs: 0,\n  maxArgs: 1,\n  usesPackage: true,\n  options: {\n    \"show-all\": { type: Boolean },\n    \"ejson\": { type: Boolean }\n  },\n  catalogRefresh:\n    new catalog.Refresh.OnceAtStart(\n        { maxAge: DEFAULT_MAX_AGE_MS, ignoreErrors: true })\n}, function (options) {\n  var fullName;\n  var name;\n  var version;\n  // Because of the new projectContext interface, we need to initialize the\n  // project context in order to load the local catalog. This is not ideal.\n  var projectContext = getTempContext(options);\n\n  // If the user specified a query, process it.\n  if (! _.isEmpty(options.args)) {\n    // The foo@bar API means that we have to do some string parsing to figure out\n    // if we want a particular version.\n    fullName = options.args[0];\n    var splitArgs = fullName.split('@');\n    name = splitArgs[0];\n    version = (splitArgs.length > 1) ? splitArgs[1] : null;\n    if (splitArgs.length > 2) {\n      Console.error(\"Invalid request format: \" + fullName);\n      process.exit(1);\n    }\n  } else {\n    if (! options.packageDir) {\n      // Letting the user run 'meteor show' without arguments from a package\n      // directory is a pleasant shortcut, but the default should be specifying\n      // a query.\n      Console.error(\n        \"Please specify a package or release name to show information about it.\"\n      );\n      process.exit(1);\n    }\n    // Use the projectContext to get the name of the package.\n    var currentVersion =\n          projectContext.localCatalog.getVersionBySourceRoot(options.packageDir);\n    name = currentVersion.packageName;\n    version = \"local\";\n    fullName = name + \"@local\";\n  }\n  var query = null;\n\n  // First, we need to figure out if we are dealing with a package, or a\n  // release. We don't want to rely on capitalization conventions, so we will\n  // start by checking if a package by that name exists. If it does, then we are\n  // dealing with a package. (Unlike the normal projectContext, we want to\n  // prefer the remote record, if one exists, rather than the local record. The\n  // remote record contains data like 'homepage' and 'maintainers', that the\n  // local record does not).\n  var packageRecord =\n        catalog.official.getPackage(name) ||\n        projectContext.localCatalog.getPackage(name);\n  if (packageRecord) {\n    query =  new PackageQuery({\n      metaRecord: packageRecord,\n      version: version,\n      projectContext: projectContext,\n      showHiddenVersions: options[\"show-all\"],\n      showArchitecturesOS: options.ejson,\n      showDependencies: !! version\n    });\n  }\n\n  // If this is not a package, it might be a release. Let's check if there is\n  // a release by this name. There are no local releases, so we only need to\n  // check the official catalog.\n  if (! query) {\n    var releaseRecord = catalog.official.getReleaseTrack(name);\n    if (releaseRecord) {\n      query = new ReleaseQuery({\n        metaRecord: releaseRecord,\n        version: version,\n        showHiddenVersions: options[\"show-all\"]\n      });\n    }\n  }\n  // If we have failed to create a query, or if we have created a query and it\n  // couldn't gather any data about our request, then the item that we are\n  // looking for does not exist.\n  if (! query || ! query.data) {\n    return itemNotFound(fullName);\n  }\n\n  query.print({ ejson: !! options.ejson });\n  return 0;\n});\n\n\n///////////////////////////////////////////////////////////////////////////////\n// search\n///////////////////////////////////////////////////////////////////////////////\n\nmain.registerCommand({\n  name: 'search',\n  pretty: true,\n  usesPackage: true,\n  minArgs: 0, // So we can provide specific help\n  maxArgs: 1,\n  options: {\n    maintainer: { type: String },\n    \"show-all\": { type: Boolean },\n    ejson: { type: Boolean },\n    // Undocumented debug-only option (originally added for Velocity).\n    \"debug-only\": { type: Boolean },\n    \"prod-only\": { type: Boolean },\n    \"test-only\": { type: Boolean },\n  },\n  catalogRefresh:\n    new catalog.Refresh.OnceAtStart(\n      { maxAge: DEFAULT_MAX_AGE_MS, ignoreErrors: true })\n}, function (options) {\n  if (options.args.length === 0) {\n    Console.info(\n      \"To show all packages, do\", Console.command(\"meteor search .\"));\n    return 1;\n  }\n\n  // Because of the new projectContext interface, we need to initialize the\n  // project context in order to load the local catalog.\n  var projectContext = getTempContext(options);\n\n  // XXX We should push the queries into SQLite!\n  var allPackages = _.union(\n    catalog.official.getAllPackageNames(),\n    projectContext.localCatalog.getAllPackageNames());\n  var allReleases = catalog.official.getAllReleaseTracks();\n  var matchingPackages = [];\n  var matchingReleases = [];\n\n  var selector;\n  var pattern = options.args[0];\n\n  var search;\n  try {\n    search = new RegExp(pattern);\n  } catch (err) {\n    Console.error(err + \"\");\n    return 1;\n  }\n\n  // Do not return true on broken packages, unless requested in options.\n  var filterBroken = function (match, isRelease, name) {\n    // If the package does not match, or it is not a package at all or if we\n    // don't want to filter anyway, we do not care.\n    if (!match || isRelease) {\n      return match;\n    }\n    var vr;\n    if (!options[\"show-all\"]) {\n      // If we can't find a version in the local catalog, we want to get the\n      // latest mainline (ie: non-RC) version from the official catalog.\n      vr = projectContext.localCatalog.getLatestVersion(name) ||\n        catalog.official.getLatestMainlineVersion(name);\n    } else {\n      // We want the latest version of this package, and we don't care if it is\n      // a release candidate.\n      vr = projectContext.projectCatalog.getLatestVersion(name);\n    }\n    if (!vr) {\n      return false;\n    }\n    // If we did NOT ask for unmigrated packages and this package is unmigrated,\n    // we don't care.\n    if (!options[\"show-all\"] && vr.unmigrated){\n      return false;\n    }\n    // If we asked for debug-only packages and this package is NOT debug only,\n    // we don't care.\n    if (options[\"debug-only\"] && !vr.debugOnly) {\n      return false;\n    }\n    // If we asked for prod-only packages and this package is NOT prod only,\n    // we don't care.\n    if (options[\"prod-only\"] && !vr.prodOnly) {\n      return false;\n    }\n    // If we asked for test-only packages and this package is NOT test only,\n    // we don't care.\n    if (options[\"test-only\"] && !vr.testOnly) {\n      return false;\n    }\n    return true;\n  };\n\n  if (options.maintainer) {\n    var username =  options.maintainer;\n    // In the future, we should consider checking this on the server, but I\n    // suspect the main use of this command will be to deal with the automatic\n    // migration and uncommon in everyday use. From that perspective, it makes\n    // little sense to require you to be online to find out what packages you\n    // own; and the consequence of not mentioning your group packages until\n    // you update to a new version of meteor is not that dire.\n    selector = function (name, isRelease) {\n      var record;\n      // XXX make sure search works while offline\n      if (isRelease) {\n        record = catalog.official.getReleaseTrack(name);\n      } else {\n        record = catalog.official.getPackage(name);\n      }\n      return filterBroken(\n        (name.match(search) &&\n         record && !!_.findWhere(record.maintainers, {username: username})),\n        isRelease, name);\n    };\n  } else {\n    selector = function (name, isRelease) {\n      return filterBroken(name.match(search),\n        isRelease, name);\n    };\n  }\n\n  buildmessage.enterJob({ title: 'Searching packages' }, function () {\n    _.each(allPackages, function (pack) {\n      if (selector(pack, false)) {\n        var vr;\n        if (!options['show-all']) {\n          vr =\n            projectContext.localCatalog.getLatestVersion(pack) ||\n            catalog.official.getLatestMainlineVersion(pack);\n        } else {\n          vr = projectContext.projectCatalog.getLatestVersion(pack);\n        }\n        if (vr) {\n          matchingPackages.push({\n            name: pack,\n            description: vr.description,\n            latestVersion: vr.version,\n            lastUpdated: new Date(vr.lastUpdated)\n          });\n        }\n      }\n    });\n    _.each(allReleases, function (track) {\n      if (selector(track, true)) {\n        var vr = catalog.official.getDefaultReleaseVersionRecord(track);\n        if (vr) {\n          matchingReleases.push({\n            name: track,\n            description: vr.description,\n            latestVersion: vr.version,\n            lastUpdated: new Date(vr.lastUpdated)\n          });\n        }\n      }\n    });\n  });\n\n  if (options.ejson) {\n    var ret = {\n      packages: matchingPackages,\n      releases: matchingReleases\n    };\n    Console.rawInfo(formatEJSON(ret));\n    return 0;\n  }\n\n  var output = false;\n  if (!_.isEqual(matchingPackages, [])) {\n    output = true;\n    Console.info(\"Matching packages:\");\n    utils.printPackageList(matchingPackages);\n  }\n\n  if (!_.isEqual(matchingReleases, [])) {\n    output = true;\n    Console.info(\"Matching releases:\");\n    utils.printPackageList(matchingReleases);\n  }\n\n  if (!output) {\n    Console.error(pattern + ': nothing found');\n    catalogUtils.explainIfRefreshFailed();\n  } else {\n    Console.info(\n      \"You can use\", Console.command(\"'meteor show'\"),\n      \"to get more information on a specific item.\");\n  }\n});\n"],"file":"tools/cli/commands-packages-query.js.map"}