{"version":3,"sources":["tools/shell-client.ts"],"names":[],"mappings":"AAAA,IAAA,eAAA;;AAAoB,MAAK,CAAA,IAAL,CAAK,uCAAL,EAAK;AAAA,EAAA,OAAA,CAAA,CAAA,EAAA;AAAA,IAAA,eAAA,GAAA,CAAA;AAAA;;AAAA,CAAL,EAAK,CAAL;AAApB,MAAA,CAAO,MAAP,CAAc;AAAA,EAAA,OAAM,EAAA,MAAK;AAAX,CAAd;AAAyB,IAAA,EAAA;AAAA,MAAA,CAAA,IAAA,CAAA,IAAA,EAAA;AAAA,MAAA,CAAA,EAAA;AAAA,IAAA,EAAA,GAAA,CAAA;AAAA;;AAAA,CAAA,EAAA,CAAA;AAAA,IAAA,IAAA;AAAA,MAAA,CAAA,IAAA,CAAA,MAAA,EAAA;AAAA,MAAA,CAAA,EAAA;AAAA,IAAA,IAAA,GAAA,CAAA;AAAA;;AAAA,CAAA,EAAA,CAAA;AAAA,IAAA,GAAA;AAAA,MAAA,CAAA,IAAA,CAAA,KAAA,EAAA;AAAA,MAAA,CAAA,EAAA;AAAA,IAAA,GAAA,GAAA,CAAA;AAAA;;AAAA,CAAA,EAAA,CAAA;AAAA,IAAA,OAAA;AAAA,MAAA,CAAA,IAAA,CAAA,eAAA,EAAA;AAAA,EAAA,OAAA,CAAA,CAAA,EAAA;AAAA,IAAA,OAAA,GAAA,CAAA;AAAA;;AAAA,CAAA,EAAA,CAAA;AAAA,IAAA,QAAA;AAAA,MAAA,CAAA,IAAA,CAAA,kBAAA,EAAA;AAAA,EAAA,QAAA,CAAA,CAAA,EAAA;AAAA,IAAA,QAAA,GAAA,CAAA;AAAA;;AAAA,CAAA,EAAA,CAAA;;AAMzB,MAAM,KAAK,GAAG,OAAO,CAAC,OAAD,CAArB;;AACA,MAAM,GAAG,GAAG,OAAO,CAAC,IAAD,CAAP,CAAc,GAA1B,C,CAEA;AACA;;;AACA,MAAM,eAAe,GAAG,kBAAxB;;AAEA,SAAS,WAAT,CAAqB,QAArB,EAAqC;AACnC,SAAO,IAAI,CAAC,IAAL,CAAU,QAAV,EAAoB,WAApB,CAAP;AACD,C,CAED;AACA;;;AACM,SAAU,OAAV,CAAkB,QAAlB,EAAkC;AACtC,MAAI,MAAJ,CAAW,QAAX,EAAqB,OAArB;AACD;;AAED,MAAM,MAAN,CAAY;AAQV,EAAA,WAAA,CAAmB,QAAnB,EAAmC;AAAA;;AAAA,uCAPhB,KAOgB;;AAAA,yCALb,KAKa;;AAAA,iDAJL,IAIK;;AAAA,4CAHV,CAGU;;AAAA;;AAAhB,SAAA,QAAA,GAAA,QAAA;AAAoB;;AAEvC,EAAA,SAAS,GAAoB;AAAA,QAAnB,KAAmB,uEAAH,GAAG;;AAC3B;AACA;AACA,QAAI,EAAE,KAAK,cAAP,KAA0B,CAA9B,EAAiC;AAC/B,MAAA,OAAO,CAAC,KAAR,CAAc,KAAK,CAAC,MAAN,CACZ,2CADY,CAAd;AAGD;;AAED,QAAI,CAAC,KAAK,cAAV,EAA0B;AACxB,WAAK,cAAL,GAAsB,UAAU,CAAC,MAAK;AACpC,eAAO,KAAK,cAAZ;AACA,aAAK,OAAL;AACD,OAH+B,EAG7B,KAH6B,CAAhC;AAID;AACF;;AAED,EAAA,OAAO,GAAA;AACL,UAAM,QAAQ,GAAG,WAAW,CAAC,KAAK,QAAN,CAA5B;AAEA,IAAA,EAAE,CAAC,QAAH,CAAY,QAAZ,EAAsB,MAAtB,EAA8B,CAAC,GAAD,EAAM,IAAN,KAAc;AAC1C,UAAI,GAAJ,EAAS;AACP,eAAO,KAAK,SAAL,EAAP;AACD;;AAED,UAAI,IAAJ;;AACA,UAAI;AACF,QAAA,IAAI,GAAG,IAAI,CAAC,KAAL,CAAW,IAAX,CAAP;AACD,OAFD,CAEE,OAAO,GAAP,EAAY;AACZ,eAAO,KAAK,SAAL,EAAP;AACD;;AAED,UAAI,IAAI,CAAC,MAAL,KAAgB,SAApB,EAA+B;AAC7B,YAAI,KAAK,mBAAT,EAA8B;AAC5B,iBAAO,KAAK,SAAL,EAAP;AACD;;AAED,YAAI,IAAI,CAAC,MAAT,EAAiB;AACf,UAAA,OAAO,CAAC,KAAR,CAAc,IAAI,CAAC,MAAnB;AACD;;AAED,QAAA,OAAO,CAAC,KAAR,CAAc,eAAd;AACA,QAAA,OAAO,CAAC,IAAR,CAAa,CAAb;AACD;;AAED,WAAK,WAAL,CACE,GAAG,CAAC,OAAJ,CAAY,IAAI,CAAC,IAAjB,EAAuB,WAAvB,CADF,EAEE,IAAI,CAAC,GAFP;AAID,KA7BD;AA8BD;;AAED,EAAA,uBAAuB,CAAC,IAAD,EAAmB,GAAnB,EAA8B;AACnD,IAAA,IAAI,CAAC,EAAL,CAAQ,SAAR,EAAmB,YAAA;AACjB,YAAM,YAAY,GAAa,EAA/B;AACA,MAAA,OAAO,CAAC,KAAR,CAAc,EAAd,CAAiB,MAAjB,EAAyB,MAAM,IAAI,YAAY,CAAC,IAAb,CAAkB,MAAlB,CAAnC;AACA,MAAA,OAAO,CAAC,KAAR,CAAc,EAAd,CAAiB,KAAjB,EAAwB,MAAK;AAC3B,QAAA,IAAI,CAAC,KAAL,CAAW,IAAI,CAAC,SAAL,CAAe;AACxB,UAAA,eAAe,EAAE;AACf;AACA;AACA;AACA,YAAA,OAAO,EAAE,MAAM,CAAC,MAAP,CAAc,YAAd,EAA4B,QAA5B,CAAqC,MAArC;AAJM,WADO;AAOxB,UAAA,QAAQ,EAAE,KAPc;AAQxB,UAAA,GAAG,EAAE;AARmB,SAAf,IASN,IATL;AAUD,OAXD;AAYD,KAfD;AAiBA,UAAM,aAAa,GAAa,EAAhC;AACA,IAAA,IAAI,CAAC,EAAL,CAAQ,MAAR,EAAgB,MAAM,IAAI,aAAa,CAAC,IAAd,CAAmB,MAAnB,CAA1B;AACA,IAAA,IAAI,CAAC,EAAL,CAAQ,OAAR,EAAiB,YAAA;AACf,YAAM,MAAM,GAAG,IAAI,CAAC,KAAL,CAAW,MAAM,CAAC,MAAP,CAAc,aAAd,CAAX,CAAf;;AACA,UAAI,MAAM,CAAC,KAAX,EAAkB;AAChB,QAAA,OAAO,CAAC,KAAR,CAAc,MAAM,CAAC,KAArB;AACA,QAAA,OAAO,CAAC,IAAR,CAAa,MAAM,CAAC,IAApB;AACD,OAHD,MAGO;AACL,QAAA,OAAO,CAAC,MAAR,CAAe,KAAf,CAAqB,IAAI,CAAC,SAAL,CAAe,MAAM,CAAC,MAAtB,IAAgC,IAArD;AACA,QAAA,OAAO,CAAC,IAAR,CAAa,CAAb;AACD;AACF,KATD;AAUD;;AAED,EAAA,WAAW,CAAC,IAAD,EAAmB,GAAnB,EAA8B;AACvC,QAAI,CAAC,OAAO,CAAC,KAAR,CAAc,KAAnB,EAA0B;AACxB,aAAO,KAAK,uBAAL,CAA6B,IAA7B,EAAmC,GAAnC,CAAP;AACD,KAHsC,CAKvC;AACA;;;AACA,IAAA,OAAO,CAAC,KAAR,CAAc,MAAd;;AAEA,UAAM,SAAS,GAAG,MAAK;AACrB,WAAK,mBAAL,GAA2B,KAA3B;AACA,WAAK,cAAL,GAAsB,CAAtB;AACA,WAAK,SAAL,GAAiB,IAAjB,CAHqB,CAKrB;AACA;;AACA,MAAA,IAAI,CAAC,KAAL,CAAW,IAAI,CAAC,SAAL,CAAe;AACxB,QAAA,OAAO,EAAE,OAAO,CAAC,MAAR,CAAe,OADA;AAExB,QAAA,QAAQ,EAAE,CAAC,OAAO,EAFM;AAGxB,QAAA,GAAG,EAAE;AAHmB,OAAf,IAIN,IAJL;AAMA,MAAA,OAAO,CAAC,MAAR,CAAe,KAAf,CAAqB,WAAW,EAAhC;AACA,MAAA,OAAO,CAAC,KAAR,CAAc,IAAd,CAAmB,IAAnB;;AACA,UAAI,OAAO,CAAC,KAAR,CAAc,UAAlB,EAA8B;AAAE;AAC9B,QAAA,OAAO,CAAC,KAAR,CAAc,UAAd,CAAyB,IAAzB;AACD;AACF,KAlBD;;AAoBA,UAAM,OAAO,GAAG,MAAK;AACnB,MAAA,QAAQ,GADW,CAGnB;AACA;;AACA,UAAI,KAAK,WAAT,EAAsB;AACpB,QAAA,OAAO,CAAC,IAAR,CAAa,CAAb;AACD,OAFD,MAEO;AACL,aAAK,SAAL;AACD;AACF,KAVD;;AAYA,UAAM,OAAO,GAAG,MAAK;AACnB,MAAA,QAAQ;AACR,WAAK,SAAL;AACD,KAHD;;AAKA,UAAM,QAAQ,GAAG,MAAK;AACpB,WAAK,SAAL,GAAiB,KAAjB;;AAEA,UAAI,OAAO,CAAC,KAAR,CAAc,UAAlB,EAA8B;AAAE;AAC9B,QAAA,OAAO,CAAC,KAAR,CAAc,UAAd,CAAyB,KAAzB;AACD;;AAED,MAAA,OAAO,CAAC,KAAR,CAAc,MAAd,CAAqB,IAArB;AACA,MAAA,IAAI,CAAC,MAAL,CAAY,OAAO,CAAC,MAApB;AACA,MAAA,IAAI,CAAC,cAAL,CAAoB,SAApB,EAA+B,SAA/B;AACA,MAAA,IAAI,CAAC,cAAL,CAAoB,OAApB,EAA6B,OAA7B;AACA,MAAA,IAAI,CAAC,cAAL,CAAoB,OAApB,EAA6B,OAA7B;AACA,MAAA,IAAI,CAAC,GAAL;AACD,KAbD;;AAeA,IAAA,IAAI,CAAC,IAAL,CAAU,OAAO,CAAC,MAAlB;AAEA,IAAA,QAAQ,CAAC,IAAD,EAAQ,IAAD,IAAiB;AAC9B,WAAK,WAAL,GAAmB,IAAI,CAAC,OAAL,CAAa,eAAb,KAAiC,CAApD;AACA,aAAO,SAAP;AACD,KAHO,CAAR;AAKA,IAAA,IAAI,CAAC,EAAL,CAAQ,SAAR,EAAmB,SAAnB;AACA,IAAA,IAAI,CAAC,EAAL,CAAQ,OAAR,EAAiB,OAAjB;AACA,IAAA,IAAI,CAAC,EAAL,CAAQ,OAAR,EAAiB,OAAjB;AACD;;AArKS;;AA0KZ,SAAS,WAAT,GAAoB;AAClB,QAAM,WAAW,GAAG,CAClB,EADkB,EAElB,+CAFkB,CAApB;;AAKA,MAAI,CAAC,OAAO,EAAZ,EAAgB;AACd;AACA,IAAA,WAAW,CAAC,IAAZ,CACE,EADF,EAEE,iDAFF;AAID;;AAED,EAAA,WAAW,CAAC,IAAZ,CACE,EADF,EAEE,mDAFF,EAGE,+DAHF,EAIE,iCAJF,EAKE,GALF;AAQA,SAAO,KAAK,CAAC,KAAN,CAAY,WAAW,CAAC,IAAZ,CAAiB,GAAjB,CAAZ,CAAP;AACD","sourcesContent":["import * as fs from \"fs\";\nimport * as path from \"path\";\nimport * as net from \"net\";\nimport { isEmacs } from \"./utils/utils\";\nimport { eachline } from \"./utils/eachline\";\n\nconst chalk = require(\"chalk\");\nconst EOL = require(\"os\").EOL;\n\n// These two values (EXITING_MESSAGE and getInfoFile) must match the\n// values used by the shell-server package.\nconst EXITING_MESSAGE = \"Shell exiting...\";\n\nfunction getInfoFile(shellDir: string): string {\n  return path.join(shellDir, \"info.json\");\n}\n\n// Invoked by the process running `meteor shell` to attempt to connect to\n// the server via the socket file.\nexport function connect(shellDir: string) {\n  new Client(shellDir).connect();\n}\n\nclass Client {\n  public connected = false;\n\n  private exitOnClose = false;\n  private firstTimeConnecting = true;\n  private reconnectCount = 0;\n  private reconnectTimer?: NodeJS.Timeout;\n\n  constructor(public shellDir: string) {}\n\n  reconnect(delay: number = 100) {\n    // Display the \"Server unavailable\" warning only on the third attempt\n    // to reconnect, so it doesn't get shown for successful reconnects.\n    if (++this.reconnectCount === 3) {\n      console.error(chalk.yellow(\n        \"Server unavailable (waiting to reconnect)\"\n      ));\n    }\n\n    if (!this.reconnectTimer) {\n      this.reconnectTimer = setTimeout(() => {\n        delete this.reconnectTimer;\n        this.connect();\n      }, delay);\n    }\n  };\n\n  connect() {\n    const infoFile = getInfoFile(this.shellDir);\n\n    fs.readFile(infoFile, \"utf8\", (err, json) => {\n      if (err) {\n        return this.reconnect();\n      }\n\n      let info;\n      try {\n        info = JSON.parse(json);\n      } catch (err) {\n        return this.reconnect();\n      }\n\n      if (info.status !== \"enabled\") {\n        if (this.firstTimeConnecting) {\n          return this.reconnect();\n        }\n\n        if (info.reason) {\n          console.error(info.reason);\n        }\n\n        console.error(EXITING_MESSAGE);\n        process.exit(0);\n      }\n\n      this.setUpSocket(\n        net.connect(info.port, \"127.0.0.1\"),\n        info.key\n      );\n    });\n  };\n\n  setUpSocketForSingleUse(sock: net.Socket, key: string) {\n    sock.on(\"connect\", function () {\n      const inputBuffers: Buffer[] = [];\n      process.stdin.on(\"data\", buffer => inputBuffers.push(buffer));\n      process.stdin.on(\"end\", () => {\n        sock.write(JSON.stringify({\n          evaluateAndExit: {\n            // Make sure the entire command is written as a string within a\n            // JSON object, so that the server can easily tell when it has\n            // received the whole command.\n            command: Buffer.concat(inputBuffers).toString(\"utf8\")\n          },\n          terminal: false,\n          key: key\n        }) + \"\\n\");\n      });\n    });\n\n    const outputBuffers: Buffer[] = [];\n    sock.on(\"data\", buffer => outputBuffers.push(buffer));\n    sock.on(\"close\", function () {\n      const output = JSON.parse(Buffer.concat(outputBuffers));\n      if (output.error) {\n        console.error(output.error);\n        process.exit(output.code);\n      } else {\n        process.stdout.write(JSON.stringify(output.result) + \"\\n\");\n        process.exit(0);\n      }\n    });\n  };\n\n  setUpSocket(sock: net.Socket, key: string) {\n    if (!process.stdin.isTTY) {\n      return this.setUpSocketForSingleUse(sock, key);\n    }\n\n    // Put STDIN into \"flowing mode\":\n    // http://nodejs.org/api/stream.html#stream_compatibility_with_older_node_versions\n    process.stdin.resume();\n\n    const onConnect = () => {\n      this.firstTimeConnecting = false;\n      this.reconnectCount = 0;\n      this.connected = true;\n\n      // Sending a JSON-stringified options object (even just an empty\n      // object) over the socket is required to start the REPL session.\n      sock.write(JSON.stringify({\n        columns: process.stdout.columns,\n        terminal: !isEmacs(),\n        key: key\n      }) + \"\\n\");\n\n      process.stderr.write(shellBanner());\n      process.stdin.pipe(sock);\n      if (process.stdin.setRawMode) { // https://github.com/joyent/node/issues/8204\n        process.stdin.setRawMode(true);\n      }\n    }\n\n    const onClose = () => {\n      tearDown();\n\n      // If we received the special EXITING_MESSAGE just before the socket\n      // closed, then exit the shell instead of reconnecting.\n      if (this.exitOnClose) {\n        process.exit(0);\n      } else {\n        this.reconnect();\n      }\n    }\n\n    const onError = () => {\n      tearDown();\n      this.reconnect();\n    }\n\n    const tearDown = () => {\n      this.connected = false;\n\n      if (process.stdin.setRawMode) { // https://github.com/joyent/node/issues/8204\n        process.stdin.setRawMode(false);\n      }\n\n      process.stdin.unpipe(sock);\n      sock.unpipe(process.stdout);\n      sock.removeListener(\"connect\", onConnect);\n      sock.removeListener(\"close\", onClose);\n      sock.removeListener(\"error\", onError);\n      sock.end();\n    }\n\n    sock.pipe(process.stdout);\n\n    eachline(sock, (line: string) => {\n      this.exitOnClose = line.indexOf(EXITING_MESSAGE) >= 0;\n      return undefined as unknown as string;\n    });\n\n    sock.on(\"connect\", onConnect);\n    sock.on(\"close\", onClose);\n    sock.on(\"error\", onError);\n  };\n}\n\n\n\nfunction shellBanner(): string {\n  const bannerLines = [\n    \"\",\n    \"Welcome to the server-side interactive shell!\"\n  ];\n\n  if (!isEmacs()) {\n    // Tab completion sadly does not work in Emacs.\n    bannerLines.push(\n      \"\",\n      \"Tab completion is enabled for global variables.\"\n    );\n  }\n\n  bannerLines.push(\n    \"\",\n    \"Type .reload to restart the server and the shell.\",\n    \"Type .exit to disconnect from the server and leave the shell.\",\n    \"Type .help for additional help.\",\n    EOL\n  );\n\n  return chalk.green(bannerLines.join(EOL));\n}\n"],"sourceRoot":"","file":"tools/shell-client.js.map"}