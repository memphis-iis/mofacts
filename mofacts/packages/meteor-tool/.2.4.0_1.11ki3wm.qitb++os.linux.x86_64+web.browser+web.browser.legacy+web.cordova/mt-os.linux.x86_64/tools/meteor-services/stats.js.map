{"version":3,"sources":["/tools/meteor-services/stats.js"],"names":["Fiber","require","_","config","files","auth","ServiceConnection","httpHelpers","Console","OPT_OUT_PACKAGE_NAME","packageList","projectContext","versions","packageMap","eachPackage","name","info","push","version","local","kind","direct","projectConstraintsFile","getConstraint","recordPackages","options","packages","findWhere","process","env","METEOR_PACKAGE_STATS_TEST_OUTPUT","stdout","write","appIdentifier","details","what","userAgent","getUserAgent","sessionId","getSessionId","getAccountsDomain","site","conn","connectToPackagesStatsServer","accountsConfiguration","getAccountsConfiguration","isLoggedIn","loginWithTokenOrOAuth","getPackageStatsServerUrl","getPackageStatsServerDomain","err","result","call","newSessionId","setSessionId","logErrorIfInCheckout","close","run","isInteractive","inCheckout","warn","printErr","stack","rawWarn","getPackagesForAppIdInTest","sortBy","_dontPrintErrors","exports"],"mappings":"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","sourcesContent":["var Fiber = require(\"fibers\");\nvar _ = require(\"underscore\");\n\nvar config = require('./config.js');\nvar files = require('../fs/files');\nvar auth = require('./auth.js');\nvar ServiceConnection = require('./service-connection.js');\nvar httpHelpers = require('../utils/http-helpers.js');\nvar Console = require('../console/console.js').Console;\n\n// The name of the package that you add to your app to opt out of\n// sending stats.\nvar OPT_OUT_PACKAGE_NAME = \"package-stats-opt-out\";\n\n// Return a list of packages used by this app, both directly and\n// indirectly. Formatted as a list of objects with 'name', 'version'\n// and 'direct', which is how the `recordAppPackages` method on the\n// stats server expects to get this list.\nvar packageList = function (projectContext) {\n  var versions = [];\n  projectContext.packageMap.eachPackage(function (name, info) {\n    versions.push({\n      name: name,\n      version: info.version,\n      local: info.kind === 'local',\n      direct: !! projectContext.projectConstraintsFile.getConstraint(name)\n    });\n  });\n  return versions;\n};\n\n// Options:\n// - what: one of \"sdk.bundle\", \"sdk.deploy\", \"sdk.run\".\n// - projectContext: the ProjectContext. prepareProjectForBuild\n//   must have run successfully. We must extract all necessary data\n//   from this before yielding.\n// - site: If it's a deploy, the name of the site (\"foo.meteor.com\") that we're\n//   deploying to.\nvar recordPackages = function (options) {\n  // Before doing anything, look at the app's dependencies to see if the\n  // opt-out package is there; if present, we don't record any stats.\n  var packages = packageList(options.projectContext);\n  if (_.findWhere(packages, { name: OPT_OUT_PACKAGE_NAME })) {\n    // Print some output for the 'report-stats' self-test.\n    if (process.env.METEOR_PACKAGE_STATS_TEST_OUTPUT) {\n      process.stdout.write(\"PACKAGE STATS NOT SENT\\n\");\n    }\n    return;\n  }\n\n  var appIdentifier = options.projectContext.appIdentifier;\n\n  // We do this inside a new fiber to avoid blocking anything on talking\n  // to the package stats server. If we can't connect, for example, we\n  // don't care; we'll just miss out on recording these packages.\n  // This also gives it its own buildmessage state.\n  // However, we do make sure to have already extracted the package list from\n  // projectContext, since it might mutate out from under us otherwise.\n  Fiber(function () {\n\n    var details = {\n      what: options.what,\n      userAgent: httpHelpers.getUserAgent(),\n      sessionId: auth.getSessionId(config.getAccountsDomain()),\n      site: options.site\n    };\n\n    try {\n      var conn = connectToPackagesStatsServer();\n      var accountsConfiguration = auth.getAccountsConfiguration(conn);\n\n      if (auth.isLoggedIn()) {\n        try {\n          auth.loginWithTokenOrOAuth(\n            conn,\n            accountsConfiguration,\n            config.getPackageStatsServerUrl(),\n            config.getPackageStatsServerDomain(),\n            \"package-stats-server\"\n          );\n        } catch (err) {\n          // Do nothing. If we can't log in, we should continue and report\n          // stats anonymously.\n          //\n          // We log other errors with `logErrorIfInCheckout`, but login\n          // errors can happen in normal operation when nothing is wrong\n          // (e.g. login token expired or revoked) so we don't log them.\n        }\n      }\n\n      var result = conn.call(\"recordAppPackages\",\n                             appIdentifier,\n                             packages,\n                             details);\n\n      // If the stats server sent us a new session, save it for use on\n      // subsequent requests.\n      if (result && result.newSessionId) {\n        auth.setSessionId(config.getAccountsDomain(), result.newSessionId);\n      }\n\n      if (process.env.METEOR_PACKAGE_STATS_TEST_OUTPUT) {\n        // Print some output for the 'report-stats' self-test.\n        process.stdout.write(\"PACKAGE STATS SENT\\n\");\n      }\n    } catch (err) {\n      logErrorIfInCheckout(err);\n      // Do nothing. A failure to record package stats shouldn't be\n      // visible to the end user and shouldn't affect whatever command\n      // they are running.\n    } finally {\n      conn && conn.close();\n    }\n  }).run();\n};\n\nvar logErrorIfInCheckout = function (err) {\n  if ((Console.isInteractive() && files.inCheckout())\n      || process.env.METEOR_PACKAGE_STATS_TEST_OUTPUT) {\n    Console.warn(\"Failed to record package usage.\");\n    Console.warn(\n      \"(This error is hidden when you are not running Meteor from a\",\n      \"checkout.)\");\n    var printErr = err.stack || err;\n    Console.rawWarn(printErr + \"\\n\");\n    Console.warn();\n    Console.warn();\n  }\n};\n\n// Used in a test (and can only be used against the testing packages\n// server) to fetch one package stats entry for a given application.\nvar getPackagesForAppIdInTest = function (projectContext) {\n  var conn = connectToPackagesStatsServer();\n  var result;\n  try {\n    result = conn.call(\n      \"getPackagesForAppId\",\n      projectContext.appIdentifier);\n    if (result && result.details) {\n      result.details.packages = _.sortBy(result.details.packages, \"name\");\n    }\n  } finally {\n    conn.close();\n  }\n\n  return result;\n};\n\nvar connectToPackagesStatsServer = function () {\n  return new ServiceConnection(\n    config.getPackageStatsServerUrl(),\n    {_dontPrintErrors: true}\n  );\n};\n\nexports.recordPackages = recordPackages;\nexports.packageList = packageList; // for use in the \"stats\" self-test.\nexports.getPackagesForAppIdInTest = getPackagesForAppIdInTest;\n"],"file":"tools/meteor-services/stats.js.map"}