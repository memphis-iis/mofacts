{"version":3,"sources":["/tools/runners/run-updater.js"],"names":["Fiber","require","fiberHelpers","Console","Updater","self","timer","Object","assign","prototype","start","Error","check","_check","setInterval","updater","tryToDownloadUpdate","showBanner","e","debug","stack","stop","clearInterval","exports"],"mappings":"AAAA,IAAIA,KAAK,GAAGC,OAAO,CAAC,QAAD,CAAnB;;AACA,IAAIC,YAAY,GAAGD,OAAO,CAAC,2BAAD,CAA1B;;AACA,IAAIE,OAAO,GAAGF,OAAO,CAAC,uBAAD,CAAP,CAAiCE,OAA/C;;AAEA,IAAIC,OAAO,GAAG,YAAY;AACxB,MAAIC,IAAI,GAAG,IAAX;AACAA,EAAAA,IAAI,CAACC,KAAL,GAAa,IAAb;AACD,CAHD,C,CAKA;AACA;AACA;;;AACAC,MAAM,CAACC,MAAP,CAAcJ,OAAO,CAACK,SAAtB,EAAiC;AAC/BC,EAAAA,KAAK,EAAE,YAAY;AACjB,QAAIL,IAAI,GAAG,IAAX;;AAEA,QAAIA,IAAI,CAACC,KAAT,EAAgB;AACd,YAAM,IAAIK,KAAJ,CAAU,kBAAV,CAAN;AACD,KALgB,CAOjB;AACA;;;AACA,aAAeC,KAAf;AAAA,sCAAuB;AACrBP,QAAAA,IAAI,CAACQ,MAAL;AACD,OAFD;AAAA;;AAIAR,IAAAA,IAAI,CAACC,KAAL,GAAaQ,WAAW,CAACF,KAAD,EAAQ,IAAI,EAAJ,GAAS,EAAT,GAAc,IAAtB,CAAxB,CAbiB,CAejB;AACA;;AACAA,IAAAA,KAAK;AACN,GAnB8B;AAqB/BC,EAAAA,MAAM,EAAE,YAAY;AAClB,QAAIR,IAAI,GAAG,IAAX;;AACA,QAAIU,OAAO,GAAGd,OAAO,CAAC,yBAAD,CAArB;;AACA,QAAI;AACFc,MAAAA,OAAO,CAACC,mBAAR,CAA4B;AAACC,QAAAA,UAAU,EAAE;AAAb,OAA5B;AACD,KAFD,CAEE,OAAOC,CAAP,EAAU;AACV;AACA;AACAf,MAAAA,OAAO,CAACgB,KAAR,CAAc,uBAAd;AACAhB,MAAAA,OAAO,CAACgB,KAAR,CAAcD,CAAC,CAACE,KAAhB;AACA;AACD;AACF,GAjC8B;AAmC/B;AACA;AACAC,EAAAA,IAAI,EAAE,YAAY;AAChB,QAAIhB,IAAI,GAAG,IAAX;;AAEA,QAAIA,IAAI,CAACC,KAAT,EAAgB;AACd;AACD;;AACDgB,IAAAA,aAAa,CAACjB,IAAI,CAACC,KAAN,CAAb;AACAD,IAAAA,IAAI,CAACC,KAAL,GAAa,IAAb;AACD;AA7C8B,CAAjC;AAiDAiB,OAAO,CAACnB,OAAR,GAAkBA,OAAlB","sourcesContent":["var Fiber = require('fibers');\nvar fiberHelpers = require('../utils/fiber-helpers.js');\nvar Console = require('../console/console.js').Console;\n\nvar Updater = function () {\n  var self = this;\n  self.timer = null;\n};\n\n// XXX make it take a runLog?\n// XXX need to deal with updater writing messages (bypassing old\n// stdout interception.. maybe it should be global after all..)\nObject.assign(Updater.prototype, {\n  start: function () {\n    var self = this;\n\n    if (self.timer) {\n      throw new Error(\"already running?\");\n    }\n\n    // Check every 3 hours. (Should not share buildmessage state with\n    // the main fiber.)\n    async function check() {\n      self._check();\n    }\n\n    self.timer = setInterval(check, 3 * 60 * 60 * 1000);\n\n    // Also start a check now, but don't block on it. (This should\n    // not share buildmessage state with the main fiber.)\n    check();\n  },\n\n  _check: function () {\n    var self = this;\n    var updater = require('../packaging/updater.js');\n    try {\n      updater.tryToDownloadUpdate({showBanner: true});\n    } catch (e) {\n      // oh well, this was the background. Only show errors if we are in debug\n      // mode.\n      Console.debug(\"Error inside updater.\");\n      Console.debug(e.stack);\n      return;\n    }\n  },\n\n  // Returns immediately. However if an update check is currently\n  // running it will complete in the background. Idempotent.\n  stop: function () {\n    var self = this;\n\n    if (self.timer) {\n      return;\n    }\n    clearInterval(self.timer);\n    self.timer = null;\n  }\n});\n\n\nexports.Updater = Updater;\n"],"file":"tools/runners/run-updater.js.map"}