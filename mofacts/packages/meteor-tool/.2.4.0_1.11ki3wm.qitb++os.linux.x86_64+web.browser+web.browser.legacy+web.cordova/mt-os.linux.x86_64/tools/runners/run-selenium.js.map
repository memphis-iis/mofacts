{"version":3,"sources":["/tools/runners/run-selenium.js"],"names":["Fiber","require","files","runLog","utils","Selenium","options","self","driver","server","browserId","url","xunitOutputFile","runner","browser","xunitLines","MAGIC_PREFIX","DUMMY_FLUSH","Object","assign","prototype","start","Error","webdriver","capabilities","loggingPrefs","Capabilities","chrome","firefox","set","builder","Builder","withCapabilities","build","Promise","await","getSession","get","_pollLogs","err","log","run","stop","close","quit","_flushLogs","executeScript","_getLogs","manage","logs","_gotStateDone","writeFile","join","process","exit","_gotState","state","_gotMagicLog","facility","msg","push","_pollLogsOnce","forEach","message","regex","match","exec","JSON","stringify","indexOf","substring","length","colonIndex","sleepMs","exports"],"mappings":"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","sourcesContent":["var Fiber = require('fibers');\nvar files = require('../fs/files');\nvar runLog = require('./run-log.js');\nvar utils = require('../utils/utils.js');\n\n// options: runner url browserId xunitOutputFile\nvar Selenium = function (options) {\n  var self = this;\n  options = options || {};\n\n  self.driver = null;\n  self.server = null;\n\n  self.browserId = options.browserId || 'xunit';\n  self.url = options.url || 'http://localhost:3000/' + self.browserId;\n  self.xunitOutputFile = options.xunitOutputFile || 'test-results.xml';\n\n  self.runner = options.runner;\n  self.browser = options.browser || 'chrome';\n\n  self.xunitLines = null;\n};\n\n\n// The magic prefix for special log output\n// Must match packages/test-in-console/driver.js\nvar MAGIC_PREFIX = '##_meteor_magic##';\n\n// For some reason, we can't see the console.log output\n// unless we 'flush' it by sending another console.log via execute()\n// Note that this is actually a magic message, so we get it echoed back to us;\n// that's not necessary for this to work, but it keeps the output clean for users.\nvar DUMMY_FLUSH = MAGIC_PREFIX + \"flush: flush\";\n\nObject.assign(Selenium.prototype, {\n  // Start the selenium server, block (yield) until it is ready to go\n  // (actively listening on outer and proxying to inner), and then\n  // return.\n  start: function () {\n    var self = this;\n\n    if (self.server) {\n      throw new Error(\"already running?\");\n    }\n\n    self.xunitLines = [];\n\n    var webdriver = require('selenium-webdriver');\n\n    var capabilities;\n    var loggingPrefs;\n    if (self.browser === 'chrome') {\n      capabilities = webdriver.Capabilities.chrome();\n      loggingPrefs = {'browser': 'ALL'};\n    } else if (self.browser === 'firefox') {\n      capabilities = webdriver.Capabilities.firefox();\n      loggingPrefs = {'browser': 'ALL'};\n    } else {\n      throw new Error(\"Unhandled browser: \" + self.browser);\n    }\n\n    if (loggingPrefs) {\n      capabilities = capabilities.set('loggingPrefs', loggingPrefs);\n    }\n\n    var builder = new webdriver.Builder().withCapabilities(capabilities);\n    self.driver = builder.build();\n\n    Promise.await(self.driver.getSession());\n    Promise.await(self.driver.get(self.url));\n\n    Fiber(function () {\n      try {\n        self._pollLogs();\n      } catch (err) {\n        runLog.log(\"Log polling exited unexpectedly: \" + err);\n      }\n    }).run();\n  },\n\n  stop: function () {\n    var self = this;\n\n    if (! self.driver) {\n      return;\n    }\n\n    Promise.await(self.driver.close());\n    Promise.await(self.driver.quit());\n\n    self.driver = null;\n  },\n\n  _flushLogs: function () {\n    var self = this;\n    Promise.await(\n      self.driver.executeScript(\"console.log('\" + DUMMY_FLUSH + \"');\", [])\n    );\n  },\n\n  _getLogs: function () {\n    var self = this;\n\n    Promise.await(self.driver.manage().logs().get('browser'));\n  },\n\n  _gotStateDone: function () {\n    var self = this;\n\n    if (self.xunitOutputFile) {\n      runLog.log(\"Writing xunit output to: \" + self.xunitOutputFile);\n      files.writeFile(self.xunitOutputFile, self.xunitLines.join('\\n'));\n    }\n\n    if (self.runner) {\n      runLog.log(\"Shutting down in response to 'done' state\");\n      self.runner.stop();\n      process.exit(0);\n    }\n  },\n\n  _gotState: function (state) {\n    var self = this;\n\n    runLog.log(\"State -> \" + state);\n\n    if (state === \"done\") {\n      self._gotStateDone();\n    }\n  },\n\n  _gotMagicLog: function (facility, msg) {\n    var self = this;\n\n    if (facility === 'xunit') {\n      self.xunitLines.push(msg);\n    } else if (facility === 'state') {\n      self._gotState(msg);\n    } else if (facility === 'flush') {\n      // Ignore\n    } else {\n      runLog.log(\"Unknown magic: \" + facility + \": \" + msg);\n    }\n  },\n\n  _pollLogsOnce: function () {\n    var self = this;\n\n    self._flushLogs();\n    var logs = self._getLogs() || [];\n    logs.forEach(function (log) {\n      var msg = log.message;\n      var regex = /([^\\s]*)\\s*([^\\s]*)\\s*(.*)/i;\n      var match = regex.exec(msg);\n      if (!match) {\n        runLog.log(\"Unknown console.log message format: \" + JSON.stringify(log));\n        return;\n      }\n      msg = match[3];\n      if (msg === DUMMY_FLUSH) {\n        return;\n      }\n      if (msg.indexOf(MAGIC_PREFIX) === 0) {\n        msg = msg.substring(MAGIC_PREFIX.length);\n        var colonIndex = msg.indexOf(': ');\n        if (colonIndex === -1) {\n          self._gotMagicLog('', msg);\n        } else {\n          var facility = msg.substring(0, colonIndex);\n          msg = msg.substring(colonIndex + 2);\n          self._gotMagicLog(facility, msg);\n        }\n      } else {\n        runLog.log(msg);\n      }\n    });\n  },\n\n  _pollLogs: function () {\n    var self = this;\n\n    while (self.driver) {\n      try {\n        self._pollLogsOnce();\n      } catch (err) {\n        runLog.log(\"Error reading console log: \" + err);\n      }\n      utils.sleepMs(1000);\n    }\n  },\n});\n\nexports.Selenium = Selenium;\n"],"file":"tools/runners/run-selenium.js.map"}