{"version":3,"sources":["/tools/isobuild/package-namespace.js"],"names":["module","export","PackageNamespace","each","size","compact","link","v","inCheckout","buildmessage","default","packageVersionParser","constructor","packageSource","_packageSource","_fileAndDepLoader","_hasTests","describe","options","source","value","key","metadata","docsExplicitlyProvided","error","goodVersion","parsedVersion","getValidServerVersion","e","versionParserError","version","versionExplicitlyProvided","isTest","name","debugOnly","prodOnly","testOnly","deprecatedMessage","deprecated","onUse","f","useMyCaller","onTest","registerBuildPlugin","pluginInfo","match","includeTool"],"mappings":"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","sourcesContent":["import { each, size, compact } from \"underscore\";\nimport { inCheckout } from \"../fs/files\";\nimport buildmessage from \"../utils/buildmessage.js\";\nimport packageVersionParser from \"../packaging/package-version-parser.js\";\n\nexport class PackageNamespace {\n  /**\n   * @summary Class of the 'Package' object visible in package.js\n   * @locus package.js\n   * @instanceName Package\n   * @showInstanceName true\n   */\n  constructor(packageSource) {\n    this._packageSource = packageSource;\n    this._fileAndDepLoader = null;\n    this._hasTests = false;\n  }\n\n  // Set package metadata. Options:\n  // - summary: for 'meteor list' & package server\n  // - version: package version string\n  // There used to be a third option documented here,\n  // 'environments', but it was never implemented and no package\n  // ever used it.\n\n  /**\n   * @summary Provide basic package information.\n   * @locus package.js\n   * @memberOf PackageNamespace\n   * @param {Object} options\n   * @param {String} options.summary A concise 1-2 sentence description of\n   * the package, required for publication.\n   * @param {String} options.version The (extended)\n   * [semver](http://www.semver.org) version for your package. Additionally,\n   * Meteor allows a wrap number: a positive integer that follows the\n   * version number. If you are porting another package that uses semver\n   * versioning, you may want to use the original version, postfixed with\n   * `_wrapnumber`. For example, `1.2.3_1` or `2.4.5-rc1_4`. Wrap numbers\n   * sort after the original numbers: `1.2.3` < `1.2.3_1` < `1.2.3_2` <\n   * `1.2.4-rc.0`. If no version is specified, this field defaults to\n   * `0.0.0`. If you want to publish your package to the package server, you\n   * must specify a version.\n   * @param {String} options.name Optional name override. By default, the\n   * package name comes from the name of its directory.\n   * @param {String} options.git Optional Git URL to the source repository.\n   * @param {String} options.documentation Optional Filepath to\n   * documentation. Set to 'README.md' by default. Set this to null to submit\n   * no documentation.\n   * @param {Boolean} options.debugOnly A package with this flag set to true\n   * will not be bundled into production builds. This is useful for packages\n   * meant to be used in development only.\n   * @param {Boolean} options.prodOnly A package with this flag set to true\n   * will ONLY be bundled into production builds.\n   * @param {Boolean} options.testOnly A package with this flag set to true\n   * will ONLY be bundled as part of `meteor test`.\n   * @param {Boolean|String} options.deprecated A flag that will mark the\n   * package as deprecated. Provide string to override the default message.\n   */\n  describe(options) {\n    const source = this._packageSource;\n\n    each(options, function (value, key) {\n      if (key === \"summary\" ||\n          key === \"git\") {\n        source.metadata[key] = value;\n      } else if (key === \"documentation\") {\n        source.metadata[key] = value;\n        source.docsExplicitlyProvided = true;\n      } else if (key === \"version\") {\n        if (typeof(value) !== \"string\") {\n          buildmessage.error(\"The package version (specified with \"\n                             + \"Package.describe) must be a string.\");\n          // Recover by pretending that version was not set.\n        } else {\n          var goodVersion = true;\n          try {\n            var parsedVersion =\n              packageVersionParser.getValidServerVersion(value);\n          } catch (e) {\n            if (!e.versionParserError) {\n              throw e;\n            }\n            buildmessage.error(\n              \"The package version \" + value + \" (specified with Package.describe) \"\n                + \"is not a valid Meteor package version.\\n\"\n                + \"Valid package versions are semver (see http://semver.org/), \"\n                + \"optionally followed by '_' and an integer greater or equal to 1.\");\n            goodVersion = false;\n          }\n          // Recover by pretending that the version was not set.\n        }\n        if (goodVersion && parsedVersion !== value) {\n          buildmessage.error(\n            \"The package version (specified with Package.describe) may not \"\n              + \"contain a plus-separated build ID.\");\n          // Recover by pretending that the version was not set.\n          goodVersion = false;\n        }\n        if (goodVersion) {\n          source.version = value;\n          source.versionExplicitlyProvided = true;\n        }\n      } else if (key === \"name\" && ! source.isTest) {\n        if (! source.name) {\n          source.name = value;\n        } else if (source.name !== value) {\n          // Woah, so we requested a non-test package by name, and it is not\n          // the name that we find inside. That's super weird.\n          buildmessage.error(\n            \"trying to initialize a nonexistent base package \" + value);\n        }\n\n      // `debugOnly`, `prodOnly` and `testOnly` are boolean\n      // flags you can put on a package, currently undocumented.\n      // when set to true, they cause a package's code to be\n      // only included (i.e. linked into the bundle) in dev\n      // mode, prod mode (`meteor --production`) or app tests\n      // (`meteor test`), and excluded otherwise.\n      //\n      // Notes:\n      //\n      // * These flags do not affect which packages or which versions are\n      //   are selected by the version solver.\n      //\n      // * When you use a debugOnly, prodOnly or testOnly\n      //   package, its exports are not imported for you.  You\n      //   have to access them using\n      //   `Package[\"my-package\"].MySymbol`.\n      //\n      // * These flags CAN cause different package load orders in\n      //   development and production!  We should probably fix this.\n      //   Basically, packages that are excluded from the build using\n      //   these flags are also excluded from the build order calculation,\n      //   and that's the problem\n      //\n      // * We should consider publicly documenting these flags, since they\n      //   are effectively part of the public API.\n      } else if (key === \"debugOnly\") {\n        source.debugOnly = !!value;\n      } else if (key === \"prodOnly\") {\n        source.prodOnly = !!value;\n      } else if (key === \"testOnly\") {\n        source.testOnly = !!value;\n      } else if (key === \"deprecated\") {\n        if (typeof(value) === \"string\") {\n          source.deprecatedMessage = value;\n        }\n        source.deprecated = !!value;\n      } else {\n        // Do nothing. We might want to add some keys later, and we should err\n        // on the side of backwards compatibility.\n      }\n      if (size(compact([source.debugOnly, source.prodOnly, source.testOnly])) > 1) {\n        buildmessage.error(\n          \"Package can't have more than one of: debugOnly, prodOnly, testOnly.\");\n      }\n    });\n  }\n\n  /**\n   * @summary Define package dependencies and expose package methods.\n   * @locus package.js\n   * @param {Function} func A function that takes in the package control `api` object, which keeps track of dependencies and exports.\n   */\n  onUse(f) {\n    if (! this._packageSource.isTest) {\n      if (this._fileAndDepLoader) {\n        buildmessage.error(\"duplicate onUse handler; a package may have \" +\n                           \"only one\", { useMyCaller: true });\n        // Recover by ignoring the duplicate\n        return;\n      }\n\n      this._fileAndDepLoader = f;\n    }\n  }\n\n  /**\n   * @summary Define dependencies and expose package methods for unit tests.\n   * @locus package.js\n   * @param {Function} func A function that takes in the package control 'api' object, which keeps track of dependencies and exports.\n   */\n  onTest(f) {\n    const isTest = this._packageSource.isTest;\n\n    // If we are not initializing the test package, then we are initializing\n    // the normal package and have now noticed that it has tests. So, let's\n    // register the test. This is a medium-length hack until we have new\n    // control files.\n    if (! isTest) {\n      this._hasTests = true;\n      return;\n    }\n\n    // We are initializing the test, so proceed as normal.\n    if (isTest) {\n      if (this._fileAndDepLoader) {\n        buildmessage.error(\"duplicate onTest handler; a package may have \" +\n                           \"only one\", { useMyCaller: true });\n        // Recover by ignoring the duplicate\n        return;\n      }\n\n      this._fileAndDepLoader = f;\n    }\n  }\n\n  // Define a plugin. A plugin extends the build process for\n  // targets that use this package. For example, a Coffeescript\n  // compiler would be a plugin. A plugin is its own little\n  // program, with its own set of source files, used packages, and\n  // npm dependencies.\n  //\n  // This is an experimental API and for now you should assume\n  // that it will change frequently and radically (thus the\n  // '_transitional_'). For maximum R&D velocity and for the good\n  // of the platform, we will push changes that break your\n  // packages that use this API. You've been warned.\n  //\n  // Options:\n  // - name: a name for this plugin. required (cosmetic -- string)\n  // - use: package to use for the plugin (names, as strings)\n  // - sources: sources for the plugin (array of string)\n  // - npmDependencies: map from npm package name to required\n  //   version (string)\n\n  /**\n   * @summary Define a build plugin. A build plugin extends the build\n   * process for apps and packages that use this package. For example,\n   * the `coffeescript` package uses a build plugin to compile CoffeeScript\n   * source files into JavaScript.\n   * @param  {Object} [options]\n   * @param {String} options.name A cosmetic name, must be unique in the\n   * package.\n   * @param {String|String[]} options.use Meteor packages that this\n   * plugin uses, independent of the packages specified in\n   * [api.onUse](#pack_onUse).\n   * @param {String[]} options.sources The source files that make up the\n   * build plugin, independent from [api.addFiles](#pack_addFiles).\n   * @param {Object} options.npmDependencies An object where the keys\n   * are NPM package names, and the values are the version numbers of\n   * required NPM packages, just like in [Npm.depends](#Npm-depends).\n   * @locus package.js\n   */\n  registerBuildPlugin(options) {\n    const isTest = this._packageSource.isTest;\n\n    // Tests don't have plugins; plugins initialized in the control file\n    // belong to the package and not to the test. (This will be less\n    // confusing in the new control file format).\n    if (isTest) {\n      return;\n    }\n\n    if (! ('name' in options)) {\n      buildmessage.error(\"build plugins require a name\",\n                         { useMyCaller: true });\n      // recover by ignoring plugin\n      return;\n    }\n\n    const pluginInfo = this._packageSource.pluginInfo;\n\n    if (options.name in pluginInfo) {\n      buildmessage.error(\"this package already has a plugin named '\" +\n                         options.name + \"'\",\n                         { useMyCaller: true });\n      // recover by ignoring plugin\n      return;\n    }\n\n    if (options.name.match(/\\.\\./) ||\n        options.name.match(/[\\\\\\/]/)) {\n      buildmessage.error(\"bad plugin name\", { useMyCaller: true });\n      // recover by ignoring plugin\n      return;\n    }\n\n    // XXX probably want further type checking\n    pluginInfo[options.name] = options;\n  }\n\n  includeTool() {\n    const source = this._packageSource;\n    if (! inCheckout()) {\n      buildmessage.error(\"Package.includeTool() can only be used with a \" +\n                         \"checkout of meteor\");\n    } else if (source.includeTool) {\n      buildmessage.error(\"Duplicate includeTool call\");\n    } else {\n      source.includeTool = true;\n    }\n  }\n}\n"],"file":"tools/isobuild/package-namespace.js.map"}