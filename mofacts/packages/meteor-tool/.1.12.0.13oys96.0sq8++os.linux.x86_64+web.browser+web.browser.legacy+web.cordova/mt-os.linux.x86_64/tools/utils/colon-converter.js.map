{"version":3,"sources":["/tools/utils/colon-converter.js"],"names":["_","require","convertBySchema","val","schema","convert","isArray","length","Error","map","subval","isObject","ret","clone","each","subschema","key","has","path","replace","ISOPACK_SCHEME","builds","plugins","UNIBUILD_SCHEME","node_modules","resources","file","sourceMap","servePath","JAVASCRIPT_IMAGE_SCHEME","load","sourceMapRoot","exports","convertIsopack","data","convertUnibuild","convertJSImage"],"mappings":"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","sourcesContent":["var _ = require('underscore');\n\n// schema - Object, representing paths to correct. Ex.:\n// {\n//   format: false,\n//   arch: false,\n//   load: [\n//     {\n//       node_modulus: true,\n//       sourceMap: true,\n//       sourceMapRoot: true,\n//       path: true\n//     }\n//   ]\n// }\nvar convertBySchema = function (val, schema) {\n  if (schema === true) {\n    return convert(val);\n  } else if (schema === false) {\n    return val;\n  }\n\n  if (_.isArray(schema)) {\n    if (schema.length !== 1) {\n      throw new Error(\"Expected an array with one element in schema\");\n    }\n\n    if (! _.isArray(val)) {\n      throw new Error(\"Expected an array in value, got \" + typeof val);\n    }\n\n    return _.map(val, function (subval) {\n      return convertBySchema(subval, schema[0]);\n    });\n  }\n\n  if (! _.isObject(schema)) {\n    throw new Error(\"Unexpected type of schema: \" + typeof(schema));\n  }\n\n  var ret = _.clone(val);\n  _.each(schema, function (subschema, key) {\n    if (_.has(ret, key)) {\n      ret[key] = convertBySchema(val[key], subschema);\n    }\n  });\n\n  return ret;\n};\n\nvar convert = function (path) {\n  return path.replace(/:/g, '_');\n};\n\nvar ISOPACK_SCHEME = {\n  builds: [{\n    path: true\n  }],\n  plugins: [{\n    path: true\n  }]\n};\n\nvar UNIBUILD_SCHEME = {\n  node_modules: true,\n  resources: [{\n    file: true,\n    sourceMap: true,\n    servePath: true\n  }]\n};\n\nvar JAVASCRIPT_IMAGE_SCHEME = {\n  load: [{\n    sourceMap: true,\n    sourceMapRoot: true,\n    path: true,\n    node_modules: true\n  }]\n};\n\nexports.convertIsopack = function (data) {\n  return convertBySchema(data, ISOPACK_SCHEME);\n};\n\nexports.convertUnibuild = function (data) {\n  return convertBySchema(data, UNIBUILD_SCHEME);\n};\n\nexports.convertJSImage = function (data) {\n  return convertBySchema(data, JAVASCRIPT_IMAGE_SCHEME);\n};\n\nexports.convert = convert;\n\n"],"file":"tools/utils/colon-converter.js.map"}