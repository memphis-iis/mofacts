{"version":3,"sources":["tools/utils/eachline.ts"],"names":[],"mappings":"AAAA,MAAM,CAAA,MAAN,CAAc;AAAA,EAAA,QAAQ,EAAA,MAAA,QAAR;AAAkB,EAAA,SAAA,EAAA,MAAA;AAAlB,CAAd;AAAgC,IAAA,SAAA;AAAA,MAAA,CAAA,IAAA,CAAA,QAAA,EAAA;AAAA,EAAA,SAAA,CAAA,CAAA,EAAA;AAAA,IAAA,SAAA,GAAA,CAAA;AAAA;;AAAA,CAAA,EAAA,CAAA;;AAAhC,MAAM,KAAK,GAAG,OAAO,CAAC,QAAD,CAArB;;AACA,MAAM,IAAI,GAAG,OAAO,CAAC,WAAD,CAApB;;AAMM,SAAU,QAAV,CAAmB,MAAnB,EAAmC,QAAnC,EAA4D;AAChE,EAAA,MAAM,CAAC,IAAP,CAAY,SAAS,CAAC,QAAD,CAArB;AACD;;AAEK,SAAU,SAAV,CAAoB,QAApB,EAA6C;AACjD,QAAM,WAAW,GAAG,KAAK,CAAC,OAAD,EAAU,IAAV,EAAgB;AACvC,IAAA,QAAQ,EAAE;AAD6B,GAAhB,CAAzB;AAIA,QAAM,SAAS,GAAG,IAAI,SAAJ,EAAlB;;AAEA,EAAA,SAAS,CAAC,UAAV,GAAuB,UAAgB,KAAhB,EAAuB,SAAvB,EAAkC,IAAlC;AAAA,oCAAsC;AAC3D,UAAI,IAAI,GAAG,KAAK,CAAC,QAAN,CAAe,MAAf,CAAX;;AACA,UAAI;AACF,QAAA,IAAI,iBAAS,QAAQ,CAAC,IAAD,CAAjB,CAAJ;AACD,OAFD,CAEE,OAAO,KAAP,EAAc;AACd,QAAA,IAAI,CAAC,KAAD,CAAJ;AACA;AACD;;AACD,MAAA,IAAI,CAAC,IAAD,EAAO,IAAP,CAAJ;AACD,KATsB;AAAA,GAAvB;;AAWA,SAAO,IAAI,CACT,WADS,EAET,SAFS,CAAX;AAID","sourcesContent":["const split = require(\"split2\");\nconst pipe = require(\"multipipe\");\n\nimport { Transform, Stream } from \"stream\";\n\ntype LineTransformer = (line: string) => string | Promise<string>\n\nexport function eachline(stream: Stream, callback: LineTransformer) {\n  stream.pipe(transform(callback));\n}\n\nexport function transform(callback: LineTransformer) {\n  const splitStream = split(/\\r?\\n/, null, {\n    trailing: false\n  });\n\n  const transform = new Transform();\n\n  transform._transform = async function (chunk, _encoding, done) {\n    let line = chunk.toString(\"utf8\");\n    try {\n      line = await callback(line);\n    } catch (error) {\n      done(error);\n      return;\n    }\n    done(null, line);\n  };\n\n  return pipe(\n    splitStream,\n    transform,\n  );\n}\n"],"sourceRoot":"","file":"tools/utils/eachline.js.map"}