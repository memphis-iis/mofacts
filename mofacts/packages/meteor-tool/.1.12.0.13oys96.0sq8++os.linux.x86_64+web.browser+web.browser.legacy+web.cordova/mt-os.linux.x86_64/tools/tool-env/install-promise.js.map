{"version":3,"sources":["/tools/tool-env/install-promise.js"],"names":["require","Promise","global","makeCompatible","newPromise","Object","defineProperty","get","set"],"mappings":"AAAA;AACA;AACA;AACA;AACAA,OAAO,CAAC,kBAAD,CAAP,C,CAEA;AACA;;;AAEA,MAAM;AAAEC,EAAAA;AAAF,IAAcC,MAApB;;AAEA,SAASC,cAAT,CAAwBC,UAAxB,EAAoC;AAClCJ,EAAAA,OAAO,CAAC,gBAAD,CAAP,CAA0BG,cAA1B,CACEC,UADF,EAEEJ,OAAO,CAAC,QAAD,CAFT;AAID;;AAEDG,cAAc,CAACF,OAAD,CAAd;AAEAI,MAAM,CAACC,cAAP,CAAsBJ,MAAtB,EAA8B,SAA9B,EAAyC;AACvCK,EAAAA,GAAG,EAAE,YAAY;AACf,WAAON,OAAP;AACD,GAHsC;AAKvC;AACA;AACAO,EAAAA,GAAG,EAAEL;AAPkC,CAAzC","sourcesContent":["// It's vitally important that we wrap Fiber.yield and other yielding\n// methods before we call makeCompatible, because the meteor-promise\n// implementation captures Fiber.yield and keeps calling the captured\n// version, which ignores any wrapping that happens later.\nrequire(\"./wrap-fibers.js\");\n\n// Ensure the global Promise constructor knows how to run all its\n// callbacks in Fibers.\n\nconst { Promise } = global;\n\nfunction makeCompatible(newPromise) {\n  require(\"meteor-promise\").makeCompatible(\n    newPromise,\n    require(\"fibers\")\n  );\n}\n\nmakeCompatible(Promise);\n\nObject.defineProperty(global, \"Promise\", {\n  get: function () {\n    return Promise;\n  },\n\n  // Make the new Promise compatible with Fibers, but do not allow further\n  // modifications to global.Promise, e.g. by misbehaving polyfills.\n  set: makeCompatible\n});\n"],"file":"tools/tool-env/install-promise.js.map"}