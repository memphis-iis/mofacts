{"version":3,"sources":["/tools/isobuild/compiler-deprecated-compile-step.js"],"names":["_","require","archinfo","buildmessage","files","colonConverter","watch","convertSourceMapPaths","sourcemap","f","srcmap","JSON","parse","sources","map","stringify","exports","makeCompileStep","sourceItem","file","inputSourceArch","options","resources","addAsset","relPath","fileOptions","clone","absPath","pathResolve","pkg","sourceRoot","filename","pathBasename","hash","contents","readOffset","compileStep","inputSize","length","inputPath","convertToOSPath","fullInputPath","_fullInputPath","_hash","pathForSourceMap","name","packageName","rootOutputPath","serveRoot","arch","archMatches","pattern","matches","declaredExports","pluck","read","n","undefined","ret","slice","_getOption","has","addHtml","Error","section","data","push","type","Buffer","from","convertToStandardLineEndings","lazy","appendDocument","addStylesheet","refreshable","servePath","convert","pathJoin","convertToStandardPath","path","sourceMap","addJavaScript","sourcePath","targetPath","sha1","bare","mainModule","isString","error","message","info","line","column","func"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AAEA,MAAIA,CAAC,GAAGC,OAAO,CAAC,YAAD,CAAf;;AAEA,MAAIC,QAAQ,GAAGD,OAAO,CAAC,mBAAD,CAAtB;;AACA,MAAIE,YAAY,GAAGF,OAAO,CAAC,0BAAD,CAA1B;;AACA,MAAIG,KAAK,GAAGH,OAAO,CAAC,aAAD,CAAnB;;AACA,MAAII,cAAc,GAAGJ,OAAO,CAAC,6BAAD,CAA5B;;AACA,MAAIK,KAAK,GAAGL,OAAO,CAAC,aAAD,CAAnB;;AAEA,MAAIM,qBAAqB,GAAG,UAAUC,SAAV,EAAqBC,CAArB,EAAwB;AAClD,QAAI,CAAED,SAAN,EAAiB;AACf;AACA,aAAOA,SAAP;AACD;;AAED,QAAIE,MAAM,GAAGC,IAAI,CAACC,KAAL,CAAWJ,SAAX,CAAb;AACAE,IAAAA,MAAM,CAACG,OAAP,GAAiBb,CAAC,CAACc,GAAF,CAAMJ,MAAM,CAACG,OAAb,EAAsBJ,CAAtB,CAAjB;AACA,WAAOE,IAAI,CAACI,SAAL,CAAeL,MAAf,CAAP;AACD,GATD;;AAWAM,EAAAA,OAAO,CAACC,eAAR,GAA0B,UAAUC,UAAV,EAAsBC,IAAtB,EAA4BC,eAA5B,EAA6CC,OAA7C,EAAsD;AAC9E,QAAIC,SAAS,GAAGD,OAAO,CAACC,SAAxB;AACA,QAAIC,QAAQ,GAAGF,OAAO,CAACE,QAAvB;AAEA,QAAIC,OAAO,GAAGN,UAAU,CAACM,OAAzB;AACA,QAAIC,WAAW,GAAGzB,CAAC,CAAC0B,KAAF,CAAQR,UAAU,CAACO,WAAnB,KAAmC,EAArD;AACA,QAAIE,OAAO,GAAGvB,KAAK,CAACwB,WAAN,CAAkBR,eAAe,CAACS,GAAhB,CAAoBC,UAAtC,EAAkDN,OAAlD,CAAd;AACA,QAAIO,QAAQ,GAAG3B,KAAK,CAAC4B,YAAN,CAAmBR,OAAnB,CAAf;AACA,QAAIS,IAAI,GAAGd,IAAI,CAACc,IAAhB;AACA,QAAIC,QAAQ,GAAGf,IAAI,CAACe,QAApB,CAT8E,CAW9E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,QAAIC,UAAU,GAAG,CAAjB;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;;AACE,QAAIC,WAAW,GAAG;AAEhB;AACJ;AACA;AACA;AACA;AACA;AACIC,MAAAA,SAAS,EAAEH,QAAQ,CAACI,MARJ;;AAUhB;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,MAAAA,SAAS,EAAEnC,KAAK,CAACoC,eAAN,CAAsBhB,OAAtB,EAA+B,IAA/B,CAlBK;;AAoBhB;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACIiB,MAAAA,aAAa,EAAErC,KAAK,CAACoC,eAAN,CAAsBb,OAAtB,CA5BC;AA8BhB;AACA;AACAe,MAAAA,cAAc,EAAEtC,KAAK,CAACoC,eAAN,CAAsBb,OAAtB,CAhCA;AAgCgC;AAEhD;AACAgB,MAAAA,KAAK,EAAEV,IAnCS;AAqChB;;AACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACIW,MAAAA,gBAAgB,EAAExC,KAAK,CAACoC,eAAN,CAChBpB,eAAe,CAACS,GAAhB,CAAoBgB,IAApB,GAA4BzB,eAAe,CAACS,GAAhB,CAAoBgB,IAApB,GAA2B,GAA3B,GAAiCrB,OAA7D,GAC4BpB,KAAK,CAAC4B,YAAN,CAAmBR,OAAnB,CAFZ,EAEyC,IAFzC,CA7CF;AAiDhB;AA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","sourcesContent":["// This file contains an old definition of CompileStep, an object that is passed\n// to the package-provided file handler.\n// Since then, the newer API called \"Batch Plugins\" have replaced it but we keep\n// the functionality for the backwards-compitability.\n// @deprecated\n// XXX COMPAT WITH 1.1.0.2\n\nvar _ = require('underscore');\n\nvar archinfo = require('../utils/archinfo');\nvar buildmessage = require('../utils/buildmessage.js');\nvar files = require('../fs/files');\nvar colonConverter = require('../utils/colon-converter.js');\nvar watch = require('../fs/watch');\n\nvar convertSourceMapPaths = function (sourcemap, f) {\n  if (! sourcemap) {\n    // Don't try to convert it if it doesn't exist\n    return sourcemap;\n  }\n\n  var srcmap = JSON.parse(sourcemap);\n  srcmap.sources = _.map(srcmap.sources, f);\n  return JSON.stringify(srcmap);\n};\n\nexports.makeCompileStep = function (sourceItem, file, inputSourceArch, options) {\n  var resources = options.resources;\n  var addAsset = options.addAsset;\n\n  var relPath = sourceItem.relPath;\n  var fileOptions = _.clone(sourceItem.fileOptions) || {};\n  var absPath = files.pathResolve(inputSourceArch.pkg.sourceRoot, relPath);\n  var filename = files.pathBasename(relPath);\n  var hash = file.hash;\n  var contents = file.contents;\n\n  // This object is called a #CompileStep and it's the interface\n  // to plugins that define new source file handlers (eg,\n  // Coffeescript).\n  //\n  // Fields on CompileStep:\n  //\n  // - arch: the architecture for which we are building\n  // - inputSize: total number of bytes in the input file\n  // - inputPath: the filename and (relative) path of the input\n  //   file, eg, \"foo.js\". We don't provide a way to get the full\n  //   path because you're not supposed to read the file directly\n  //   off of disk. Instead you should call read(). That way we\n  //   can ensure that the version of the file that you use is\n  //   exactly the one that is recorded in the dependency\n  //   information.\n  // - pathForSourceMap: If this file is to be included in a source map,\n  //   this is the name you should use for it in the map.\n  // - rootOutputPath: on web targets, for resources such as\n  //   stylesheet and static assets, this is the root URL that\n  //   will get prepended to the paths you pick for your output\n  //   files so that you get your own namespace, for example\n  //   '/packages/foo'. null on non-web targets\n  // - fileOptions: any options passed to \"api.addFiles\"; for\n  //   use by the plugin. The built-in \"js\" plugin uses the \"bare\"\n  //   option for files that shouldn't be wrapped in a closure.\n  // - declaredExports: An array of symbols exported by this unibuild, or null\n  //   if it may not export any symbols (eg, test unibuilds). This is used by\n  //   CoffeeScript to ensure that it doesn't close over those symbols, eg.\n  // - read(n): read from the input file. If n is given it should\n  //   be an integer, and you will receive the next n bytes of the\n  //   file as a Buffer. If n is omitted you get the rest of the\n  //   file.\n  // - appendDocument({ section: \"head\", data: \"my markup\" })\n  //   Browser targets only. Add markup to the \"head\" or \"body\"\n  //   Web targets only. Add markup to the \"head\" or \"body\"\n  //   section of the document.\n  // - addStylesheet({ path: \"my/stylesheet.css\", data: \"my css\",\n  //                   sourceMap: \"stringified json sourcemap\"})\n  //   Web targets only. Add a stylesheet to the\n  //   document. 'path' is a requested URL for the stylesheet that\n  //   may or may not ultimately be honored. (Meteor will add\n  //   appropriate tags to cause the stylesheet to be loaded. It\n  //   will be subject to any stylesheet processing stages in\n  //   effect, such as minification.)\n  // - addJavaScript({ path: \"my/program.js\", data: \"my code\",\n  //                   sourcePath: \"src/my/program.js\",\n  //                   bare: true })\n  //   Add JavaScript code, which will be namespaced into this\n  //   package's environment (eg, it will see only the exports of\n  //   this package's imports), and which will be subject to\n  //   minification and so forth. Again, 'path' is merely a hint\n  //   that may or may not be honored. 'sourcePath' is the path\n  //   that will be used in any error messages generated (eg,\n  //   \"foo.js:4:1: syntax error\"). It must be present and should\n  //   be relative to the project root. Typically 'inputPath' will\n  //   do handsomely. \"bare\" means to not wrap the file in\n  //   a closure, so that its vars are shared with other files\n  //   in the module.\n  // - addAsset({ path: \"my/image.png\", data: Buffer })\n  //   Add a file to serve as-is over HTTP (web targets) or\n  //   to include as-is in the bundle (os targets).\n  //   This time `data` is a Buffer rather than a string. For\n  //   web targets, it will be served at the exact path you\n  //   request (concatenated with rootOutputPath). For server\n  //   targets, the file can be retrieved by passing path to\n  //   Assets.getText or Assets.getBinary.\n  // - error({ message: \"There's a problem in your source file\",\n  //           sourcePath: \"src/my/program.ext\", line: 12,\n  //           column: 20, func: \"doStuff\" })\n  //   Flag an error -- at a particular location in a source\n  //   file, if you like (you can even indicate a function name\n  //   to show in the error, like in stack traces). sourcePath,\n  //   line, column, and func are all optional.\n  //\n  // XXX for now, these handlers must only generate portable code\n  // (code that isn't dependent on the arch, other than 'web'\n  // vs 'os') -- they can look at the arch that is provided\n  // but they can't rely on the running on that particular arch\n  // (in the end, an arch-specific unibuild will be emitted only if\n  // there are native node modules). Obviously this should\n  // change. A first step would be a setOutputArch() function\n  // analogous to what we do with native node modules, but maybe\n  // what we want is the ability to ask the plugin ahead of time\n  // how specific it would like to force unibuilds to be.\n  //\n  // XXX we handle encodings in a rather cavalier way and I\n  // suspect we effectively end up assuming utf8. We can do better\n  // than that!\n  //\n  // XXX addAsset probably wants to be able to set MIME type and\n  // also control any manifest field we deem relevant (if any)\n  //\n  // XXX Some handlers process languages that have the concept of\n  // include files. These are problematic because we need to\n  // somehow instrument them to get the names and hashs of all of\n  // the files that they read for dependency tracking purposes. We\n  // don't have an API for that yet, so for now we provide a\n  // workaround, which is that _fullInputPath contains the full\n  // absolute path to the input files, which allows such a plugin\n  // to set up its include search path. It's then on its own for\n  // registering dependencies (for now..)\n  //\n  // XXX in the future we should give plugins an easy and clean\n  // way to return errors (that could go in an overall list of\n  // errors experienced across all files)\n  var readOffset = 0;\n\n  /**\n   * The comments for this class aren't used to generate docs right now.\n   * The docs live in the GitHub Wiki at: https://github.com/meteor/meteor/wiki/CompileStep-API-for-Build-Plugin-Source-Handlers\n   * @class CompileStep\n   * @summary The object passed into Plugin.registerSourceHandler\n   * @global\n   */\n  var compileStep = {\n\n    /**\n     * @summary The total number of bytes in the input file.\n     * @memberOf CompileStep\n     * @instance\n     * @type {Integer}\n     */\n    inputSize: contents.length,\n\n    /**\n     * @summary The filename and relative path of the input file.\n     * Please don't use this filename to read the file from disk, instead\n     * use [compileStep.read](CompileStep-read).\n     * @type {String}\n     * @instance\n     * @memberOf CompileStep\n     */\n    inputPath: files.convertToOSPath(relPath, true),\n\n    /**\n     * @summary The filename and absolute path of the input file.\n     * Please don't use this filename to read the file from disk, instead\n     * use [compileStep.read](CompileStep-read).\n     * @type {String}\n     * @instance\n     * @memberOf CompileStep\n     */\n    fullInputPath: files.convertToOSPath(absPath),\n\n    // The below is used in the less and stylus packages... so it should be\n    // public API.\n    _fullInputPath: files.convertToOSPath(absPath), // avoid, see above..\n\n    // Used for one optimization. Don't rely on this otherwise.\n    _hash: hash,\n\n    // XXX duplicates _pathForSourceMap() in linker\n    /**\n     * @summary If you are generating a sourcemap for the compiled file, use\n     * this path for the original file in the sourcemap.\n     * @type {String}\n     * @memberOf CompileStep\n     * @instance\n     */\n    pathForSourceMap: files.convertToOSPath(\n      inputSourceArch.pkg.name ?  inputSourceArch.pkg.name + \"/\" + relPath :\n                                  files.pathBasename(relPath), true),\n\n    // null if this is an app. intended to be used for the sources\n    // dictionary for source maps.\n    /**\n     * @summary The name of the package in which the file being built exists.\n     * @type {String}\n     * @memberOf CompileStep\n     * @instance\n     */\n    packageName: inputSourceArch.pkg.name,\n\n    /**\n     * @summary On web targets, this will be the root URL prepended\n     * to the paths you pick for your output files. For example,\n     * it could be \"/packages/my-package\".\n     * @type {String}\n     * @memberOf CompileStep\n     * @instance\n     */\n    rootOutputPath: files.convertToOSPath(\n      inputSourceArch.pkg.serveRoot, true),\n\n    /**\n     * @summary The architecture for which we are building. Can be \"os\",\n     * \"web.browser\", or \"web.cordova\".\n     * @type {String}\n     * @memberOf CompileStep\n     * @instance\n     */\n    arch: inputSourceArch.arch,\n\n    /**\n     * @deprecated in 0.9.4\n     * This is a duplicate API of the above, we don't need it.\n     */\n    archMatches: function (pattern) {\n      return archinfo.matches(inputSourceArch.arch, pattern);\n    },\n\n    /**\n     * @summary Any options passed to \"api.addFiles\".\n     * @type {Object}\n     * @memberOf CompileStep\n     * @instance\n     */\n    fileOptions: fileOptions,\n\n    /**\n     * @summary The list of exports that the current package has defined.\n     * Can be used to treat those symbols differently during compilation.\n     * @type {Object}\n     * @memberOf CompileStep\n     * @instance\n     */\n    declaredExports: _.pluck(inputSourceArch.declaredExports, 'name'),\n\n    /**\n     * @summary Read from the input file. If `n` is specified, returns the\n     * next `n` bytes of the file as a Buffer. XXX not sure if this actually\n     * returns a String sometimes...\n     * @param  {Integer} [n] The number of bytes to return.\n     * @instance\n     * @memberOf CompileStep\n     * @returns {Buffer}\n     */\n    read: function (n) {\n      if (n === undefined || readOffset + n > contents.length) {\n        n = contents.length - readOffset;\n      }\n      var ret = contents.slice(readOffset, readOffset + n);\n      readOffset += n;\n      return ret;\n    },\n\n    _getOption(name, options) {\n      if (options && _.has(options, name)) {\n        return options[name];\n      }\n      const fileOptions = this.fileOptions;\n      return fileOptions && fileOptions[name];\n    },\n\n    /**\n     * @summary Works in web targets only. Add markup to the `head` or `body`\n     * section of the document.\n     * @param  {Object} options\n     * @param {String} options.section Which section of the document should\n     * be appended to. Can only be \"head\" or \"body\".\n     * @param {String} options.data The content to append.\n     * @memberOf CompileStep\n     * @instance\n     */\n    addHtml: function (options) {\n      if (! archinfo.matches(inputSourceArch.arch, \"web\")) {\n        throw new Error(\"Document sections can only be emitted to \" +\n                        \"web targets\");\n      }\n      if (options.section !== \"head\" && options.section !== \"body\") {\n        throw new Error(\"'section' must be 'head' or 'body'\");\n      }\n      if (typeof options.data !== \"string\") {\n        throw new Error(\"'data' option to appendDocument must be a string\");\n      }\n      resources.push({\n        type: options.section,\n        data: Buffer.from(files.convertToStandardLineEndings(options.data), 'utf8'),\n        lazy: this._getOption(\"lazy\", options),\n      });\n    },\n\n    /**\n     * @deprecated in 0.9.4\n     */\n    appendDocument: function (options) {\n      this.addHtml(options);\n    },\n\n    /**\n     * @summary Web targets only. Add a stylesheet to the document.\n     * @param {Object} options\n     * @param {String} path The requested path for the added CSS, may not be\n     * satisfied if there are path conflicts.\n     * @param {String} data The content of the stylesheet that should be\n     * added.\n     * @param {String} sourceMap A stringified JSON sourcemap, in case the\n     * stylesheet was generated from a different file.\n     * @memberOf CompileStep\n     * @instance\n     */\n    addStylesheet: function (options) {\n      if (! archinfo.matches(inputSourceArch.arch, \"web\")) {\n        throw new Error(\"Stylesheets can only be emitted to \" +\n                        \"web targets\");\n      }\n      if (typeof options.data !== \"string\") {\n        throw new Error(\"'data' option to addStylesheet must be a string\");\n      }\n      resources.push({\n        type: \"css\",\n        refreshable: true,\n        data: Buffer.from(files.convertToStandardLineEndings(options.data), 'utf8'),\n        servePath: colonConverter.convert(\n          files.pathJoin(\n            inputSourceArch.pkg.serveRoot,\n            files.convertToStandardPath(options.path, true))),\n        sourceMap: convertSourceMapPaths(options.sourceMap,\n                                         files.convertToStandardPath),\n        lazy: this._getOption(\"lazy\", options),\n      });\n    },\n\n    /**\n     * @summary Add JavaScript code. The code added will only see the\n     * namespaces imported by this package as runtime dependencies using\n     * ['api.use'](#PackageAPI-use). If the file being compiled was added\n     * with the bare flag, the resulting JavaScript won't be wrapped in a\n     * closure.\n     * @param {Object} options\n     * @param {String} options.path The path at which the JavaScript file\n     * should be inserted, may not be honored in case of path conflicts.\n     * @param {String} options.data The code to be added.\n     * @param {String} options.sourcePath The path that will be used in\n     * any error messages generated by this file, e.g. `foo.js:4:1: error`.\n     * @memberOf CompileStep\n     * @instance\n     */\n    addJavaScript: function (options) {\n      if (typeof options.data !== \"string\") {\n        throw new Error(\"'data' option to addJavaScript must be a string\");\n      }\n\n      let sourcePath = this.inputPath;\n      if (_.has(options, \"sourcePath\") &&\n          typeof options.sourcePath === \"string\") {\n        sourcePath = options.sourcePath;\n      }\n\n      const targetPath = options.path || sourcePath;\n\n      if (typeof sourcePath !== \"string\") {\n        throw new Error(\"'sourcePath' option must be supplied to addJavaScript. Consider passing inputPath.\");\n      }\n\n      var data = Buffer.from(\n        files.convertToStandardLineEndings(options.data), 'utf8');\n      resources.push({\n        type: \"js\",\n        data: data,\n        sourcePath,\n        targetPath,\n        servePath: colonConverter.convert(\n          files.pathJoin(\n            inputSourceArch.pkg.serveRoot,\n            files.convertToStandardPath(targetPath, true))),\n        hash: watch.sha1(data),\n        sourceMap: convertSourceMapPaths(options.sourceMap,\n                                         files.convertToStandardPath),\n        lazy: this._getOption(\"lazy\", options),\n        bare: !! this._getOption(\"bare\", options),\n        mainModule: !! this._getOption(\"mainModule\", options),\n      });\n    },\n\n    /**\n     * @summary Add a file to serve as-is to the browser or to include on\n     * the browser, depending on the target. On the web, it will be served\n     * at the exact path requested. For server targets, it can be retrieved\n     * using `Assets.getText` or `Assets.getBinary`.\n     * @param {Object} options\n     * @param {String} path The path at which to serve the asset.\n     * @param {Buffer|String} data The data that should be placed in\n     * the file.\n     * @memberOf CompileStep\n     * @instance\n     */\n    addAsset: function (options) {\n      if (! (options.data instanceof Buffer)) {\n        if (_.isString(options.data)) {\n          options.data = Buffer.from(options.data);\n        } else {\n          throw new Error(\"'data' option to addAsset must be a Buffer or String.\");\n        }\n      }\n\n      addAsset(options.data, files.convertToStandardPath(options.path, true));\n    },\n\n    /**\n     * @summary Display a build error.\n     * @param  {Object} options\n     * @param {String} message The error message to display.\n     * @param {String} [sourcePath] The path to display in the error message.\n     * @param {Integer} line The line number to display in the error message.\n     * @param {String} func The function name to display in the error message.\n     * @memberOf CompileStep\n     * @instance\n     */\n    error: function (options) {\n      let sourcePath = this.inputPath;\n      if (_.has(options, \"sourcePath\") &&\n          typeof options.sourcePath === \"string\") {\n        sourcePath = options.sourcePath;\n      }\n\n      const message = options.message || (\"error building \" + relPath);\n\n      const info = { file: sourcePath };\n      if (options.line) info.line = options.line;\n      if (options.column) info.column = options.column;\n      if (options.func) info.func = options.func;\n\n      if (compileStep._getOption(\"lazy\") === true) {\n        // Because this file is lazy, it might not have been explicitly\n        // added in package.js, so we should ignore compilation errors\n        // until and unless it is ever actually imported.\n        resources.push({\n          type: \"js\",\n          sourcePath,\n          targetPath: sourcePath,\n          servePath: sourcePath,\n          data: Buffer.from(\n            \"throw new Error(\" + JSON.stringify(message) + \");\\n\",\n            \"utf8\"),\n          lazy: true,\n          error: { message, info },\n        });\n\n        return;\n      }\n\n      buildmessage.error(message, info);\n    }\n  };\n\n  return compileStep;\n};\n"],"file":"tools/isobuild/compiler-deprecated-compile-step.js.map"}