{"version":3,"sources":["meteor://ðŸ’»app/packages/compileStaticHtmlBatch/static-html.js"],"names":["Plugin","registerCompiler","extensions","archMatching","isTemplate","CachingHtmlCompiler","TemplatingTools","scanHtmlForTags","compileTagsToStaticHtml","tags","handler","StaticHtmlTagHandler","forEach","tag","addTagToResults","getResults","isEmpty","obj","Object","Array","includes","constructor","entries","length","results","head","body","js","bodyAttrs","hasAttribs","attribs","tagName","throwCompileError","contents","addBodyAttrs","tagStartIndex","e","scanner","message","contentsStartIndex","offset","attrs","keys","attr","val","hasOwnProperty","overrideIndex"],"mappings":"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","file":"/packages/compileStaticHtmlBatch_plugin.js","sourcesContent":["Plugin.registerCompiler({\n  extensions: ['html'],\n  archMatching: 'web',\n  isTemplate: true\n}, () => new CachingHtmlCompiler(\"static-html\", TemplatingTools.scanHtmlForTags, compileTagsToStaticHtml));\n\n// Same API as TutorialTools.compileTagsWithSpacebars, but instead of compiling\n// with Spacebars, it just returns static HTML\nfunction compileTagsToStaticHtml(tags) {\n  var handler = new StaticHtmlTagHandler();\n\n  tags.forEach((tag) => {\n    handler.addTagToResults(tag);\n  });\n\n  return handler.getResults();\n};\n\nvar isEmpty = obj => [Object, Array].includes((obj || {}).constructor) && !Object.entries((obj || {})).length;\n\nclass StaticHtmlTagHandler {\n  constructor() {\n    this.results = {\n      head: '',\n      body: '',\n      js: '',\n      bodyAttrs: {}\n    };\n  }\n\n  getResults() {\n    return this.results;\n  }\n\n  addTagToResults(tag) {\n    this.tag = tag;\n\n    // do we have 1 or more attributes?\n    const hasAttribs = ! isEmpty(this.tag.attribs);\n\n    if (this.tag.tagName === \"head\") {\n      if (hasAttribs) {\n        this.throwCompileError(\"Attributes on <head> not supported\");\n      }\n\n      this.results.head += this.tag.contents;\n      return;\n    }\n\n\n    // <body> or <template>\n\n    try {\n      if (this.tag.tagName === \"body\") {\n        this.addBodyAttrs(this.tag.attribs);\n\n        // We may be one of many `<body>` tags.\n        this.results.body += this.tag.contents;\n      } else {\n        this.throwCompileError(\"Expected <head> or <body> tag\", this.tag.tagStartIndex);\n      }\n    } catch (e) {\n      if (e.scanner) {\n        // The error came from Spacebars\n        this.throwCompileError(e.message, this.tag.contentsStartIndex + e.offset);\n      } else {\n        throw e;\n      }\n    }\n  }\n\n  addBodyAttrs(attrs) {\n    Object.keys(attrs).forEach((attr) => {\n      const val = attrs[attr];\n\n      // This check is for conflicting body attributes in the same file;\n      // we check across multiple files in caching-html-compiler using the\n      // attributes on results.bodyAttrs\n      if (this.results.bodyAttrs.hasOwnProperty(attr) && this.results.bodyAttrs[attr] !== val) {\n        this.throwCompileError(\n          `<body> declarations have conflicting values for the '${attr}' attribute.`);\n      }\n\n      this.results.bodyAttrs[attr] = val;\n    });\n  }\n\n  throwCompileError(message, overrideIndex) {\n    TemplatingTools.throwCompileError(this.tag, message, overrideIndex);\n  }\n}\n\n"]}