{"version":3,"sources":["meteor://ðŸ’»app/packages/minifyStdJS/plugin/minify-js.js","meteor://ðŸ’»app/packages/minifyStdJS/plugin/stats.js"],"names":["extractModuleSizesTree","module","link","v","Plugin","registerMinifier","extensions","archMatching","MeteorMinifier","processFilesForBundle","files","options","mode","minifyMode","forEach","file","addJavaScript","data","getContentsAsBuffer","sourceMap","getSourceMap","path","getPathInBundle","maybeThrowMinifyErrorBySourceFile","error","lines","getContentsAsString","split","lineContent","line","originalSourceFileLineNumber","i","currentLine","test","originalFilePath","substring","replace","Error","name","message","col","toBeAdded","stats","Object","create","minified","meteorJsMinify","err","ast","code","Buffer","byteLength","nudge","length","export","Visitor","default","findPossibleIndexes","Babel","meteorInstallRegExp","RegExp","map","exp","source","join","match","exec","parse","meteorInstallName","some","meteorInstallVisitor","visit","tree","reset","root","possibleIndexes","visitCallExpression","node","getValue","hasIdWithName","callee","walk","expr","type","slice","start","end","properties","prop","keyName","getKeyName","key","value","arguments","visitChildren","last","expressions","property"],"mappings":"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","file":"/packages/minifyStdJS_plugin.js","sourcesContent":["import { extractModuleSizesTree } from \"./stats.js\";\n\nPlugin.registerMinifier({\n    extensions: ['js'],\n    archMatching: 'web',\n  },\n  () => new MeteorMinifier()\n);\n\nclass MeteorMinifier {\n\n  processFilesForBundle (files, options) {\n    const mode = options.minifyMode;\n\n    // don't minify anything for development\n    if (mode === 'development') {\n      files.forEach(function (file) {\n        file.addJavaScript({\n          data: file.getContentsAsBuffer(),\n          sourceMap: file.getSourceMap(),\n          path: file.getPathInBundle(),\n        });\n      });\n      return;\n    }\n\n    // this function tries its best to locate the original source file\n    // that the error being reported was located inside of\n    function maybeThrowMinifyErrorBySourceFile(error, file) {\n\n      const lines = file.getContentsAsString().split(/\\n/);\n      const lineContent = lines[error.line - 1];\n\n      let originalSourceFileLineNumber = 0;\n\n      // Count backward from the failed line to find the oringal filename\n      for (let i = (error.line - 1); i >= 0; i--) {\n          let currentLine = lines[i];\n\n          // If the line is a boatload of slashes (8 or more), we're in the right place.\n          if (/^\\/\\/\\/{6,}$/.test(currentLine)) {\n\n              // If 4 lines back is the same exact line, we've found the framing.\n              if (lines[i - 4] === currentLine) {\n\n                  // So in that case, 2 lines back is the file path.\n                  let originalFilePath = lines[i - 2].substring(3).replace(/\\s+\\/\\//, \"\");\n\n                  throw new Error(\n                      `terser minification error (${error.name}:${error.message})\\n` +\n                      `Source file: ${originalFilePath}  (${originalSourceFileLineNumber}:${error.col})\\n` +\n                      `Line content: ${lineContent}\\n`);\n              }\n          }\n          originalSourceFileLineNumber++;\n      }\n    }\n\n    // this object will collect all the minified code in the\n    // data field and post-minfiication file sizes in the stats field\n    const toBeAdded = {\n      data: \"\",\n      stats: Object.create(null)\n    };\n\n    files.forEach(file => {\n      // Don't reminify *.min.js.\n      if (/\\.min\\.js$/.test(file.getPathInBundle())) {\n        toBeAdded.data += file.getContentsAsString();\n      }\n      else {\n        let minified;\n        try {\n          minified = meteorJsMinify(file.getContentsAsString());\n        }\n        catch (err) {\n          maybeThrowMinifyErrorBySourceFile(err, file);\n\n          throw new Error(`terser minification error (${err.name}:${err.message})\\n` +\n                          `Bundled file: ${file.getPathInBundle()}  (${err.line}:${err.col})\\n`);\n        }\n\n        const ast = extractModuleSizesTree(minified.code);\n\n        if (ast) {\n          toBeAdded.stats[file.getPathInBundle()] = [Buffer.byteLength(minified.code), ast];\n        } else {\n          toBeAdded.stats[file.getPathInBundle()] = Buffer.byteLength(minified.code);\n        }\n        // append the minified code to the \"running sum\"\n        // of code being minified\n        toBeAdded.data += minified.code;\n      }\n      toBeAdded.data += '\\n\\n';\n\n      Plugin.nudge();\n    });\n\n    // this is where the minified code gets added to one\n    // JS file that is delivered to the client\n    if (files.length) {\n      files[0].addJavaScript(toBeAdded);\n    }\n  }\n}\n","import Visitor from \"reify/lib/visitor.js\";\nimport { findPossibleIndexes } from \"reify/lib/utils.js\";\nimport { Babel } from \"meteor/babel-compiler\";\n\n// This RegExp will be used to scan the source for calls to meteorInstall,\n// taking into consideration that the function name may have been mangled\n// to something other than \"meteorInstall\" by the minifier.\nconst meteorInstallRegExp = new RegExp([\n  // If meteorInstall is called by its unminified name, then that's what\n  // we should be looking for in the AST.\n  /\\b(meteorInstall)\\(\\{/,\n  // If the meteorInstall function name has been minified, we can figure\n  // out its mangled name by examining the import assignment.\n  /\\b(\\w+)=Package\\.modules\\.meteorInstall\\b/,\n  /\\b(\\w+)=Package\\[\"modules-runtime\"\\].meteorInstall\\b/,\n  // Sometimes uglify-es will inline (0,Package.modules.meteorInstall) as\n  // a call expression.\n  /\\(0,Package\\.modules\\.(meteorInstall)\\)\\(/,\n  /\\(0,Package\\[\"modules-runtime\"\\]\\.(meteorInstall)\\)\\(/,\n].map(exp => exp.source).join(\"|\"));\n\nexport function extractModuleSizesTree(source) {\n  const match = meteorInstallRegExp.exec(source);\n  if (match) {\n    const ast = Babel.parse(source);\n    let meteorInstallName = \"meteorInstall\";\n    // The minifier may have renamed meteorInstall to something shorter.\n    match.some((name, i) => (i > 0 && (meteorInstallName = name)));\n    meteorInstallVisitor.visit(ast, meteorInstallName, source);\n    return meteorInstallVisitor.tree;\n  }\n}\n\nconst meteorInstallVisitor = new (class extends Visitor {\n  reset(root, meteorInstallName, source) {\n    this.name = meteorInstallName;\n    this.source = source;\n    this.tree = Object.create(null);\n    // Optimization to abandon entire subtrees of the AST that contain\n    // nothing like the meteorInstall identifier we're looking for.\n    this.possibleIndexes = findPossibleIndexes(source, [\n      meteorInstallName,\n    ]);\n  }\n\n  visitCallExpression(path) {\n    const node = path.getValue();\n\n    if (hasIdWithName(node.callee, this.name)) {\n      const source = this.source;\n\n      function walk(tree, expr) {\n        if (expr.type !== \"ObjectExpression\") {\n          return Buffer.byteLength(source.slice(expr.start, expr.end));\n        }\n\n        tree = tree || Object.create(null);\n\n        expr.properties.forEach(prop => {\n          const keyName = getKeyName(prop.key);\n          if (typeof keyName === \"string\") {\n            tree[keyName] = walk(tree[keyName], prop.value);\n          }\n        });\n\n        return tree;\n      }\n\n      walk(this.tree, node.arguments[0]);\n\n    } else {\n      this.visitChildren(path);\n    }\n  }\n});\n\nfunction hasIdWithName(node, name) {\n  switch (node && node.type) {\n  case \"SequenceExpression\":\n    const last = node.expressions[node.expressions.length - 1];\n    return hasIdWithName(last, name);\n  case \"MemberExpression\":\n    return hasIdWithName(node.property, name);\n  case \"Identifier\":\n    return node.name === name;\n  default:\n    return false;\n  }\n}\n\nfunction getKeyName(key) {\n  if (key.type === \"Identifier\") {\n    return key.name;\n  }\n\n  if (key.type === \"StringLiteral\" ||\n      key.type === \"Literal\") {\n    return key.value;\n  }\n\n  return null;\n}\n"]}