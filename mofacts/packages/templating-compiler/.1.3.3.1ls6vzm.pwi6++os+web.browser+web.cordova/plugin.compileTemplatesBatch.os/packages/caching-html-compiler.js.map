{"version":3,"sources":["meteor://ðŸ’»app/packages/caching-html-compiler/caching-html-compiler.js"],"names":["path","Plugin","CachingHtmlCompiler","name","tagScannerFunc","tagHandlerFunc","compilerName","defaultCacheSize","_bodyAttrInfo","compileResultSize","compileResult","lengthOrZero","field","length","head","body","js","processFilesForTarget","inputFiles","getCacheKey","inputFile","getSourceHash","compileOneFile","contents","getContentsAsString","inputPath","getPathInPackage","tags","sourceName","tagNames","e","TemplatingTools","CompileError","error","message","line","addCompileResult","allJavaScript","addHtml","section","data","_","isEmpty","bodyAttrs","Object","keys","forEach","attr","value","hasOwnProperty","JSON","stringify","filePath","pathPart","dirname","sep","ext","extname","basename","addJavaScript","join","CachingCompiler"],"mappings":"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","file":"/packages/caching-html-compiler.js","sourcesContent":["const path = Plugin.path;\n\n// The CompileResult type for this CachingCompiler is the return value of\n// htmlScanner.scan: a {js, head, body, bodyAttrs} object.\nCachingHtmlCompiler = class CachingHtmlCompiler extends CachingCompiler {\n  /**\n   * Constructor for CachingHtmlCompiler\n   * @param  {String} name The name of the compiler, printed in errors -\n   * should probably always be the same as the name of the build\n   * plugin/package\n   * @param  {Function} tagScannerFunc Transforms a template file (commonly\n   * .html) into an array of Tags\n   * @param  {Function} tagHandlerFunc Transforms an array of tags into a\n   * results object with js, body, head, and bodyAttrs properties\n   */\n  constructor(name, tagScannerFunc, tagHandlerFunc) {\n    super({\n      compilerName: name,\n      defaultCacheSize: 1024*1024*10,\n    });\n\n    this._bodyAttrInfo = null;\n\n    this.tagScannerFunc = tagScannerFunc;\n    this.tagHandlerFunc = tagHandlerFunc;\n  }\n\n  // Implements method from CachingCompilerBase\n  compileResultSize(compileResult) {\n    function lengthOrZero(field) {\n      return field ? field.length : 0;\n    }\n    return lengthOrZero(compileResult.head) + lengthOrZero(compileResult.body) +\n      lengthOrZero(compileResult.js);\n  }\n\n  // Overrides method from CachingCompiler\n  processFilesForTarget(inputFiles) {\n    this._bodyAttrInfo = {};\n    super.processFilesForTarget(inputFiles);\n  }\n\n  // Implements method from CachingCompilerBase\n  getCacheKey(inputFile) {\n    // Note: the path is only used for errors, so it doesn't have to be part\n    // of the cache key.\n    return inputFile.getSourceHash();\n  }\n\n  // Implements method from CachingCompiler\n  compileOneFile(inputFile) {\n    const contents = inputFile.getContentsAsString();\n    const inputPath = inputFile.getPathInPackage();\n    try {\n      const tags = this.tagScannerFunc({\n        sourceName: inputPath,\n        contents: contents,\n        tagNames: [\"body\", \"head\", \"template\"]\n      });\n\n      return this.tagHandlerFunc(tags);\n    } catch (e) {\n      if (e instanceof TemplatingTools.CompileError) {\n        inputFile.error({\n          message: e.message,\n          line: e.line\n        });\n        return null;\n      } else {\n        throw e;\n      }\n    }\n  }\n\n  // Implements method from CachingCompilerBase\n  addCompileResult(inputFile, compileResult) {\n    let allJavaScript = \"\";\n\n    if (compileResult.head) {\n      inputFile.addHtml({ section: \"head\", data: compileResult.head });\n    }\n\n    if (compileResult.body) {\n      inputFile.addHtml({ section: \"body\", data: compileResult.body });\n    }\n\n    if (compileResult.js) {\n      allJavaScript += compileResult.js;\n    }\n\n    if (! _.isEmpty(compileResult.bodyAttrs)) {\n      Object.keys(compileResult.bodyAttrs).forEach((attr) => {\n        const value = compileResult.bodyAttrs[attr];\n        if (this._bodyAttrInfo.hasOwnProperty(attr) &&\n            this._bodyAttrInfo[attr].value !== value) {\n          // two conflicting attributes on <body> tags in two different template\n          // files\n          inputFile.error({\n            message:\n            `<body> declarations have conflicting values for the '${ attr }' ` +\n              `attribute in the following files: ` +\n              this._bodyAttrInfo[attr].inputFile.getPathInPackage() +\n              `, ${ inputFile.getPathInPackage() }`\n          });\n        } else {\n          this._bodyAttrInfo[attr] = {inputFile, value};\n        }\n      });\n\n      // Add JavaScript code to set attributes on body\n      allJavaScript +=\n`Meteor.startup(function() {\n  var attrs = ${JSON.stringify(compileResult.bodyAttrs)};\n  for (var prop in attrs) {\n    document.body.setAttribute(prop, attrs[prop]);\n  }\n});\n`;\n    }\n    \n\n    if (allJavaScript) {\n      const filePath = inputFile.getPathInPackage();\n      // XXX this path manipulation may be unnecessarily complex\n      let pathPart = path.dirname(filePath);\n      if (pathPart === '.')\n        pathPart = '';\n      if (pathPart.length && pathPart !== path.sep)\n        pathPart = pathPart + path.sep;\n      const ext = path.extname(filePath);\n      const basename = path.basename(filePath, ext);\n\n      // XXX generate a source map\n\n      inputFile.addJavaScript({\n        path: path.join(pathPart, \"template.\" + basename + \".js\"),\n        data: allJavaScript\n      });\n    }\n  }\n}\n"]}