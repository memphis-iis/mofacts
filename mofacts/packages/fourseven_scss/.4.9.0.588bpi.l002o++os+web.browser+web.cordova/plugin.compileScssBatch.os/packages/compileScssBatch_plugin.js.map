{"version":3,"sources":["meteor://ðŸ’»app/packages/compileScssBatch/plugin/compile-scss.js"],"names":["sass","module","watch","require","default","v","Future","files","Plugin","path","fs","_includePaths","_data","registerCompiler","extensions","archMatching","SassCompiler","toPosixPath","p","partialPath","process","env","SystemDrive","replace","slice","convertToStandardPath","osPath","platform","MultiFileCachingCompiler","constructor","compilerName","defaultCacheSize","getCacheKey","inputFile","getSourceHash","compileResultSize","compileResult","css","length","sourceMapSize","sourceMap","isRoot","fileOptions","getFileOptions","hasOwnProperty","isImport","pathInPackage","getPathInPackage","hasUnderscore","file","basename","startsWith","compileOneFile","allFiles","referencedImportPaths","self","totalImportPath","sourceMapPaths","getDisplayPath","addUnderscore","join","dirname","getRealImportPath","importPath","rawImportPath","isAbsolute","possibleFiles","possibleExtensions","match","getExtension","filter","e","extension","push","possibleFile","fileExists","has","absolute","importer","url","prev","done","splice","indexOf","i","accPosition","substr","parsed","_getRealImportPathFromIncludes","Error","contents","readFileSync","decodeFilePath","get","getContentsAsString","f","options","sourceMapContents","sourceMapEmbed","sourceComments","omitSourceMapUrl","sourceMapRoot","indentedSyntax","outFile","getBasename","includePaths","getAbsoluteImportPath","data","getContentsAsBuffer","toString","trim","concat","output","render","resolver","wait","error","message","formatted","sourcePath","map","JSON","parse","sources","addCompileResult","addStylesheet","getRealImportPathFn","_prepareNodeSassOptions","possibleFilePath","foundFile","includePath","config","_loadConfigurationFile","_loadIncludePaths","Array","isArray","_getConfig","configFileName","appdir","PWD","cwd","custom_config_filename","userConfig","encoding","filePath","statSync","existsSync"],"mappings":"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","file":"/packages/compileScssBatch_plugin.js","sourcesContent":["import sass from 'node-sass';\nimport Future from 'fibers/future';\n\nconst files = Plugin.files;\nconst path = Plugin.path;\nconst fs = Plugin.fs;\n\nlet _includePaths;\nlet _data;\n\nPlugin.registerCompiler({\n  extensions: ['scss', 'sass'],\n  archMatching: 'web'\n}, () => new SassCompiler());\n\nconst toPosixPath = function toPosixPath(p, partialPath) {\n  // Sometimes, you can have a path like \\Users\\IEUser on windows, and this\n  // actually means you want C:\\Users\\IEUser\n  if (p[0] === \"\\\\\" && (!partialPath)) {\n    p = process.env.SystemDrive + p;\n  }\n\n  p = p.replace(/\\\\/g, '/');\n  if (p[1] === ':' && !partialPath) {\n    // transform \"C:/bla/bla\" to \"/c/bla/bla\"\n    p = `/${p[0]}${p.slice(2)}`;\n  }\n\n  return p;\n};\n\nconst convertToStandardPath = function convertToStandardPath(osPath, partialPath) {\n  if (process.platform === \"win32\") {\n    return toPosixPath(osPath, partialPath);\n  }\n\n  return osPath;\n}\n\n// CompileResult is {css, sourceMap}.\nclass SassCompiler extends MultiFileCachingCompiler {\n  constructor() {\n    super({\n      compilerName: 'sass',\n      defaultCacheSize: 1024*1024*10,\n    });\n  }\n\n  getCacheKey(inputFile) {\n    return inputFile.getSourceHash();\n  }\n\n  compileResultSize(compileResult) {\n    return compileResult.css.length +\n      this.sourceMapSize(compileResult.sourceMap);\n  }\n\n  // The heuristic is that a file is an import (ie, is not itself processed as a\n  // root) if it matches _*.sass, _*.scss\n  // This can be overridden in either direction via an explicit\n  // `isImport` file option in api.addFiles.\n  isRoot(inputFile) {\n    const fileOptions = inputFile.getFileOptions();\n    if (fileOptions.hasOwnProperty('isImport')) {\n      return !fileOptions.isImport;\n    }\n\n    const pathInPackage = inputFile.getPathInPackage();\n    return !this.hasUnderscore(pathInPackage);\n  }\n\n  hasUnderscore(file) {\n    return path.basename(file).startsWith('_');\n  }\n\n  compileOneFile(inputFile, allFiles) {\n\n    const referencedImportPaths = [];\n\n    const self = this;\n\n    var totalImportPath = [];\n    var sourceMapPaths = [`.${inputFile.getDisplayPath()}`];\n\n    function addUnderscore(file) {\n      if (!self.hasUnderscore(file)) {\n        file = path.join(path.dirname(file), `_${path.basename(file)}`);\n      }\n      return file;\n    }\n\n    const getRealImportPath = function(importPath) {\n      const rawImportPath = importPath;\n      const isAbsolute = importPath.startsWith('/');\n\n      //SASS has a whole range of possible import files from one import statement, try each of them\n      const possibleFiles = [];\n\n      //If the referenced file has no extension, try possible extensions, starting with extension of the parent file.\n      let possibleExtensions = ['scss','sass','css'];\n\n      if(! importPath.match(/\\.s?(a|c)ss$/)){\n        possibleExtensions = [\n          inputFile.getExtension(),\n          ...possibleExtensions.filter(e => e !== inputFile.getExtension())\n          ]\n        for (const extension of possibleExtensions){\n          possibleFiles.push(`${importPath}.${extension}`);\n        }\n      }else{\n        possibleFiles.push(importPath);\n      }\n\n      //Try files prefixed with underscore\n      for (const possibleFile of possibleFiles) {\n        if (! self.hasUnderscore(possibleFile)) {\n          possibleFiles.push(addUnderscore(possibleFile));\n        }\n      }\n\n      //Try if one of the possible files exists\n      for (const possibleFile of possibleFiles) {\n        if ((isAbsolute && fileExists(possibleFile)) || (!isAbsolute && allFiles.has(possibleFile))) {\n            return { absolute: isAbsolute, path: possibleFile };\n        }\n      }\n\n      //Nothing found...\n      return null;\n\n    };\n\n    //Handle import statements found by the sass compiler, used to handle cross-package imports\n    const importer = function(url, prev, done) {\n\n      if (!totalImportPath.length) {\n        totalImportPath.push(prev);\n      }\n\n      if (totalImportPath[totalImportPath.length] !== prev) {\n        //backtracked, splice of part we don't need anymore\n        // (XXX: this might give problems when multiple parts of the path have the same name)\n        totalImportPath.splice(totalImportPath.indexOf(prev) + 1, totalImportPath.length);\n      }\n\n      let importPath = url;\n      for (let i = totalImportPath.length - 1; i >= 0; i--) {\n        if (importPath.startsWith('/') || importPath.startsWith('{')) {\n          break;\n        }\n        importPath = path.join(path.dirname(totalImportPath[i]),importPath);\n      }\n      totalImportPath.push(url);\n\n      let accPosition = importPath.indexOf('{');\n      if (accPosition > -1) {\n        importPath = importPath.substr(accPosition,importPath.length);\n      }\n\n      try {\n        let parsed = getRealImportPath(importPath);\n\n        if (!parsed) {\n          parsed = _getRealImportPathFromIncludes(url, getRealImportPath);\n        }\n        if (!parsed) {\n          //Nothing found...\n          throw new Error(`File to import: ${url} not found in file: ${totalImportPath[totalImportPath.length - 2]}`);\n        }\n\n        if (parsed.absolute) {\n          sourceMapPaths.push(parsed.path);\n          done({ contents: fs.readFileSync(parsed.path, 'utf8')});\n        } else {\n          referencedImportPaths.push(parsed.path);\n          sourceMapPaths.push(decodeFilePath(parsed.path));\n          done({ contents: allFiles.get(parsed.path).getContentsAsString()});\n        }\n      } catch (e) {\n        return done(e);\n      }\n\n    }\n\n    //Start compile sass (async)\n    const f = new Future;\n\n    const options = {\n      sourceMap:         true,\n      sourceMapContents: true,\n      sourceMapEmbed:    false,\n      sourceComments:    false,\n      omitSourceMapUrl:  true,\n      sourceMapRoot: '.',\n      indentedSyntax : inputFile.getExtension() === 'sass',\n      outFile: `.${inputFile.getBasename()}`,\n      importer: importer,\n      includePaths:      [],\n    };\n\n    options.file = this.getAbsoluteImportPath(inputFile);\n\n    options.data = inputFile.getContentsAsBuffer().toString('utf8');\n\n    //If the file is empty, options.data is an empty string\n    // In that case options.file will be used by node-sass,\n    // which it can not read since it will contain a meteor package or app reference '{}'\n    // This is one workaround, another one would be to not set options.file, in which case the importer 'prev' will be 'stdin'\n    // However, this would result in problems if a file named stdÃ­n.scss would exist.\n    // Not the most elegant of solutions, but it works.\n    if (!options.data.trim()) {\n      options.data = '$fakevariable_ae7bslvbp2yqlfba : blue;';\n    } else if (typeof _data === 'string') {\n      options.data = _data.concat(options.data);\n    }\n\n    let output;\n    try {\n      sass.render(options,f.resolver());\n      output = f.wait();\n    } catch (e) {\n      inputFile.error({\n        message: `Scss compiler error: ${e.formatted}\\n`,\n        sourcePath: inputFile.getDisplayPath()\n      });\n      return null;\n    }\n    //End compile sass\n\n    //Start fix sourcemap references\n    if (output.map) {\n      const map = JSON.parse(output.map.toString('utf-8'));\n      map.sources = sourceMapPaths;\n      output.map = map;\n    }\n    //End fix sourcemap references\n\n    const compileResult = { css: output.css.toString('utf-8'), sourceMap: output.map };\n    return { compileResult, referencedImportPaths };\n  }\n\n  addCompileResult(inputFile, compileResult) {\n    inputFile.addStylesheet({\n      data: compileResult.css,\n      path: `${inputFile.getPathInPackage()}.css`,\n      sourceMap: compileResult.sourceMap,\n    });\n  }\n}\n\n\nfunction _getRealImportPathFromIncludes(importPath, getRealImportPathFn){\n\n  _prepareNodeSassOptions();\n\n  let possibleFilePath, foundFile;\n\n  for (let includePath of _includePaths) {\n    possibleFilePath = path.join(includePath, importPath);\n    foundFile = getRealImportPathFn(possibleFilePath);\n\n    if (foundFile) {\n      return foundFile;\n    }\n  }\n\n  return null;\n}\n\n/**\n * If not loaded yet, load configuration and includePaths.\n * @private\n */\nfunction _prepareNodeSassOptions() {\n  const config = _loadConfigurationFile();\n  if (typeof _includePaths === 'undefined' && config.includePaths) {\n    _loadIncludePaths(config);\n  }\n  if (typeof _data === 'undefined' && config.data) {\n    _data = config.data\n  }\n}\n\n/**\n * Extract the 'includePaths' key from specified configuration, if any, and\n * store it into _includePaths.\n * @param config\n * @private\n */\nfunction _loadIncludePaths(config) {\n  // Extract includePaths, if any\n  const includePaths = config['includePaths'];\n\n  if (includePaths && Array.isArray(includePaths)) {\n    _includePaths = includePaths;\n  } else {\n    _includePaths = [];\n  }\n}\n\n/**\n * Read the content of 'scss-config.json' file (if any)\n * @returns {{}}\n * @private\n */\nfunction _loadConfigurationFile() {\n  return _getConfig('scss-config.json') || {};\n}\n\n/**\n * Build a path from current process working directory (i.e. meteor project\n * root) and specified file name, try to get the file and parse its content.\n * @param configFileName\n * @returns {{}}\n * @private\n */\nfunction _getConfig(configFileName) {\n  const appdir = process.env.PWD || process.cwd();\n  const custom_config_filename = path.join(appdir, configFileName);\n  let userConfig = {};\n\n  if (fileExists(custom_config_filename)) {\n    userConfig = fs.readFileSync(custom_config_filename, {\n      encoding: 'utf8'\n    });\n    userConfig = JSON.parse(userConfig);\n  } else {\n    //console.warn('Could not find configuration file at ' + custom_config_filename);\n  }\n  return userConfig;\n}\n\nfunction decodeFilePath (filePath) {\n  const match = filePath.match(/{(.*)}\\/(.*)$/);\n  if (!match) {\n    throw new Error(`Failed to decode sass path: ${filePath}`);\n  }\n\n  if (match[1] === '') {\n    // app\n    return match[2];\n  }\n\n  return `packages/${match[1]}/${match[2]}`;\n}\n\nfunction fileExists(file) {\n  if (fs.statSync){\n    try {\n      fs.statSync(file);\n    } catch (e) {\n      return false;\n    }\n    return true;\n  } else if (fs.existsSync) {\n    return fs.existsSync(file);\n  }\n}"]}