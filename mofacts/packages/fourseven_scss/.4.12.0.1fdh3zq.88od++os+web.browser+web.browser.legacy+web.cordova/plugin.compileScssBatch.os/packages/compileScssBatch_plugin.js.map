{"version":3,"sources":["meteor://ðŸ’»app/packages/compileScssBatch/plugin/compile-scss.js"],"names":["sass","module","link","default","v","promisify","path","Plugin","fs","compileSass","render","_includePaths","registerCompiler","extensions","archMatching","SassCompiler","toPosixPath","p","partialPath","process","env","SystemDrive","replace","slice","convertToStandardPath","osPath","platform","MultiFileCachingCompiler","constructor","compilerName","defaultCacheSize","getCacheKey","inputFile","getSourceHash","compileResultSize","compileResult","css","length","sourceMapSize","sourceMap","isRoot","fileOptions","getFileOptions","hasOwnProperty","isImport","pathInPackage","getPathInPackage","hasUnderscore","file","basename","startsWith","compileOneFileLater","getResult","addStylesheet","result","data","compileOneFile","allFiles","referencedImportPaths","totalImportPath","sourceMapPaths","getDisplayPath","addUnderscore","join","dirname","getRealImportPath","importPath","isAbsolute","possibleFiles","possibleExtensions","match","getExtension","filter","e","extension","push","possibleFile","fileExists","has","absolute","importer","url","prev","done","splice","indexOf","i","accPosition","substr","parsed","_getRealImportPathFromIncludes","Error","contents","readFileSync","decodeFilePath","get","getContentsAsString","options","sourceMapContents","sourceMapEmbed","sourceComments","omitSourceMapUrl","sourceMapRoot","indentedSyntax","outFile","getBasename","includePaths","precision","getAbsoluteImportPath","getContentsAsBuffer","toString","trim","output","error","message","formatted","sourcePath","map","JSON","parse","sources","addCompileResult","getRealImportPathFn","_prepareNodeSassOptions","possibleFilePath","foundFile","includePath","config","_loadConfigurationFile","_loadIncludePaths","Array","isArray","_getConfig","configFileName","appdir","PWD","cwd","custom_config_filename","userConfig","encoding","filePath","statSync","existsSync"],"mappings":"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","file":"/packages/compileScssBatch_plugin.js","sourcesContent":["import sass from 'node-sass';\nimport { promisify } from 'util';\nconst path = Plugin.path;\nconst fs = Plugin.fs;\n\nconst compileSass = promisify(sass.render);\nlet _includePaths;\n\nPlugin.registerCompiler({\n  extensions: ['scss', 'sass'],\n  archMatching: 'web'\n}, () => new SassCompiler());\n\nconst toPosixPath = function toPosixPath(p, partialPath) {\n  // Sometimes, you can have a path like \\Users\\IEUser on windows, and this\n  // actually means you want C:\\Users\\IEUser\n  if (p[0] === \"\\\\\" && (!partialPath)) {\n    p = process.env.SystemDrive + p;\n  }\n\n  p = p.replace(/\\\\/g, '/');\n  if (p[1] === ':' && !partialPath) {\n    // transform \"C:/bla/bla\" to \"/c/bla/bla\"\n    p = `/${p[0]}${p.slice(2)}`;\n  }\n\n  return p;\n};\n\nconst convertToStandardPath = function convertToStandardPath(osPath, partialPath) {\n  if (process.platform === \"win32\") {\n    return toPosixPath(osPath, partialPath);\n  }\n\n  return osPath;\n}\n\n// CompileResult is {css, sourceMap}.\nclass SassCompiler extends MultiFileCachingCompiler {\n  constructor() {\n    super({\n      compilerName: 'sass',\n      defaultCacheSize: 1024*1024*10,\n    });\n  }\n\n  getCacheKey(inputFile) {\n    return inputFile.getSourceHash();\n  }\n\n  compileResultSize(compileResult) {\n    return compileResult.css.length +\n      this.sourceMapSize(compileResult.sourceMap);\n  }\n\n  // The heuristic is that a file is an import (ie, is not itself processed as a\n  // root) if it matches _*.sass, _*.scss\n  // This can be overridden in either direction via an explicit\n  // `isImport` file option in api.addFiles.\n  isRoot(inputFile) {\n    const fileOptions = inputFile.getFileOptions();\n\n    if (fileOptions.hasOwnProperty('isImport')) {\n      return !fileOptions.isImport;\n    }\n\n    const pathInPackage = inputFile.getPathInPackage();\n    return !this.hasUnderscore(pathInPackage);\n  }\n\n  hasUnderscore(file) {\n    return path.basename(file).startsWith('_');\n  }\n\n  compileOneFileLater(inputFile, getResult) {\n    inputFile.addStylesheet({\n      path: inputFile.getPathInPackage(),\n    }, async () => {\n      const result = await getResult();\n      return result && {\n        data: result.css,\n        sourceMap: result.sourceMap,\n        };\n    });\n  }\n\n  async compileOneFile(inputFile, allFiles) {\n\n    const referencedImportPaths = [];\n\n    var totalImportPath = [];\n    var sourceMapPaths = [`.${inputFile.getDisplayPath()}`];\n\n    const addUnderscore = (file) => {\n      if (!this.hasUnderscore(file)) {\n        file = path.join(path.dirname(file), `_${path.basename(file)}`);\n      }\n      return file;\n    }\n\n    const getRealImportPath = (importPath) => {\n      const isAbsolute = importPath.startsWith('/');\n\n      //SASS has a whole range of possible import files from one import statement, try each of them\n      const possibleFiles = [];\n\n      //If the referenced file has no extension, try possible extensions, starting with extension of the parent file.\n      let possibleExtensions = ['scss','sass','css'];\n\n      if(! importPath.match(/\\.s?(a|c)ss$/)){\n        possibleExtensions = [\n          inputFile.getExtension(),\n          ...possibleExtensions.filter(e => e !== inputFile.getExtension())\n          ]\n        for (const extension of possibleExtensions){\n          possibleFiles.push(`${importPath}.${extension}`);\n        }\n      }else{\n        possibleFiles.push(importPath);\n      }\n\n      //Try files prefixed with underscore\n      for (const possibleFile of possibleFiles) {\n        if (! this.hasUnderscore(possibleFile)) {\n          possibleFiles.push(addUnderscore(possibleFile));\n        }\n      }\n\n      //Try if one of the possible files exists\n      for (const possibleFile of possibleFiles) {\n        if ((isAbsolute && fileExists(possibleFile)) || (!isAbsolute && allFiles.has(possibleFile))) {\n            return { absolute: isAbsolute, path: possibleFile };\n        }\n      }\n\n      //Nothing found...\n      return null;\n\n    };\n\n    //Handle import statements found by the sass compiler, used to handle cross-package imports\n    const importer = function(url, prev, done) {\n\n      if (!totalImportPath.length) {\n        totalImportPath.push(prev);\n      }\n\n      if (totalImportPath[totalImportPath.length] !== prev) {\n        //backtracked, splice of part we don't need anymore\n        // (XXX: this might give problems when multiple parts of the path have the same name)\n        totalImportPath.splice(totalImportPath.indexOf(prev) + 1, totalImportPath.length);\n      }\n\n      let importPath = url;\n      for (let i = totalImportPath.length - 1; i >= 0; i--) {\n        if (importPath.startsWith('/') || importPath.startsWith('{')) {\n          break;\n        }\n        importPath = path.join(path.dirname(totalImportPath[i]),importPath);\n      }\n      totalImportPath.push(url);\n\n      let accPosition = importPath.indexOf('{');\n      if (accPosition > -1) {\n        importPath = importPath.substr(accPosition,importPath.length);\n      }\n\n      try {\n        let parsed = getRealImportPath(importPath);\n\n        if (!parsed) {\n          parsed = _getRealImportPathFromIncludes(url, getRealImportPath);\n        }\n        if (!parsed) {\n          //Nothing found...\n          throw new Error(`File to import: ${url} not found in file: ${totalImportPath[totalImportPath.length - 2]}`);\n        }\n\n        if (parsed.absolute) {\n          sourceMapPaths.push(parsed.path);\n          done({ contents: fs.readFileSync(parsed.path, 'utf8')});\n        } else {\n          referencedImportPaths.push(parsed.path);\n          sourceMapPaths.push(decodeFilePath(parsed.path));\n          done({ contents: allFiles.get(parsed.path).getContentsAsString()});\n        }\n      } catch (e) {\n        return done(e);\n      }\n\n    }\n\n    //Start compile sass (async)\n    const options = {\n      sourceMap: true,\n      sourceMapContents: true,\n      sourceMapEmbed: false,\n      sourceComments: false,\n      omitSourceMapUrl: true,\n      sourceMapRoot: '.',\n      indentedSyntax : inputFile.getExtension() === 'sass',\n      outFile: `.${inputFile.getBasename()}`,\n      importer,\n      includePaths: [],\n      precision: 10,\n    };\n\n    options.file = this.getAbsoluteImportPath(inputFile);\n\n    options.data = inputFile.getContentsAsBuffer().toString('utf8');\n\n    //If the file is empty, options.data is an empty string\n    // In that case options.file will be used by node-sass,\n    // which it can not read since it will contain a meteor package or app reference '{}'\n    // This is one workaround, another one would be to not set options.file, in which case the importer 'prev' will be 'stdin'\n    // However, this would result in problems if a file named stdÃ­n.scss would exist.\n    // Not the most elegant of solutions, but it works.\n    if (!options.data.trim()) {\n      options.data = '$fakevariable_ae7bslvbp2yqlfba : blue;';\n    }\n\n    let output;\n    try {\n      output = await compileSass(options);\n    } catch (e) {\n      inputFile.error({\n        message: `Scss compiler error: ${e.formatted}\\n`,\n        sourcePath: inputFile.getDisplayPath()\n      });\n      return null;\n    }\n    //End compile sass\n\n    //Start fix sourcemap references\n    if (output.map) {\n      const map = JSON.parse(output.map.toString('utf-8'));\n      map.sources = sourceMapPaths;\n      output.map = map;\n    }\n    //End fix sourcemap references\n\n    const compileResult = { css: output.css.toString('utf-8'), sourceMap: output.map };\n    return { compileResult, referencedImportPaths };\n  }\n\n  addCompileResult(inputFile, compileResult) {\n    inputFile.addStylesheet({\n      data: compileResult.css,\n      path: `${inputFile.getPathInPackage()}.css`,\n      sourceMap: compileResult.sourceMap,\n    });\n  }\n}\n\n\nfunction _getRealImportPathFromIncludes(importPath, getRealImportPathFn){\n\n  _prepareNodeSassOptions();\n\n  let possibleFilePath, foundFile;\n\n  for (let includePath of _includePaths) {\n    possibleFilePath = path.join(includePath, importPath);\n    foundFile = getRealImportPathFn(possibleFilePath);\n\n    if (foundFile) {\n      return foundFile;\n    }\n  }\n\n  return null;\n}\n\n/**\n * If not loaded yet, load configuration and includePaths.\n * @private\n */\nfunction _prepareNodeSassOptions() {\n  const config = _loadConfigurationFile();\n  if (typeof _includePaths === 'undefined' && config.includePaths) {\n    _loadIncludePaths(config);\n  }\n}\n\n/**\n * Extract the 'includePaths' key from specified configuration, if any, and\n * store it into _includePaths.\n * @param config\n * @private\n */\nfunction _loadIncludePaths(config) {\n  // Extract includePaths, if any\n  const includePaths = config['includePaths'];\n\n  if (includePaths && Array.isArray(includePaths)) {\n    _includePaths = includePaths;\n  } else {\n    _includePaths = [];\n  }\n}\n\n/**\n * Read the content of 'scss-config.json' file (if any)\n * @returns {{}}\n * @private\n */\nfunction _loadConfigurationFile() {\n  return _getConfig('scss-config.json') || {};\n}\n\n/**\n * Build a path from current process working directory (i.e. meteor project\n * root) and specified file name, try to get the file and parse its content.\n * @param configFileName\n * @returns {{}}\n * @private\n */\nfunction _getConfig(configFileName) {\n  const appdir = process.env.PWD || process.cwd();\n  const custom_config_filename = path.join(appdir, configFileName);\n  let userConfig = {};\n\n  if (fileExists(custom_config_filename)) {\n    userConfig = fs.readFileSync(custom_config_filename, {\n      encoding: 'utf8'\n    });\n    userConfig = JSON.parse(userConfig);\n  } else {\n    //console.warn('Could not find configuration file at ' + custom_config_filename);\n  }\n  return userConfig;\n}\n\nfunction decodeFilePath (filePath) {\n  const match = filePath.match(/{(.*)}\\/(.*)$/);\n  if (!match) {\n    throw new Error(`Failed to decode sass path: ${filePath}`);\n  }\n\n  if (match[1] === '') {\n    // app\n    return match[2];\n  }\n\n  return `packages/${match[1]}/${match[2]}`;\n}\n\nfunction fileExists(file) {\n  if (fs.statSync){\n    try {\n      fs.statSync(file);\n    } catch (e) {\n      return false;\n    }\n    return true;\n  } else if (fs.existsSync) {\n    return fs.existsSync(file);\n  }\n}"]}