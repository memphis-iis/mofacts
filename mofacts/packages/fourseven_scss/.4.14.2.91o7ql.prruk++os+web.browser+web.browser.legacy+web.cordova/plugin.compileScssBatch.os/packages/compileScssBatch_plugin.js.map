{"version":3,"sources":["meteor://ðŸ’»app/packages/compileScssBatch/plugin/compile-scss.js"],"names":["sass","module1","link","default","v","promisify","path","Plugin","fs","compileSass","render","rootDir","process","env","PWD","cwd","includePaths","_getConfig","_includePaths","Array","isArray","registerCompiler","extensions","archMatching","SassCompiler","MultiFileCachingCompiler","constructor","compilerName","defaultCacheSize","getCacheKey","inputFile","getSourceHash","compileResultSize","compileResult","css","length","sourceMapSize","sourceMap","isRoot","fileOptions","getFileOptions","hasOwnProperty","isImport","pathInPackage","getPathInPackage","hasUnderscore","file","basename","startsWith","compileOneFileLater","getResult","addStylesheet","result","data","compileOneFile","allFiles","referencedImportPaths","totalImportPath","sourceMapPaths","getDisplayPath","addUnderscore","join","dirname","getRealImportPath","importPath","isAbsolute","possibleFiles","possibleExtensions","match","getExtension","filter","e","extension","push","possibleFile","fileExists","has","absolute","fixTilde","thePath","newPath","replace","importer","url","prev","done","undefined","i","splice","accPosition","indexOf","substr","endsWith","parsed","_getRealImportPathFromIncludes","Error","contents","readFileSync","decodeFilePath","get","getContentsAsString","options","sourceMapContents","sourceMapEmbed","sourceComments","omitSourceMapUrl","sourceMapRoot","indentedSyntax","outFile","getBasename","precision","getAbsoluteImportPath","getContentsAsBuffer","toString","trim","output","error","message","formatted","sourcePath","map","JSON","parse","sources","addCompileResult","getRealImportPathFn","possibleFilePath","foundFile","includePath","configFileName","appdir","custom_config_filename","userConfig","encoding","filePath","statSync","existsSync"],"mappings":"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","file":"/packages/compileScssBatch_plugin.js","sourcesContent":["import sass from 'node-sass';\nimport { promisify } from 'util';\nconst path = Plugin.path;\nconst fs = Plugin.fs;\n\nconst compileSass = promisify(sass.render);\nconst rootDir = (process.env.PWD || process.cwd()) + \"/\";\n\nconst { includePaths } = _getConfig('scss-config.json');\nconst _includePaths = Array.isArray(includePaths) ? includePaths : [];\n\nPlugin.registerCompiler({\n  extensions: ['scss', 'sass'],\n  archMatching: 'web'\n}, () => new SassCompiler());\n\n// CompileResult is {css, sourceMap}.\nclass SassCompiler extends MultiFileCachingCompiler {\n  constructor() {\n    super({\n      compilerName: 'sass',\n      defaultCacheSize: 1024*1024*10,\n    });\n  }\n\n  getCacheKey(inputFile) {\n    return inputFile.getSourceHash();\n  }\n\n  compileResultSize(compileResult) {\n    return compileResult.css.length +\n      this.sourceMapSize(compileResult.sourceMap);\n  }\n\n  // The heuristic is that a file is an import (ie, is not itself processed as a\n  // root) if it matches _*.sass, _*.scss\n  // This can be overridden in either direction via an explicit\n  // `isImport` file option in api.addFiles.\n  isRoot(inputFile) {\n    const fileOptions = inputFile.getFileOptions();\n\n    if (fileOptions.hasOwnProperty('isImport')) {\n      return !fileOptions.isImport;\n    }\n\n    const pathInPackage = inputFile.getPathInPackage();\n    return !this.hasUnderscore(pathInPackage);\n  }\n\n  hasUnderscore(file) {\n    return path.basename(file).startsWith('_');\n  }\n\n  compileOneFileLater(inputFile, getResult) {\n    inputFile.addStylesheet({\n      path: inputFile.getPathInPackage(),\n    }, async () => {\n      const result = await getResult();\n      return result && {\n        data: result.css,\n        sourceMap: result.sourceMap,\n        };\n    });\n  }\n\n  async compileOneFile(inputFile, allFiles) {\n    const referencedImportPaths = [];\n\n    var totalImportPath = [];\n    var sourceMapPaths = [`.${inputFile.getDisplayPath()}`];\n\n    const addUnderscore = (file) => {\n      if (!this.hasUnderscore(file)) {\n        file = path.join(path.dirname(file), `_${path.basename(file)}`);\n      }\n      return file;\n    }\n\n    const getRealImportPath = (importPath) => {\n      const isAbsolute = importPath.startsWith('/');\n\n      //SASS has a whole range of possible import files from one import statement, try each of them\n      const possibleFiles = [];\n\n      //If the referenced file has no extension, try possible extensions, starting with extension of the parent file.\n      let possibleExtensions = ['scss','sass','css'];\n\n      if(! importPath.match(/\\.s?(a|c)ss$/)){\n        possibleExtensions = [\n          inputFile.getExtension(),\n          ...possibleExtensions.filter(e => e !== inputFile.getExtension())\n          ]\n        for (const extension of possibleExtensions){\n          possibleFiles.push(`${importPath}.${extension}`);\n        }\n      }else{\n        possibleFiles.push(importPath);\n      }\n\n      //Try files prefixed with underscore\n      for (const possibleFile of possibleFiles) {\n        if (! this.hasUnderscore(possibleFile)) {\n          possibleFiles.push(addUnderscore(possibleFile));\n        }\n      }\n\n      //Try if one of the possible files exists\n      for (const possibleFile of possibleFiles) {\n        if ((isAbsolute && fileExists(possibleFile)) || (!isAbsolute && allFiles.has(possibleFile))) {\n            return { absolute: isAbsolute, path: possibleFile };\n        }\n      }\n      //Nothing found...\n      return null;\n\n    };\n\n\n    const fixTilde = function(thePath) {\n      let newPath = thePath;\n      // replace ~ with {}/....\n      if (newPath.startsWith('~')) {\n        newPath = newPath.replace('~', '{}/node_modules/');\n      }\n\n      // add {}/ if starts with node_modules\n      if (!newPath.startsWith('{')) {\n        if (newPath.startsWith('node_modules')) {\n          newPath = '{}/' + newPath;\n        }\n        if (newPath.startsWith('/node_modules')) {\n          newPath = '{}' + newPath;\n        }\n      }\n\n      return newPath;\n    }\n\n    //Handle import statements found by the sass compiler, used to handle cross-package imports\n    const importer = function(url, prev, done) {\n\n      prev = fixTilde(prev);\n      if (!totalImportPath.length) {\n        totalImportPath.push(prev);\n      }\n\n      if (prev !== undefined) {\n\n        // iterate backwards over totalImportPath and remove paths that don't equal the prev url\n        for (let i = totalImportPath.length - 1; i >= 0; i--) {\n\n          // check if importPath contains prev, if it doesn't, remove it. Up until we find a path that does contain it\n          if (totalImportPath[i] == prev) {\n            break\n          } else {\n            // remove last item (which has to be item i because we are iterating backwards)\n            totalImportPath.splice(i,1)\n          }\n        }\n\n      }\n\n      let importPath = fixTilde(url);\n      for (let i = totalImportPath.length - 1; i >= 0; i--) {\n        if (importPath.startsWith('/') || importPath.startsWith('{')) {\n          break;\n        }\n        // 'path' is the nodejs path module\n        importPath = path.join(path.dirname(totalImportPath[i]),importPath);\n      }\n\n      let accPosition = importPath.indexOf('{');\n      if (accPosition > -1) {\n        importPath = importPath.substr(accPosition,importPath.length);\n      }\n\n      // TODO: This fix works.. BUT if you edit the scss/css file it doesn't recompile! Probably because of the absolute path problem\n      if (importPath.startsWith('{')) {\n        // replace {}/node_modules/ for rootDir + \"node_modules/\"\n        importPath = importPath.replace(/^(\\{\\}\\/node_modules\\/)/, rootDir + \"node_modules/\");\n        // importPath = importPath.replace('{}/node_modules/', rootDir + \"node_modules/\");\n        if (importPath.endsWith('.css')) {\n          // .css files aren't in allFiles. Replace {}/ for absolute path.\n          importPath = importPath.replace(/^(\\{\\}\\/)/, rootDir)\n        }\n      }\n\n      try {\n        let parsed = getRealImportPath(importPath);\n\n        if (!parsed) {\n          parsed = _getRealImportPathFromIncludes(url, getRealImportPath);\n        }\n        if (!parsed) {\n          //Nothing found...\n          throw new Error(`File to import: ${url} not found in file: ${totalImportPath[totalImportPath.length - 2]}`);\n        }\n        totalImportPath.push(parsed.path);\n\n        if (parsed.absolute) {\n          sourceMapPaths.push(parsed.path);\n          done({ contents: fs.readFileSync(parsed.path, 'utf8'), file: parsed.path});\n\n        } else {\n          referencedImportPaths.push(parsed.path);\n          sourceMapPaths.push(decodeFilePath(parsed.path));\n          done({ contents: allFiles.get(parsed.path).getContentsAsString(), file: parsed.path});\n        }\n      } catch (e) {\n        return done(e);\n      }\n\n    }\n\n    //Start compile sass (async)\n    const options = {\n      sourceMap: true,\n      sourceMapContents: true,\n      sourceMapEmbed: false,\n      sourceComments: false,\n      omitSourceMapUrl: true,\n      sourceMapRoot: '.',\n      indentedSyntax : inputFile.getExtension() === 'sass',\n      outFile: `.${inputFile.getBasename()}`,\n      importer,\n      includePaths: [],\n      precision: 10,\n    };\n\n    options.file = this.getAbsoluteImportPath(inputFile);\n\n    options.data = inputFile.getContentsAsBuffer().toString('utf8');\n\n    //If the file is empty, options.data is an empty string\n    // In that case options.file will be used by node-sass,\n    // which it can not read since it will contain a meteor package or app reference '{}'\n    // This is one workaround, another one would be to not set options.file, in which case the importer 'prev' will be 'stdin'\n    // However, this would result in problems if a file named stdÃ­n.scss would exist.\n    // Not the most elegant of solutions, but it works.\n    if (!options.data.trim()) {\n      options.data = '$fakevariable_ae7bslvbp2yqlfba : blue;';\n    }\n\n    let output;\n    try {\n      output = await compileSass(options);\n    } catch (e) {\n      inputFile.error({\n        message: `Scss compiler error: ${e.formatted}\\n`,\n        sourcePath: inputFile.getDisplayPath()\n      });\n      return null;\n    }\n    //End compile sass\n\n    //Start fix sourcemap references\n    if (output.map) {\n      const map = JSON.parse(output.map.toString('utf-8'));\n      map.sources = sourceMapPaths;\n      output.map = map;\n    }\n    //End fix sourcemap references\n\n    const compileResult = { css: output.css.toString('utf-8'), sourceMap: output.map };\n    return { compileResult, referencedImportPaths };\n  }\n\n  addCompileResult(inputFile, compileResult) {\n    inputFile.addStylesheet({\n      data: compileResult.css,\n      path: `${inputFile.getPathInPackage()}.css`,\n      sourceMap: compileResult.sourceMap,\n    });\n  }\n}\n\nfunction _getRealImportPathFromIncludes(importPath, getRealImportPathFn){\n  let possibleFilePath, foundFile;\n\n  for (let includePath of _includePaths) {\n    possibleFilePath = path.join(includePath, importPath);\n    foundFile = getRealImportPathFn(possibleFilePath);\n\n    if (foundFile) {\n      return foundFile;\n    }\n  }\n\n  return null;\n}\n\n/**\n * Build a path from current process working directory (i.e. meteor project\n * root) and specified file name, try to get the file and parse its content.\n * @param configFileName\n * @returns {{}}\n * @private\n */\nfunction _getConfig(configFileName) {\n  const appdir = process.env.PWD || process.cwd();\n  const custom_config_filename = path.join(appdir, configFileName);\n  let userConfig = {};\n\n  if (fileExists(custom_config_filename)) {\n    userConfig = fs.readFileSync(custom_config_filename, {\n      encoding: 'utf8'\n    });\n    userConfig = JSON.parse(userConfig);\n  } else {\n    //console.warn('Could not find configuration file at ' + custom_config_filename);\n  }\n  return userConfig;\n}\n\nfunction decodeFilePath (filePath) {\n  const match = filePath.match(/{(.*)}\\/(.*)$/);\n  if (!match) {\n    throw new Error(`Failed to decode sass path: ${filePath}`);\n  }\n\n  if (match[1] === '') {\n    // app\n    return match[2];\n  }\n\n  return `packages/${match[1]}/${match[2]}`;\n}\n\nfunction fileExists(file) {\n  if (fs.statSync){\n    try {\n      fs.statSync(file);\n    } catch (e) {\n      return false;\n    }\n    return true;\n  } else if (fs.existsSync) {\n    return fs.existsSync(file);\n  }\n}"]}