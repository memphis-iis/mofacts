<tutor>
	<setspec>
		<lessonname>Chapter 10 Nervous System 1 AB</lessonname>
		<userselect>false</userselect>
		<stimulusfile>CH10AB.json</stimulusfile>
		<lfparameter>.85</lfparameter>
		<speechAPIKey/>
		<audioInputEnabled>true</audioInputEnabled>
		<audioInputSensitivity>15</audioInputSensitivity>
		<speechIgnoreOutOfGrammarResponses>true</speechIgnoreOutOfGrammarResponses>
		<speechOutOfGrammarFeedback>Please try again</speechOutOfGrammarFeedback>
		<enableAudioPromptAndFeedback>true</enableAudioPromptAndFeedback>
		<audioPromptSpeakingRate>1</audioPromptSpeakingRate>
		<textToSpeechAPIKey/>
	</setspec>
	<unit>
		<unitinstructions>Instructions: Our MoFaCTS system has chosen some of the most important sentences from your textbook and they are presented here for your practice. This practice assumes you have read the textbook first, so that you understand the basic layout. For each sentence we remove keywords and the practice is to fill-in-the-blank for each sentence. Such quizzing has been proven to be an powerful aid to memory, and the system focuses on items you get wrong to make sure you learn all the items thouroughly. The system  pronounces keywords to help you memorize them if you turn that on in the main menu. The system also provides the progress button above to check how much practice you have done, and how well our AI system thinks you have learned the words. We hope you will be able to use this progress information to decide if you want to continue the practice after you have completed the required amount.</unitinstructions>
		<unitname>Chapter 10 Nervous System 1</unitname>
		<learningsession>
			<clusterlist>0-181</clusterlist>
			<unitMode>thresholdCeiling</unitMode>
			<calculateProbability><![CDATA[
          function mul(m1, m2) {
            var result = 0;
            var len = m1.length;
            for (var i = 0; i < len; i++) {
                result += m1[i] * m2[i]
            } return result}
          function logitdec(outcomes, decay) {
            if (outcomes) {
                var outcomessuc = JSON.parse(JSON.stringify(outcomes));
                var outcomesfail = outcomes.map(function(value) {
                    return Math.abs(value - 1)
                });
                var w = outcomessuc.unshift(1);
                var v = outcomesfail.unshift(1);
                return Math.log(mul(outcomessuc, [...Array(w).keys()].reverse().map(function(value, index) {
                    return Math.pow(decay, value)
                })) / mul(outcomesfail, [...Array(w).keys()].reverse().map(function(value, index) {
                    return Math.pow(decay, value)
                }))) } return 0}
          function recency(age, d) {
          if (age==0) { return 0;
          } else
            {return Math.pow(1 + age, -d); }}
          function quaddiffcor(seq, probs) {
            return mul(seq, probs.map(function(value) {
                return value * value
            }))}
          function linediffcor(seq, probs) {
            return mul(seq, probs)}
          function linediffincor(seq, probs) {
            return mul(seq.map(function(value) {
                return Math.abs(value - 1)
            }), probs)}
          p.y = -0.86820+
          0.57548 * logitdec(
              p.overallOutcomeHistory.slice(p.overallOutcomeHistory.length-60,
              p.overallOutcomeHistory.length), .97) +
          0.77959 * logitdec(p.responseOutcomeHistory, .91) +
          12.49161 * recency(p.stimSecsSinceLastShown, .52) +
          1.25622 *  recency(p.responseSecsSinceLastShown, .105) +
          1.32434  * linediffcor(p.stimOutcomeHistory, p.stimPreviousCalculatedProbabilities) +
          -1.54024 * quaddiffcor(p.stimOutcomeHistory, p.stimPreviousCalculatedProbabilities) +
          -0.52084 * linediffincor(p.stimOutcomeHistory, p.stimPreviousCalculatedProbabilities)+
           0.13108 * (p.stimSuccessCount+p.stimFailureCount);
          p.probability = 1.0 / (1.0 + Math.exp(-p.y));
        // console.log(p.overallOutcomeHistory+" - "+p.responseOutcomeHistory +" - "+p.stimSecsSinceLastShown+" - "+p.stimOutcomeHistory+" - "+p.stimPreviousCalculatedProbabilities);
          return p
             ]]></calculateProbability>
		</learningsession>
		<deliveryparams>
			<autostopTimeoutThreshold>1</autostopTimeoutThreshold>
			<drill>30000</drill>
			<purestudy>16000</purestudy>
			<skipstudy>true</skipstudy>
			<reviewstudy>15000</reviewstudy>
			<correctprompt>750</correctprompt>
			<fontsize>4</fontsize>
			<correctscore>1</correctscore>
			<incorrectscore>0</incorrectscore>
		</deliveryparams>
	</unit>
</tutor>
