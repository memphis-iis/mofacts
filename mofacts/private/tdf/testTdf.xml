<tutor>
	<setspec>
		<name>Internal Testing</name>
		<lessonname>Testing Tdf</lessonname>
		<userselect>true</userselect>
		<experimentTarget>test</experimentTarget>
		<stimulusfile>testStim.json</stimulusfile>
		<isModeled>false</isModeled>
		<lfparameter>.85</lfparameter>
		<simTimeout>3500</simTimeout>
		<simCorrectProb>0.85</simCorrectProb>
		<speechAPIKey></speechAPIKey>
		<textToSpeechAPIKey></textToSpeechAPIKey>
		<audioInputEnabled>true</audioInputEnabled>
		<audioInputSensitivity>15</audioInputSensitivity>
		<speechIgnoreOutOfGrammarResponses>false</speechIgnoreOutOfGrammarResponses>
		<speechOutOfGrammarFeedback>Please try again</speechOutOfGrammarFeedback>
		<enableAudioPromptAndFeedback>true</enableAudioPromptAndFeedback>
		<audioPromptSpeakingRate>1</audioPromptSpeakingRate>
		<prestimulusDisplay>Prestimulus Display Text</prestimulusDisplay>
	</setspec>
	<unit>
		<unitinstructions>Here comes the test assessment session</unitinstructions>
		<unitname>Schedule Unit</unitname>
		<buttontrial>true</buttontrial>
		<deliveryparams>
			<practiceseconds>1000000</practiceseconds>
			<drill>5000</drill>
			<skipstudy>false</skipstudy>
			<purestudy>5000</purestudy>
			<reviewstudy>5000</reviewstudy>
			<correctprompt>500</correctprompt>
			<fontsize>2</fontsize>
			<correctscore>0</correctscore>
			<incorrectscore>0</incorrectscore>
			<numButtonListImageColumns>3</numButtonListImageColumns>
		</deliveryparams>
		<assessmentsession>
			<conditiontemplatesbygroup>
				<groupnames>A</groupnames>
				<clustersrepeated>1</clustersrepeated>
				<templatesrepeated>3</templatesrepeated>
				<group>0,t,t,0 0,t,t,0 0,t,t,0</group>
			</conditiontemplatesbygroup>
			<initialpositions>A_1 A_2 A_3</initialpositions>
			<randomizegroups>false</randomizegroups>
			<clusterlist>2-2</clusterlist>
			<assignrandomclusters>false</assignrandomclusters>
		</assessmentsession>
	</unit>
	<unit>
		<unitinstructions>Here comes the testing learning session.</unitinstructions>
		<unitname>Model Unit</unitname>
		<learningsession>
			<clusterlist>1-1</clusterlist>
			<calculateProbability><![CDATA[
          function mul(m1, m2) {
            var result = 0;
            var len = m1.length;
            for (var i = 0; i < len; i++) {
                result += m1[i] * m2[i]
            }
            return result
          }
          function logitdec(outcomes, decay) {
            if (outcomes) {
                var outcomessuc = JSON.parse(JSON.stringify(outcomes));
                var outcomesfail = outcomes.map(function(value) {
                    return Math.abs(value - 1)
                });
                var w = outcomessuc.unshift(1);
                var v = outcomesfail.unshift(1);
                return Math.log(mul(outcomessuc, [...Array(w).keys()].reverse().map(function(value, index) {
                    return Math.pow(decay, value)
                })) / mul(outcomesfail, [...Array(w).keys()].reverse().map(function(value, index) {
                    return Math.pow(decay, value)
                })))
            }
            return 0
          }
          function recency(age, d) {
          if (age==0) { return 0;
          } else
            {return Math.pow(1 + age, -d);
            }
          }
          function quaddiffcor(seq, probs) {
            return mul(seq, probs.map(function(value) {
                return value * value
            }))
          }
          function linediffcor(seq, probs) {
            return mul(seq, probs)
          }
          function linediffincor(seq, probs) {
            return mul(seq.map(function(value) {
                return Math.abs(value - 1)
            }), probs)
          }
          var numTotalSyllables = p.syllables;
          p.hintsylls = [];
          var numHiddenSyllables = p.stimIndex % 2 == 0 ? 1 : 2;
          if(numHiddenSyllables > numTotalSyllables){
              numHiddenSyllables = numTotalSyllables;
          }
          for(var i=0;i<numTotalSyllables-numHiddenSyllables;i++){
              p.hintsylls.push(i);
          }
          
          p.y = -0.72159+
          .58150 * logitdec(
              p.overallOutcomeHistory.slice(p.overallOutcomeHistory.length-60,
              p.overallOutcomeHistory.length), .97) +
          .54467 * logitdec(p.responseOutcomeHistory, .79) +
          9.67995 * recency(p.stimSecsSinceLastShown, .35)+
          1.85143  * linediffcor(p.stimOutcomeHistory, p.stimPreviousCalculatedProbabilities) +
          -1.96012 * quaddiffcor(p.stimOutcomeHistory, p.stimPreviousCalculatedProbabilities) +
          -0.27823 * linediffincor(p.stimOutcomeHistory, p.stimPreviousCalculatedProbabilities);
          p.probability = 1.0 / (1.0 + Math.exp(-p.y));
        // console.log(p.overallOutcomeHistory+" - "+p.responseOutcomeHistory +" - "+p.stimSecsSinceLastShown+" - "+p.stimOutcomeHistory+" - "+p.stimPreviousCalculatedProbabilities);
          return p
             ]]></calculateProbability>
		</learningsession>
		<buttontrial>false</buttontrial>
		<buttonorder>random</buttonorder>
		<deliveryparams>
			<feedbackType>dialogue</feedbackType>
			<forceCorrection>true</forceCorrection>
			<practiceseconds>1000000</practiceseconds>
			<drill>20000</drill>
			<purestudy>20000</purestudy>
			<skipstudy>false</skipstudy>
			<reviewstudy>5000</reviewstudy>
			<correctprompt>500</correctprompt>
			<fontsize>2</fontsize>
			<correctscore>1</correctscore>
			<incorrectscore>0</incorrectscore>
			<falseAnswerLimit>3</falseAnswerLimit>
			<timeuntilaudio>500</timeuntilaudio>
			<timeuntilaudiofeedback>500</timeuntilaudiofeedback>
			<prestimulusdisplaytime>500</prestimulusdisplaytime>
		</deliveryparams>
	</unit>
	<unit>
		<unitname>last</unitname>
		<unitinstructions>You are all done.</unitinstructions>
	</unit>
</tutor>
