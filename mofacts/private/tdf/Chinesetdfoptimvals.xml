<tutor>
    <setspec>
        <name>Cat Optim Test</name>
        <lessonname>Optimized Drill Practice of Chinese Tones</lessonname>
        <userselect>false</userselect>
        <stimulusfile>Chinesestimsoptimvals.json</stimulusfile>
    </setspec>

    <unit>
        <unitinstructions>Here comes the optim test.</unitinstructions>
        <unitname>Tone pre-test</unitname>
         <buttonorder>fixed</buttonorder>
        <wrongButtonCount></wrongButtonCount> <!-- Default to len of wrongButtonOptions -->
        <wrongButtonOptions>tone 1, tone 2, tone 3, tone 4</wrongButtonOptions>
         <deliveryparams>
            <practiceseconds>1000000</practiceseconds>
            <drill>7000</drill>
            <skipstudy>false</skipstudy>
            <reviewstudy>6000</reviewstudy>
            <correctprompt>1000</correctprompt>
            <fontsize>2</fontsize>
            <correctscore>1</correctscore>
            <incorrectscore>0</incorrectscore>
            <timebeforefeedback>500</timebeforefeedback>
            <timeuntilstimulus>500</timeuntilstimulus>
        </deliveryparams>
         <buttontrial>true</buttontrial>
         <learningsession>
             <clusterlist>0-3</clusterlist>
             <unitMode>distance</unitMode>
             <calculateProbability><![CDATA[

          function mul(m1, m2) {
            var result = 0;
            var len = m1.length;
            for (var i = 0; i < len; i++) {
                result += m1[i] * m2[i]
            }
            return result
          }

          function logitdec(outcomes, decay) {
            if (outcomes) {
                var outcomessuc = JSON.parse(JSON.stringify(outcomes));
                var outcomesfail = outcomes.map(function(value) {
                    return Math.abs(value - 1)
                });
                var w = outcomessuc.unshift(1);
                var v = outcomesfail.unshift(1);
                return Math.log(mul(outcomessuc, [...Array(w).keys()].reverse().map(function(value, index) {
                    return Math.pow(decay, value)
                })) / mul(outcomesfail, [...Array(w).keys()].reverse().map(function(value, index) {
                    return Math.pow(decay, value)
                })))
            }
            return 0
          }

          function propdec(outcomes, decay) {
            if (outcomes) {
                var outcomesLocal = JSON.parse(JSON.stringify(outcomes));
                var w = outcomesLocal.unshift(1);
                return mul(outcomesLocal, [...Array(w).keys()].reverse().map(function(value, index) {
                    return Math.pow(decay, value)
                })) / [...Array(w + 1).keys()].reverse().map(function(value, index) {
                    return Math.pow(decay, value)
                }).reduce((a, b) => a + b, 0)
            }
            return .5
          }

          function baselevel(age, interference, d, f) {
            return 1 / Math.pow(1 + interference + ((age - interference) * f), d)
          }

          function recency(age, d) {
            return 1 / Math.pow(1 + age, d)
          }

          function compdiffcor(seq, probs) {
            return mul(seq, probs) - mul(seq, probs.map(function(value) {
                return value * value
            }))
          }

          function quaddiffcor(seq, probs) {
            return mul(seq, probs.map(function(value) {
                return value * value
            }))
          }

          function linediffcor(seq, probs) {
            return mul(seq, probs)
          }

          function linediffincor(seq, probs) {
            return mul(seq.map(function(value) {
                return Math.abs(value - 1)
            }), probs)
          }

          p.y = p.stimParameters[0] + .75151021 * logitdec(p.overallOutcomeHistory, .975) +
                p.stimParameters[2] * compdiffcor(p.clusterOutcomeHistory, p.clusterPreviousCalculatedProbabilities) +
                p.stimParameters[3] * linediffincor(p.clusterOutcomeHistory, p.clusterPreviousCalculatedProbabilities);
          p.probability = 1.0 / (1.0 + Math.exp(-p.y));

          console.log(p.stimParameters[0]);
          console.log(.75151021 * logitdec(p.overallOutcomeHistory, .975) );
          console.log(p.stimParameters[2] * compdiffcor(p.clusterOutcomeHistory, p.clusterPreviousCalculatedProbabilities));
          console.log(p.stimParameters[3] * linediffincor(p.clusterOutcomeHistory, p.clusterPreviousCalculatedProbabilities));
console.log(p.probability )
          return p

             ]]></calculateProbability><XcalculateProbability><![CDATA[
                 p.CUSTOM_MSG = "Random p model";
                 p.probability = Math.random();  // random p means model picks randomly
                 return p;
             ]]></XcalculateProbability>
         </learningsession>
    </unit>


   <unit>
        <unitinstructions>Here comes the post-test.</unitinstructions>
        <unitname>Tone post-test</unitname>
         <buttonorder>fixed</buttonorder>
        <wrongButtonCount></wrongButtonCount> <!-- Default to len of wrongButtonOptions -->
        <wrongButtonOptions>tone 1, tone 2, tone 3, tone 4</wrongButtonOptions>
         <deliveryparams>
            <practiceseconds>1000000</practiceseconds>
            <drill>7000</drill>
            <skipstudy>false</skipstudy>
            <reviewstudy>6000</reviewstudy>
            <correctprompt>1000</correctprompt>
            <fontsize>2</fontsize>
            <correctscore>1</correctscore>
            <incorrectscore>0</incorrectscore>
            <timebeforefeedback>500</timebeforefeedback>
            <timeuntilstimulus>500</timeuntilstimulus>
        </deliveryparams>
         <buttontrial>true</buttontrial>
        <assessmentsession>
            <conditiontemplatesbygroup>
                <groupnames>A B C D</groupnames>
                <clustersrepeated>18 18 18 18</clustersrepeated>
                <templatesrepeated>1 1 1 1</templatesrepeated>
                <group>0,f,t,0 1,f,t,1 6,f,t,2 7,f,t,3 12,f,t,4 13,f,t,5
                18,f,t,6 19,f,t,7 24,f,t,8 25,f,t,9 30,f,t,10 31,f,t,11
                36,f,t,12 37,f,t,13 42,f,t,14 43,f,t,15 48,f,t,16 49,f,t,17
               </group>
               <group>0,f,t,0 1,f,t,1 6,f,t,2 7,f,t,3 12,f,t,4 13,f,t,5
                18,f,t,6 19,f,t,7 24,f,t,8 25,f,t,9 30,f,t,10 31,f,t,11
                 36,f,t,12 37,f,t,13 42,f,t,14 43,f,t,15 48,f,t,16 49,f,t,17
               </group>
               <group>0,f,t,0 1,f,t,1 6,f,t,2 7,f,t,3 12,f,t,4 13,f,t,5
                18,f,t,6 19,f,t,7 24,f,t,8 25,f,t,9 30,f,t,10 31,f,t,11
                 36,f,t,12 37,f,t,13 42,f,t,14 43,f,t,15 48,f,t,16 49,f,t,17
               </group>
               <group>0,f,t,0 1,f,t,1 6,f,t,2 7,f,t,3 12,f,t,4 13,f,t,5
                18,f,t,6 19,f,t,7 24,f,t,8 25,f,t,9 30,f,t,10 31,f,t,11
                 36,f,t,12 37,f,t,13 42,f,t,14 43,f,t,15 48,f,t,16 49,f,t,17
               </group>
            </conditiontemplatesbygroup>
            <initialpositions>
                 A_1 A_1 A_1 A_1 A_1 A_1 A_1 A_1 A_1 A_1 A_1 A_1 A_1 A_1 A_1 A_1 A_1 A_1
                B_1 B_1 B_1 B_1 B_1 B_1 B_1 B_1 B_1 B_1 B_1 B_1 B_1 B_1 B_1 B_1 B_1 B_1
                C_1 C_1 C_1 C_1 C_1 C_1 C_1 C_1 C_1 C_1 C_1 C_1 C_1 C_1 C_1 C_1 C_1 C_1
                D_1 D_1 D_1 D_1 D_1 D_1 D_1 D_1 D_1 D_1 D_1 D_1 D_1 D_1 D_1 D_1 D_1 D_1
            </initialpositions>
            <randomizegroups>false</randomizegroups>
            <clusterlist>0-3</clusterlist>
            <assignrandomclusters>false</assignrandomclusters>
            <permutefinalresult>0-71</permutefinalresult>
        </assessmentsession>
    </unit>




    <unit>
        <unitname>Show the questions</unitname>
        <unitinstructions><![CDATA[Demographic Survey<br><br>
Please answer the following 9 quick demographic questions, which may be useful for us to understand the data we collect.]]></unitinstructions>
        <buttonorder>fixed</buttonorder>
        <deliveryparams>
            <drill>12000000</drill>
            <purestudy>16000</purestudy>
            <skipstudy>false</skipstudy>
            <reviewstudy>16000</reviewstudy>
            <correctprompt>500</correctprompt>
            <fontsize>3</fontsize>
            <correctscore>0</correctscore>
            <incorrectscore>0</incorrectscore>
        </deliveryparams>
        <buttontrial>false</buttontrial>
        <assessmentsession>
            <conditiontemplatesbygroup>
                <groupnames>E</groupnames>
                <clustersrepeated>1</clustersrepeated>
                <templatesrepeated>9</templatesrepeated>
                <group>0,b,t,0 0,f,t,0 0,b,t,0 0,b,t,0 0,b,t,0 0,b,t,0 0,f,t,0 0,b,t,0 0,b,t,0 </group>
            </conditiontemplatesbygroup>
            <initialpositions>                E_1 E_2 E_3 E_4 E_5 E_6 E_7 E_8 E_9          </initialpositions>
            <randomizegroups>false</randomizegroups>
            <clusterlist>4-12</clusterlist>
            <assignrandomclusters>false</assignrandomclusters>
            <permutefinalresult>0-0</permutefinalresult>
        </assessmentsession>
    </unit>
    <unit>
        <unitname>last</unitname>
        <unitinstructions><![CDATA[You have completed the experiment.
<br><br>
<strong>Please enter the code- Tones -into the Amazon Mechanical Turk website for this HIT and submit your response now.
<br><br>
We will check your completion and approve your assignment for the $6 payment.]]></unitinstructions>
    </unit>
</tutor>
