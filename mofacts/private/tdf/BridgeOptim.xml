<tutor>
    <setspec>
        <name>Internal Testing with SVO and Models</name>
        <lessonname>Optimized Drill Practice for Bridge Play</lessonname>
        <userselect>true</userselect>
        <stimulusfile>Bridgestims.json</stimulusfile>
        <isModeled>false</isModeled>
        <lfparameter>.85</lfparameter>
        <simTimeout>3500</simTimeout>
        <simCorrectProb>0.85</simCorrectProb>
        <shuffleclusters>0-70</shuffleclusters>
        <enableAudioPromptAndFeedback>true</enableAudioPromptAndFeedback>
        <textToSpeechAPIKey></textToSpeechAPIKey>
    </setspec>
    <unit>
        <unitname>Show the questions</unitname>
        <unitinstructions><![CDATA[Demographic Survey<br><br>
Please answer the following 3 quick demographic questions, which may be useful for us to understand the data we collect.]]></unitinstructions>
        <buttonorder>fixed</buttonorder>
        <deliveryparams>
            <drill>12000000</drill>
            <purestudy>16000</purestudy>
            <skipstudy>false</skipstudy>
            <reviewstudy>16000</reviewstudy>
            <correctprompt>500</correctprompt>
            <fontsize>3</fontsize>
            <correctscore>0</correctscore>
            <incorrectscore>0</incorrectscore>
        </deliveryparams>
        <buttontrial>false</buttontrial>
        <assessmentsession>
            <conditiontemplatesbygroup>
                <groupnames>A</groupnames>
                <clustersrepeated>1</clustersrepeated>
                <templatesrepeated>3</templatesrepeated>
                <group>0,b,t,0 0,b,t,0 0,b,t,0            </group>
            </conditiontemplatesbygroup>
            <initialpositions>                A_1 A_2 A_3         </initialpositions>
            <randomizegroups>false</randomizegroups>
            <clusterlist>71-73</clusterlist>
            <assignrandomclusters>false</assignrandomclusters>
            <permutefinalresult>0-0</permutefinalresult>
        </assessmentsession>
    </unit>
    <unit>
        <unitinstructions>Here comes the optimized learning of the rules of bridge.</unitinstructions>
        <unitname>Model Unit</unitname>
        <learningsession>
            <clusterlist>0-70</clusterlist>
            <calculateProbability><![CDATA[
                // An example of a custom probability routine. Note that we don't
                // declare a function, but we MUST set p.probability and return p.
                // We are also allowed to parameters to p for output to the console
                // (if we are logged in a teacher)

                // A demonstration of a variable that will be shown in the console
                p.CUSTOM_MSG = "In our custom function";

                // Calculated metrics
                p.baseLevel = 1 / Math.pow(1 + p.questionSecsPracticingOthers + ((p.questionSecsSinceFirstShown - p.questionSecsPracticingOthers) * 0.00785),  0.2514);

                p.meanSpacing = 0;

                if (p.questionStudyTrialCount + p.questionTotalTests == 1) {
                    p.meanspacing = 1;
                } else {
                    if (p.questionStudyTrialCount + p.questionTotalTests > 1) {
                        p.meanSpacing = Math.max(
                                1, Math.pow((p.questionSecsSinceFirstShown - p.questionSecsSinceLastShown) / (p.questionStudyTrialCount + p.questionTotalTests - 1), 0.0294)
                                );
                    }
                }

                p.intbs = p.meanSpacing * p.baseLevel;

                p.recency = p.questionSecsSinceLastShown === 0 ? 0 : 1 / Math.pow(1 + p.questionSecsSinceLastShown, 0.2514);

                // Helpful to be able to see our y parameter for debugging
                p.y = p.stimParameters[0] +
                0.55033* Math.log((2+ p.stimSuccessCount)/(2+ p.stimFailureCount))+
                0.88648* Math.log((2 + p.responseSuccessCount)/(2 + p.responseFailureCount))+
                1.00719* Math.log((10 + p.userCorrectResponses)/(10 + p.userTotalResponses-p.userCorrectResponses))+
                3.20689* (p.recency)+
                4.57174* p.intbs * Math.log(1 + p.stimSuccessCount + p.stimFailureCount) +
                0.74734* p.intbs * Math.log(1 + p.responseSuccessCount + p.responseFailureCount);


                // At a minimum we need to set p.probability and return p
                p.probability = 1.0 / (1.0 + Math.exp(-p.y));  // Actual probability
                return p;
            ]]></calculateProbability>
        </learningsession>
        <deliveryparams>
            <showhistory>true</showhistory>
            <forceCorrection>true</forceCorrection>
            <practiceseconds>1000000</practiceseconds>
            <drill>12000</drill>
            <purestudy>12000</purestudy>
            <skipstudy>false</skipstudy>
            <reviewstudy>8000</reviewstudy>
            <correctprompt>750</correctprompt>
            <fontsize>2</fontsize>
            <correctscore>1</correctscore>
            <incorrectscore>0</incorrectscore>
        </deliveryparams>
    </unit>
    <unit>
        <unitname>last</unitname>
        <unitinstructions>You are all done.</unitinstructions>
    </unit>
</tutor>
